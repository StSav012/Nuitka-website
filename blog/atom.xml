<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog</title>
  <updated>2022-05-21T09:44:13.496759+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.25">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/starting-to-blog-who-and-why.html</id>
    <title>Starting to blog, who and why?</title>
    <updated>2010-08-05T22:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="starting-to-blog-who-and-why"&gt;

&lt;p&gt;My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.&lt;/p&gt;
&lt;p&gt;I am privately a developer of Free Software, and currently preparing the
release of my Python compiler. The name of the project will be “Nuitka”
chosen to honor my Russian wife Anna. We are a happy family with 2 sons,
born 2004 and 2007.&lt;/p&gt;
&lt;p&gt;I am starting this blog mostly to report about the new compiler. I don’t
think I will share much about my private life here, but I sure will
share a couple of photos with you occasionally. But mostly I will be
excited to report on the compiler progress.&lt;/p&gt;
&lt;p&gt;So far I didn’t feel like I had anything to say, but the compiler is
approaching its release later this month, and I will need a forum to
talk about it.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/starting-to-blog-who-and-why.html" rel="alternate"/>
    <summary>My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-05T22:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/releasing-nuitka-to-the-world.html</id>
    <title>Releasing Nuitka to the World</title>
    <updated>2010-08-18T07:49:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="releasing-nuitka-to-the-world"&gt;

&lt;p&gt;Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.&lt;/p&gt;
&lt;p&gt;Currently it’s not more than 4% faster than CPython. No surprise there,
if all you did, is removing the bytecode interpretation so far. It’s not
impressive at all. It’s not even a reason to use it. But it’s also only
a start. Clearly, once I get into optimizing the code generation of
Nuitka, it will only get better, and then probably in sometimes dramatic
steps. But I see this as a long term goal.&lt;/p&gt;
&lt;p&gt;I want to have infrastructure in the code place, before doing lots of
possible optimizations that just make Nuitka unmaintainable. And I will
want to have a look at what others did so far in the domain of type
inference and how to apply that for my project.&lt;/p&gt;
&lt;p&gt;I look forward to the reactions about getting this far. The supported
language volume is amazing, and I have a set of nice tricks used. For
example the way generator functions are done is a clever hack.&lt;/p&gt;
&lt;p&gt;Where to go from here? Well, I guess, I am going to judge it by the
feedback I receive. I personally see “constant propagation” as a
laudable first low hanging fruit, that could be solved.&lt;/p&gt;
&lt;p&gt;Consider this readable code on the module level:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now imagine you are using this very frequently in code. Quickly you
determine that the following will be much faster:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Still good? Well, probably next step you are going to inline the
function calls entirely. For optimization, you are making your code less
readable. I do not all appreciate that. My first goal is there to make
the more readable code perform as well or better as the less readable
variant.&lt;/p&gt;
&lt;p&gt;But yes, lets see what happens. Oh, and you will find its &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/releasing-nuitka-to-the-world.html" rel="alternate"/>
    <summary>Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-18T07:49:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html</id>
    <title>New git repository to sync with Nuitka releases</title>
    <updated>2010-08-26T23:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="new-git-repository-to-sync-with-nuitka-releases"&gt;

&lt;p&gt;For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then do your own modifications, and do:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rebase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;each time there is a new release. You will be led through the merge
process as usual. To reduce your differences, feel free to send me the
patches you create with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and I will incorporate useful stuff.&lt;/p&gt;
&lt;div class="admonition-please-note admonition"&gt;
&lt;p class="admonition-title"&gt;Please note&lt;/p&gt;
&lt;p&gt;If you publish your own git repository, please be so kind and name it
“Nuitka-unofficial” or similar, or else it might be mistaken with the
real thing, and drop me a line about it, just so I know.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html" rel="alternate"/>
    <summary>For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:</summary>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-08-26T23:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/family-photo.html</id>
    <title>Family Photo</title>
    <updated>2010-09-07T08:56:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="family-photo"&gt;

&lt;p&gt;As promised I will post some photos of the family occasionally.&lt;/p&gt;
&lt;p&gt;This is an artwork that I created with GIMP:&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/Anna_Sonne_Andre_Michael.png"&gt;&lt;img alt="Photo of my family" src="_images/Anna_Sonne_Andre_Michael.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;It’s a good family, and it’s mine. :-)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/family-photo.html" rel="alternate"/>
    <summary>As promised I will post some photos of the family occasionally.</summary>
    <category term="family" label="family"/>
    <published>2010-09-07T08:56:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-scope-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-12T16:01:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="n"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What is going to happen? Well, think about it, the solution is in the
next paragraph.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that the call “some_function()” is going to give
you a “UnboundLocalError” exception.&lt;/p&gt;
&lt;p&gt;This is because it in functions unlike in classes (or modules) do look
ahead for assigned to variable names. Python allocates a slot for local
variables of functions and that is a property that doesn’t change -
unless you say “global” of course. This slot is used for every access to
the variable name, which forbids you to make it local.&lt;/p&gt;
&lt;p&gt;Surprised? I was too! I only learned it while doing my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler
Nuitka&lt;/a&gt; and I made it a separate posting,
because it really surprised me how different function body and class
body work.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-scope-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="quiz" label="quiz"/>
    <published>2010-09-12T16:01:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-20T20:51:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;for_closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f=2&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Can fool it to nest&lt;/span&gt;
        &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Locals now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Closure was taken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_closure&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Globals still work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_global&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Added local from code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

    &lt;span class="n"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Can you overcome the SyntaxError this gives in CPython? Normally exec
like this is not allowed for nested functions. Well, think about it, the
solution is in the next paragraph.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that you need to add “in None, None” to the exec
and you are fine. The exec is now allowed and behaves as expected. You
can see it in the locals, “f” was indeed added to it, the closure value
is correct, and the global still works.&lt;/p&gt;
&lt;p&gt;It seems the “SyntaxError” tries to avoid such code, but on the other
hand, exec is not forbidden when it has parameters, and those imply
defaults when they are None.&lt;/p&gt;
&lt;p&gt;Now, I had this strange realization when implementing the “exec”
behaviour for my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler Nuitka&lt;/a&gt; which
in its next version (due later this week) will be able to handle this
type code as well. :-)&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-20T20:51:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html</id>
    <title>Nuitka needs you - a call for help</title>
    <updated>2010-11-23T16:11:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-needs-you-a-call-for-help"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Python3 support was added, and has reached 3.3 in the mean time. The
doctests are extracted by a script indeed. But exception stack
correctness is an ongoing struggle.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;my Python compiler Nuitka has come a long way, and currently I have
little to no time to spend on it, due to day job reasons, so it’s going
to mostly stagnate for about 2 weeks from my side. But that’s coming to
an end, and still I would like to expand what we currently have, with
your help.&lt;/p&gt;
&lt;p&gt;Note: You can check the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt;
for clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;p&gt;As you will see, covering all the CPython 2.6 and 2.7 language features
is already something. Other projects are far, far away from that. But
going ahead, I want to secure that base. And this is where there are
several domains where you can help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 3.1 or higher&lt;/p&gt;
&lt;p&gt;I did some early testing. The C/API changed in many ways, and my
current working state has a couple of fixes for it. I would like
somebody else to devote some time to fixing this up. Please contact
me if you can help here, esp. if you are competent in the C/API
changes of Python 3.1. Even if the CPython 3.1 doesn’t matter as much
to me, I believe the extended coverage from the new tests in its test
suite would be useful. The improved state is not yet released. I
would make an release to the person(s) that want to work on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Doctests support&lt;/p&gt;
&lt;p&gt;I have started to extract the doctests from the CPython 2.6 test
suite. There is a script that does it, and you basically only need to
expand it with more of the same. No big issue there, but it could
find issues with Nuitka that we would like to know. Of course, it
should also be expanded to CPython 2.7 test suite and ultimately also
CPython 3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception correctness&lt;/p&gt;
&lt;p&gt;I noted some issues with the stacks when developing with the CPython
2.7 tests, or now failing 2.6 tests, after some merge work. But what
would be needed would be tests to cover all the situations, where
exceptions could be raised, and stack traces should ideally be
identical for all. This is mostly only accuracy work and the CPython
test suite is bad at covering it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these areas would be significant help, and do not necessarily or at
all require any Nuitka inside knowledge. You should also subscribe the
mailing list (since closed) if you consider helping, so we can discuss
things in the open.&lt;/p&gt;
&lt;p&gt;If you choose to help me, before going even further into optimization,
in all likelihood it’s only going to make things more solid. The more
tests we have, the less wrong paths we can take. This is why I am asking
for things, which all point into that direction.&lt;/p&gt;
&lt;p&gt;Thanks in advance, Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <published>2010-11-23T16:11:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-pre-release-034pre1.html</id>
    <title>Nuitka Pre-Release 0.3.4pre1</title>
    <updated>2010-12-06T23:27:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-pre-release-0-3-4pre1"&gt;

&lt;p&gt;This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;“What is Nuitka?”&lt;/a&gt; for clarification of what it is now and what it
wants to be.&lt;/p&gt;
&lt;p&gt;For a long time, Nuitka has generated a single C++ file, even when
embedding many modules into one. And it has always showed that the GNU
g++ compiler clearly has exponential compile time behavior when
translating these into the executable.&lt;/p&gt;
&lt;p&gt;This is no more the case. So this pre-release is mainly about making the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt; feature useful. Before the release, I may look into
optimizations for speed again. Right now time is very short due to day
job reasons, so this pre-release is also about allowing people to use
the improvements that I have made and get some feedback about it.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;None at all. Although I am sure that there may be regressions on the
options side. The tests of CPython 2.7 all pass still, but you may
find some breakage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Static helpers source code has been moved to “.hpp” and “.cpp” files,
instead of being in “.py” files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated generated code for each module is now a separate file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants etc. go to their own file (although not named sensible yet)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Uses Scons to make the build.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I have added ExtremClosure from the Python quiz. I feel it was not
covered by existing tests yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable “NUITKA_SCONS” which should
point to the directory with the Scons file for Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;create-environment.sh&lt;/span&gt;&lt;/code&gt; can now be sourced (if you are in the
top level directory of Nuitka) or be used with eval. In either case
it also reports what it does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;None at this time. It likely didn’t change much at all. And I am not yet
using the link time optimization feature of the g++ compiler, so
potentially it should be worse than before at max.&lt;/p&gt;
&lt;p&gt;This release will be inside the “git” repository only. Check out &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt; to get it.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-pre-release-034pre1.html" rel="alternate"/>
    <summary>This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page “What is Nuitka?” for clarification of what it is now and what it
wants to be.</summary>
    <category term="compiler" label="compiler"/>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-12-06T23:27:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-float-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2011-01-02T13:37:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="quiz-question"&gt;

&lt;p&gt;Say you have the following code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bad bad float!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What value of “s” and then “x” can make the code complain? Do you see
the really bad side of it?&lt;/p&gt;
&lt;p&gt;The answer is in the next paragraph, so stop reading if you want to find
out yourself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that there is one float that is not equal to
itself and that is float(“nan”). Which I find terrible. It is so bad, it
spoils set, dict, and everything there is. Any container that has it
inside is no longer equal to itself.&lt;/p&gt;
&lt;p&gt;Surprised? I was too! I only learned it while doing my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler
Nuitka&lt;/a&gt; and I made it a separate posting,
because it really surprised me how this could possibly happen. A builtin
type that breaks fundamental assumptions like “x == x”.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-float-quiz.html" rel="alternate"/>
    <summary>Say you have the following code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="quiz" label="quiz"/>
    <published>2011-01-02T13:37:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/shes-a-doctor-now.html</id>
    <title>She’s a doctor now</title>
    <updated>2011-04-16T11:48:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="she-s-a-doctor-now"&gt;

&lt;p&gt;My wife has passed the final exams here in Germany finally. I am very
proud of her for managing that. It’s with 2 kids born, a new house
built, and lots of difficulties, like not living in a city with a
university that offers medicin as a study course.&lt;/p&gt;
&lt;p&gt;To celebrate, here is a picture of her from happy days (no photoshop
unlike the &lt;a class="reference external" href="/posts/family-photo.html"&gt;last time&lt;/a&gt;):&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="/_images/Anna_Dithmarsia.jpg"&gt;&lt;img alt="Image of my wife" src="_images/Anna_Dithmarsia.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Anna in front of a bush in Dithmarsia (my home state).&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/shes-a-doctor-now.html" rel="alternate"/>
    <summary>My wife has passed the final exams here in Germany finally. I am very
proud of her for managing that. It’s with 2 kids born, a new house
built, and lots of difficulties, like not living in a city with a
university that offers medicin as a study course.</summary>
    <category term="family" label="family"/>
    <published>2011-04-16T11:48:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-on-pybench---good-and-bad.html</id>
    <title>Looking where Nuitka stands</title>
    <updated>2011-04-16T11:52:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="looking-where-nuitka-stands"&gt;

&lt;p&gt;In case you wonder, [what Nuitka is](/pages/overview.html), look here.
Over the 0.3.x release cycle, I have mostly looked at its performance
with “pystone”. I merely wanted to have a target to look at and &lt;a class="reference external" href="/pages/performance.html"&gt;enjoy
the progress&lt;/a&gt; we have made there.&lt;/p&gt;
&lt;p&gt;In the context of the Windows port then, Khalid Abu Bakr used the
pybench on Windows and that got me interested. It’s a nice collection of
micro benchmarks, which is quite obviously aimed for looking CPython
implementations only. In that it’s quite good to check where Nuitka is
good at, and where it can still take improvements for the milestone 2
stuff.&lt;/p&gt;
&lt;section id="enhancements-to-pybench"&gt;
&lt;h2&gt;Enhancements to PyBench&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The pybench refused to accept that Nuitka could use so little time on
some tests, I needed to hack it to allow it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then it had “ZeroDivisionError” exceptions, because Nuitka can run
fully predictable code not at all, thus with a time of 0ms, which
gives interesting factors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also these are many results, we are going to care for regressions
only, so there is an option now to output only tests with negative
values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-interesting-parts"&gt;
&lt;h2&gt;The Interesting Parts&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka currently has some fields where optimizations are already so
effective as to render the whole benchmark pointless. Longterm, most
of PyBench will not be looked at anymore, where the factor becomes
“infinity”, there is little point in looking at it. We will likely
just use it as a test that optimizations didn’t suddenly regress.
Publishing the numbers will not be as interesting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then there are slow downs. These I take seriously, because of course
I expect that Nuitka shall only be faster than CPython. Sometimes the
implementation of Nuitka for some rarely used features is sub par
though. I color coded these in red in the table below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ComplexPythonFunctionCalls: These are twice as slow, which is an
tribute to the fact, that the code in this domain is only as good as
it needs to be. Of course function calls are very important, and this
needs to be addressed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TryRaiseExcept: This is much slower because of the cost of the raise
statement, which is extremely high currently. For every raise, a
frame object with a specific code object is created, so the traceback
will point to the correct location. This is very inefficient, and
wasteful. We need to be able to create code objects that can be used
for all lines needed, and then we can re-use it and only have one
frame object per function, which then can be re-used itself. There is
already some work for that in [current git](/pages/download.html)
(0.3.9 pre 2), but it’s not yet complete at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WithRaiseExcept: Same problem as TryRaiseExcept, the exception
raising is too expensive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note also that -90% is in fact much worse that +90%, the “diff”
numbers from pybench make improvements look much better than
regressions do. You can also checkout the comparison on the new
[benchmark pages](&lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;https://speedcenter.nuitka.net&lt;/a&gt;) that I am just
creating, they are based on codespeed, which I will blog upon
separately.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Look at this table of results as produced by pybench:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmark-results"&gt;
&lt;h2&gt;Benchmark Results&lt;/h2&gt;
&lt;table summary="Comparing CPython and Nuitka with PyBench"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;span style="color: #000000;"&gt;Test Name&lt;/span&gt;**&lt;/td&gt;
&lt;td&gt;**&lt;span style="color: #000000;"&gt;min CPython&lt;/span&gt;**&lt;/td&gt;
&lt;td&gt;**&lt;span style="color: #000000;"&gt;min Nuitka&lt;/span&gt;**&lt;/td&gt;
&lt;td&gt;**&lt;span style="color: #000000;"&gt;di&lt;/span&gt;&lt;span style="color: #000000;"&gt;ff&lt;/span&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BuiltinFunctionCalls&lt;/td&gt;
&lt;td&gt;76ms&lt;/td&gt;
&lt;td&gt;54ms&lt;/td&gt;
&lt;td&gt;+41.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BuiltinMethodLookup&lt;/td&gt;
&lt;td&gt;57ms&lt;/td&gt;
&lt;td&gt;47ms&lt;/td&gt;
&lt;td&gt;+22.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareFloats&lt;/td&gt;
&lt;td&gt;79ms&lt;/td&gt;
&lt;td&gt;0ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+inf%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareFloatsIntegers&lt;/td&gt;
&lt;td&gt;75ms&lt;/td&gt;
&lt;td&gt;0ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+inf%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareIntegers&lt;/td&gt;
&lt;td&gt;76ms&lt;/td&gt;
&lt;td&gt;0ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+inf%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareInternedStrings&lt;/td&gt;
&lt;td&gt;68ms&lt;/td&gt;
&lt;td&gt;32ms&lt;/td&gt;
&lt;td&gt;+113.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareLongs&lt;/td&gt;
&lt;td&gt;60ms&lt;/td&gt;
&lt;td&gt;0ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+inf%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareStrings&lt;/td&gt;
&lt;td&gt;86ms&lt;/td&gt;
&lt;td&gt;62ms&lt;/td&gt;
&lt;td&gt;+38.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CompareUnicode&lt;/td&gt;
&lt;td&gt;61ms&lt;/td&gt;
&lt;td&gt;50ms&lt;/td&gt;
&lt;td&gt;+21.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ComplexPythonFunctionCalls&lt;/td&gt;
&lt;td&gt;86ms&lt;/td&gt;
&lt;td&gt;179ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #ff0000;"&gt;-52.3%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConcatStrings&lt;/td&gt;
&lt;td&gt;98ms&lt;/td&gt;
&lt;td&gt;99ms&lt;/td&gt;
&lt;td&gt;-0.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConcatUnicode&lt;/td&gt;
&lt;td&gt;127ms&lt;/td&gt;
&lt;td&gt;124ms&lt;/td&gt;
&lt;td&gt;+2.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateInstances&lt;/td&gt;
&lt;td&gt;76ms&lt;/td&gt;
&lt;td&gt;52ms&lt;/td&gt;
&lt;td&gt;+46.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateNewInstances&lt;/td&gt;
&lt;td&gt;58ms&lt;/td&gt;
&lt;td&gt;47ms&lt;/td&gt;
&lt;td&gt;+22.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateStringsWithConcat&lt;/td&gt;
&lt;td&gt;85ms&lt;/td&gt;
&lt;td&gt;90ms&lt;/td&gt;
&lt;td&gt;-6.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateUnicodeWithConcat&lt;/td&gt;
&lt;td&gt;74ms&lt;/td&gt;
&lt;td&gt;68ms&lt;/td&gt;
&lt;td&gt;+9.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DictCreation&lt;/td&gt;
&lt;td&gt;58ms&lt;/td&gt;
&lt;td&gt;36ms&lt;/td&gt;
&lt;td&gt;+60.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DictWithFloatKeys&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;44ms&lt;/td&gt;
&lt;td&gt;+51.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DictWithIntegerKeys&lt;/td&gt;
&lt;td&gt;64ms&lt;/td&gt;
&lt;td&gt;30ms&lt;/td&gt;
&lt;td&gt;+113.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DictWithStringKeys&lt;/td&gt;
&lt;td&gt;60ms&lt;/td&gt;
&lt;td&gt;26ms&lt;/td&gt;
&lt;td&gt;+130.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForLoops&lt;/td&gt;
&lt;td&gt;47ms&lt;/td&gt;
&lt;td&gt;15ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+216.2%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IfThenElse&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;16ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+322.5%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ListSlicing&lt;/td&gt;
&lt;td&gt;69ms&lt;/td&gt;
&lt;td&gt;70ms&lt;/td&gt;
&lt;td&gt;-0.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NestedForLoops&lt;/td&gt;
&lt;td&gt;72ms&lt;/td&gt;
&lt;td&gt;25ms&lt;/td&gt;
&lt;td&gt;+187.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NestedListComprehensions&lt;/td&gt;
&lt;td&gt;87ms&lt;/td&gt;
&lt;td&gt;42ms&lt;/td&gt;
&lt;td&gt;+105.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NormalClassAttribute&lt;/td&gt;
&lt;td&gt;62ms&lt;/td&gt;
&lt;td&gt;77ms&lt;/td&gt;
&lt;td&gt;-18.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NormalInstanceAttribute&lt;/td&gt;
&lt;td&gt;56ms&lt;/td&gt;
&lt;td&gt;24ms&lt;/td&gt;
&lt;td&gt;+129.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PythonFunctionCalls&lt;/td&gt;
&lt;td&gt;72ms&lt;/td&gt;
&lt;td&gt;34ms&lt;/td&gt;
&lt;td&gt;+116.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PythonMethodCalls&lt;/td&gt;
&lt;td&gt;84ms&lt;/td&gt;
&lt;td&gt;38ms&lt;/td&gt;
&lt;td&gt;+120.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recursion&lt;/td&gt;
&lt;td&gt;97ms&lt;/td&gt;
&lt;td&gt;56ms&lt;/td&gt;
&lt;td&gt;+73.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SecondImport&lt;/td&gt;
&lt;td&gt;61ms&lt;/td&gt;
&lt;td&gt;47ms&lt;/td&gt;
&lt;td&gt;+31.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SecondPackageImport&lt;/td&gt;
&lt;td&gt;66ms&lt;/td&gt;
&lt;td&gt;29ms&lt;/td&gt;
&lt;td&gt;+125.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SecondSubmoduleImport&lt;/td&gt;
&lt;td&gt;86ms&lt;/td&gt;
&lt;td&gt;32ms&lt;/td&gt;
&lt;td&gt;+172.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleComplexArithmetic&lt;/td&gt;
&lt;td&gt;74ms&lt;/td&gt;
&lt;td&gt;62ms&lt;/td&gt;
&lt;td&gt;+18.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleDictManipulation&lt;/td&gt;
&lt;td&gt;65ms&lt;/td&gt;
&lt;td&gt;35ms&lt;/td&gt;
&lt;td&gt;+89.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleFloatArithmetic&lt;/td&gt;
&lt;td&gt;77ms&lt;/td&gt;
&lt;td&gt;56ms&lt;/td&gt;
&lt;td&gt;+39.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleIntFloatArithmetic&lt;/td&gt;
&lt;td&gt;58ms&lt;/td&gt;
&lt;td&gt;39ms&lt;/td&gt;
&lt;td&gt;+48.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleIntegerArithmetic&lt;/td&gt;
&lt;td&gt;59ms&lt;/td&gt;
&lt;td&gt;37ms&lt;/td&gt;
&lt;td&gt;+57.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleListComprehensions&lt;/td&gt;
&lt;td&gt;75ms&lt;/td&gt;
&lt;td&gt;33ms&lt;/td&gt;
&lt;td&gt;+128.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleListManipulation&lt;/td&gt;
&lt;td&gt;57ms&lt;/td&gt;
&lt;td&gt;27ms&lt;/td&gt;
&lt;td&gt;+109.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SimpleLongArithmetic&lt;/td&gt;
&lt;td&gt;68ms&lt;/td&gt;
&lt;td&gt;57ms&lt;/td&gt;
&lt;td&gt;+19.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SmallLists&lt;/td&gt;
&lt;td&gt;69ms&lt;/td&gt;
&lt;td&gt;41ms&lt;/td&gt;
&lt;td&gt;+66.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SmallTuples&lt;/td&gt;
&lt;td&gt;66ms&lt;/td&gt;
&lt;td&gt;98ms&lt;/td&gt;
&lt;td&gt;-32.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SpecialClassAttribute&lt;/td&gt;
&lt;td&gt;63ms&lt;/td&gt;
&lt;td&gt;49ms&lt;/td&gt;
&lt;td&gt;+29.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SpecialInstanceAttribute&lt;/td&gt;
&lt;td&gt;130ms&lt;/td&gt;
&lt;td&gt;24ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+434.5%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringMappings&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;62ms&lt;/td&gt;
&lt;td&gt;+8.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringPredicates&lt;/td&gt;
&lt;td&gt;69ms&lt;/td&gt;
&lt;td&gt;59ms&lt;/td&gt;
&lt;td&gt;+16.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringSlicing&lt;/td&gt;
&lt;td&gt;73ms&lt;/td&gt;
&lt;td&gt;47ms&lt;/td&gt;
&lt;td&gt;+54.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TryExcept&lt;/td&gt;
&lt;td&gt;57ms&lt;/td&gt;
&lt;td&gt;0ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+3821207.1%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TryFinally&lt;/td&gt;
&lt;td&gt;65ms&lt;/td&gt;
&lt;td&gt;26ms&lt;/td&gt;
&lt;td&gt;+153.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TryRaiseExcept&lt;/td&gt;
&lt;td&gt;64ms&lt;/td&gt;
&lt;td&gt;610ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #ff0000;"&gt;-89.5%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TupleSlicing&lt;/td&gt;
&lt;td&gt;76ms&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;+12.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnicodeMappings&lt;/td&gt;
&lt;td&gt;88ms&lt;/td&gt;
&lt;td&gt;91ms&lt;/td&gt;
&lt;td&gt;-2.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnicodePredicates&lt;/td&gt;
&lt;td&gt;64ms&lt;/td&gt;
&lt;td&gt;59ms&lt;/td&gt;
&lt;td&gt;+8.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnicodeProperties&lt;/td&gt;
&lt;td&gt;69ms&lt;/td&gt;
&lt;td&gt;63ms&lt;/td&gt;
&lt;td&gt;+8.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnicodeSlicing&lt;/td&gt;
&lt;td&gt;80ms&lt;/td&gt;
&lt;td&gt;68ms&lt;/td&gt;
&lt;td&gt;+17.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithFinally&lt;/td&gt;
&lt;td&gt;84ms&lt;/td&gt;
&lt;td&gt;26ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #339966;"&gt;+221.2%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WithRaiseExcept&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;1178ms&lt;/td&gt;
&lt;td&gt;&lt;span style="color: #ff0000;"&gt;-94.3%&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-on-pybench---good-and-bad.html" rel="alternate"/>
    <summary>In case you wonder, [what Nuitka is](/pages/overview.html), look here.
Over the 0.3.x release cycle, I have mostly looked at its performance
with “pystone”. I merely wanted to have a target to look at and enjoy
the progress we have made there.</summary>
    <category term="benchmark" label="benchmark"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2011-04-16T11:52:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/the-new-cat.html</id>
    <title>The new cat</title>
    <updated>2011-07-31T12:49:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="the-new-cat"&gt;

&lt;p&gt;This is the latest addition to the family, our beautiful, young and
lovely cat:&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_3530-1.jpg"&gt;&lt;img alt="Image of Muska on her first day with us." src="_images/IMG_3530-1.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Muska on her first day with us.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Her name is Muska, and she is with us for a week now. This is an image
from her first day in our house.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/the-new-cat.html" rel="alternate"/>
    <summary>This is the latest addition to the family, our beautiful, young and
lovely cat:</summary>
    <category term="family" label="family"/>
    <published>2011-07-31T12:49:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-has-a-new-home---nuitkanet.html</id>
    <title>Nuitka has a new home - nuitka.net</title>
    <updated>2011-08-16T18:21:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-has-a-new-home-nuitka-net"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;p&gt;my new vServer is now online, the old site blog redirects to it now, and
planets follow the new site already. The old site is redirecting with
301 error code for some more time, hopefully this will be good enough of
a migration. It felt smooth from here, clearly, and the new site is much
faster of course, because it’s not throttled through my poor DSL
upstream.&lt;/p&gt;
&lt;p&gt;I also registered it a domain name &lt;a class="reference external" href="https://nuitka.net"&gt;“nuitka.net”&lt;/a&gt;
for it finally. Originally I wanted to give it a DynDNS name, but I
already have 2, and the third was supposed to cost money, and I didn’t
feel like using another service, or cheating them if you consider that
an option, so that was it, I bought the domain name. Clearly it will
also be easier for people to remember.&lt;/p&gt;
&lt;p&gt;Moving things over was pretty painless. The Wordpress software has a
pretty good export feature, which only didn’t manage the custom menu and
appearance settings. But I guess it’s about content anyway, so probably
some way that would work too, but it was easy enough to reproduce that
by hand. I appreciate Wordpress even more now.&lt;/p&gt;
&lt;p&gt;Also I did some tuning of the system, to use less memory. Only 512M are
available, and so I run less Apache processes for less requests (memory
leaks), disabled IPv6 (yes, hate me for it), reduced amounts of gettys,
and so on. Nothing I am not familiar with, the ARM machine had 512M as
well, and to me no reason to use the bigger package just because of
that.&lt;/p&gt;
&lt;p&gt;The main difference is the faster CPU, I seem to get 3Ghz Intel now,
instead of my 1Ghz ARM, which together with faster internet speed, makes
the site extremely fast.&lt;/p&gt;
&lt;p&gt;Now U will dare to make the &lt;a class="reference external" href="/gitweb/?p=Nuitka.git;a=summary"&gt;gitweb interface&lt;/a&gt; public as well. The git repository
is already running there.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is obsolete information, we use Github for this now.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And I took the chance to sanitize the old posts somewhat. Changed the
links to not use the old domain name anymore, and correct some broken
ones too.&lt;/p&gt;
&lt;p&gt;Only downside is that I currently haven’t got the &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;“speedcenter”&lt;/a&gt; up and running again. After losing my
hardware, the old data cannot be compared with new one, and then it
doesn’t feel like a priority right now. I seem to be working instead on
XML based regression tests of the optimizer: The output of “–dump-xml”
should be compared for a large quantity of files, to discover
regressions of the optimizer as soon as possible, this will enable me to
make changes and not have to review the C++ as much, to find out if
something is compiled correctly. This way I should detect it when known
good cases degrade, and generally to demonstrate better, what actually
did improve.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PS: Oh, you people, who wonder, “but why are you not using
Google/github/gitorious?”, my counter question: “Did you read the
agreement?” I did. It basically says (from Google code):&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;13.&lt;/span&gt; &lt;span class="n"&gt;INDEMNITY&lt;/span&gt;

&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;agree&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="n"&gt;harmless&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;indemnify&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;subsidiaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;affiliates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;officers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;advertisers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;licensors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suppliers&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;partners&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collectively&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Google and Partners&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;and&lt;/span&gt; &lt;span class="n"&gt;against&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="n"&gt;party&lt;/span&gt; &lt;span class="n"&gt;claim&lt;/span&gt; &lt;span class="n"&gt;arising&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;related&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;violation&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Terms&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;liability&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;expense&lt;/span&gt; &lt;span class="n"&gt;arising&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;all&lt;/span&gt; &lt;span class="n"&gt;claims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;losses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;damages&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;consequential&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;suits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;judgments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;litigation&lt;/span&gt; &lt;span class="n"&gt;costs&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;attorneys&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; fees, of every kind and nature. In such a case, Google will provide you with written notice of such claim, suit or action.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;No thank you, instead I will run my own server, then I get to pay the
attorneys of my discretion - in the admittedly unlikely event that
somebody should sue me, because my Compiler violates some patent, or
whatever.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-has-a-new-home---nuitkanet.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2011-08-16T18:21:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/going-to-pycon-de.html</id>
    <title>Going to PyCon DE</title>
    <updated>2011-08-18T13:02:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="going-to-pycon-de"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;p&gt;I am going to the German Python conference in Leipzip and I am going to
have a &lt;a class="reference external" href="http://2011.de.pycon.org/2011/schedule/sessions/54/"&gt;presentation&lt;/a&gt; (link in German)
there.&lt;/p&gt;
&lt;p&gt;Of course it’s about Nuitka (see &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt; ) and I hope it will get a lot of attendance. I
am naturally very happy to have the opportunity to present it finally. I
had wanted to visit PyCon EU, but the date was never known, and then my
early booking holiday overlapped with it, so it was not an option.&lt;/p&gt;
&lt;p&gt;Now giving this presentation will of course be exciting to me. I gave
presentations as part of the day job many times, but this time it’s
obviously a different. It’s also a first chance to meet the others as I
never was at a Python conference before, and that will be interesting in
itself.&lt;/p&gt;
&lt;p&gt;Presenting Nuitka will of course be easy for me. Now I need to plan what
I want to be able to present for a demo. Running a big thing like
Mercurial would be nice, but I honestly don’t know, if that will even be
difficult, or if it will take a lot of work. Also the amount of
documentation available for Nuitka should increase as part of this.
Designs, etc. could be made into diagrams, so people who want to join
will have it easier.&lt;/p&gt;
&lt;p&gt;Lots of possibilities, and then there is only going to be one reality.
Lets hope it’s good. :-)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/going-to-pycon-de.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2011-08-18T13:02:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-git-flow.html</id>
    <title>Nuitka git-flow</title>
    <updated>2011-10-01T08:37:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-git-flow"&gt;

&lt;p&gt;Hello there,&lt;/p&gt;
&lt;p&gt;this is to let you know that I have switched &lt;a class="reference external" href="/pages/overview.html"&gt;Nuitka&lt;/a&gt; to the &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;“git flow”&lt;/a&gt; development model. That means, now
there is a supported stable version, and a develop branch, together with
feature branches.&lt;/p&gt;
&lt;section id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="/_images/Nuitka-git-flow.png"&gt;&lt;img alt="Git flow example for Nuitka release 0.3.12" src="_images/Nuitka-git-flow.png" style="width: 60%;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Git flow example for Nuitka release 0.3.12&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;In case, you want and can improve the source (link since removed)
visually or otherwise, please go
ahead. I am using it for a presentation next week too, and would be
glad if you could make it more pretty. My artistic skills are not the
same as my programmer skills. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So there is now always at least these 2 branches:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Stable &lt;a class="reference external" href="https://nuitka.net/gitweb/?p=Nuitka.git;a=shortlog;h=refs/heads/master"&gt;(master branch)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unstable &lt;a class="reference external" href="https://nuitka.net/gitweb/?p=Nuitka.git;a=shortlog;h=refs/heads/develop"&gt;(develop branch)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and then there may be feature branches, like this one currently:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Feature branch &lt;a class="reference external" href="https://nuitka.net/gitweb/?p=Nuitka.git;a=shortlog;h=refs/heads/feature/minimize_CPython26_tests_diff"&gt;minimize_CPython26_tests_diff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These will only have certain life, until they are completed, then they
are merge into “develop” and become part of the next release. This may
or may not happen, depending on how things go.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benefits-of-the-new-model"&gt;
&lt;h2&gt;Benefits of the new model&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Hotfixes, typically bug fixes, can be made simultaneously on stable
and develop branch. The git-flow package takes care of the merging to
both.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because that’s so easy now, a stable version can be provided and
supported for a longer time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Features can be published while under development. My idea is that
feature branches should basically work, but the bar will be lower.
People can have a look at them, or start their own and make me
integrate them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="uses-of-feature-branch"&gt;
&lt;h2&gt;Uses of Feature Branch&lt;/h2&gt;
&lt;p&gt;For example, in the new feature branch, a couple of boring things are
happening. Support for frame stack will reduce the diff, as will some
work to match CPython’s choices for exception line numbers. Completing
will take a while, but should not block a release. So this is best done
in the feature branch, esp. as nothing is going to really depend on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="general-picture"&gt;
&lt;h2&gt;General Picture&lt;/h2&gt;
&lt;p&gt;As you can see from this diagram, I am working mostly on documentation
things. The new and improved README on develop, which is closer to a
User Manual in PDF form, and other organization things, may get a
release before the PyCon DE next week. The README also describes this
process.&lt;/p&gt;
&lt;p&gt;Hope is that with this approach, I will improve transparency (you can
see earlier what i am working on, because there is now a place where
things may break (develop) or may not yet be integrated or completed
fully (feature branches) and yet be public.&lt;/p&gt;
&lt;p&gt;The overhead appears to minimal thanks to “git-flow”. Developing
hotfixes is actually easier, when done on the stable branch, because
problems cannot originate from the current development work that may or
may not be all that perfect yet.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-git-flow.html" rel="alternate"/>
    <summary>Hello there,</summary>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2011-10-01T08:37:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/pycon-de-2011-my-report.html</id>
    <title>PyCON DE 2011 - My Report</title>
    <updated>2011-10-08T21:24:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="pycon-de-2011-my-report"&gt;

&lt;p&gt;The PyCON DE 2011 is just over, sprints are still happening over the
weekend, but my wife wouldn’t allow me to stay away for that long, so
it’s not for me this time. Maybe next time.&lt;/p&gt;
&lt;p&gt;Right now I feel very happy and excited that I went there. What a
&lt;strong&gt;great&lt;/strong&gt; experience this was.&lt;/p&gt;
&lt;p&gt;It was the first German PyCON and clearly it was overdue as it was now
the merger of many already grown up communities. A huge number of talks
over 3 days in 3 parallel tracks, with 3 keynotes, was an outstanding
program. And very well run. Strict time management, every detail was
well prepared.&lt;/p&gt;
&lt;p&gt;I can only admire the professional preparation and setup. I wanted to
say thank you deeply. I didn’t consider it possible to be this good.
Clearly not a first time.&lt;/p&gt;
&lt;p&gt;I enjoyed the talks, most often in the technical track, but other tracks
would have been very interesting too. The parallelism was making me do
hard decisions.&lt;/p&gt;
&lt;section id="food"&gt;
&lt;h2&gt;Food&lt;/h2&gt;
&lt;p&gt;The food was great too. I esp. liked the Asian day, but there was also
Italian and French, and what many liked very much is that there was a
Vegan food offer too. I do not live vegan style, but I appreciate good
food and the vegan food often is that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="social-event"&gt;
&lt;h2&gt;Social Event&lt;/h2&gt;
&lt;p&gt;The social event was a visit to a “Variete” (music hall, French origin),
where I am sure, there will be images posted, I currently &lt;a class="reference external" href="https://secure.flickr.com/photos/onyame/6222954609/in/pool-1775853&amp;#64;N21/"&gt;found this
one&lt;/a&gt;
, that my wife will find interesting too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="leipzig"&gt;
&lt;h2&gt;Leipzig&lt;/h2&gt;
&lt;p&gt;The quality of the organization team, the city “Leipzig”, where we also
got to have a guided city tour of fantastic enthusiasms, was very high.
I knew Leipzig from earlier visits and liked it before, but this time it
seemed everybody was even friendlier.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="site"&gt;
&lt;h2&gt;Site&lt;/h2&gt;
&lt;p&gt;The convention place “Kubus” was very well chosen, absolutely ideal.
It’s got good equipment, and that large room setup, where you can make a
split with movable walls, and have 3 big screens. The acoustics were
pretty damn good there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-own-presentation"&gt;
&lt;h2&gt;My own Presentation&lt;/h2&gt;
&lt;p&gt;As to my own presentation, it was well received, although I sort of
regret that I agreed to have only 30m instead of original plan of 60m. I
had so much to say.&lt;/p&gt;
&lt;p&gt;I ended up with getting my manifesto part out, but that one pretty well.
And it’s OK I guess, because nobody really listens that long anyway. And
my major points came across that way.&lt;/p&gt;
&lt;p&gt;That focus on my Nuitka “manifesto” was probably a good idea. The talk
will be available online as a video, I will link it then. The &lt;a class="reference external" href="/pr/Nuitka-Presentation-PyCON-DE-2011.pdf"&gt;PDF that
I presented only a small part of&lt;/a&gt;, is linked here. I believe
it went pretty well.&lt;/p&gt;
&lt;p&gt;I will use that content from the PDF in updated documentation (currently
ongoing in PDF is work to use REST and document a lot more). The
presentation was created with “rst2pdf”, which I find is a fantastic
tool.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="contacts"&gt;
&lt;h2&gt;Contacts&lt;/h2&gt;
&lt;section id="cython-lxml"&gt;
&lt;h3&gt;Cython / lxml&lt;/h3&gt;
&lt;p&gt;Then contacts!&lt;/p&gt;
&lt;p&gt;Early on I already made contacts with interesting people, e.g. with
Dr.Stefan Behnel, author of lxml and core Cython developer. I him
offered a beer for using his software in the best of Free Software
traditions. He doesn’t drink these, but a large mango juice counts too
or so I assume.&lt;/p&gt;
&lt;p&gt;We also talked about Cython and Nuitka, and the common history we had as
well. For some time, I attempted to change Cython, but that failed to
get the developers support at the time. Not wanting to deviate from
PyRex clearly isn’t the state anymore, but that was then.&lt;/p&gt;
&lt;p&gt;We also had a evening session of showing each other the good and bad
parts, comparing was quite fun. And it was quite interesting to the both
of us. I believe we made friends and will only benefit another.&lt;/p&gt;
&lt;p&gt;We discussed my goals, and I think we came to the conclusion that they
are in fact different enough from Cythons. Although I go away with the
sense, that of course Stefan believes, it would be better if I joined
Cython. Naturally.&lt;/p&gt;
&lt;p&gt;But that’s not going to happen. I think i have a cleaner and better
implementation now, closer to my goals with a realistic chance to
succeed. To me it would be a step back to fix language parsing issues
and incompatibilities of Cython, with the danger that my goals will not
be shared.&lt;/p&gt;
&lt;p&gt;As an example of these things, I would mention function call errors,
where e.g. Cython gives different and sometimes worse error messages
than CPython, and I designed the code so that it does things in that
same order than CPython does.&lt;/p&gt;
&lt;p&gt;It do not want to give different error messages, and who knows, somebody
may check for the exception text and expect CPython output. In this
case, I will rather accept a worse performance, than an incompatibility.&lt;/p&gt;
&lt;p&gt;Eliminating function parameter parsing for the whole program as far as
possible is going to be more worthwhile anyway.&lt;/p&gt;
&lt;p&gt;But in my mind, Cython is something I can and do recommend. For as long
as I am not able to declare Nuitka “useful” yet. That statement may come
within a year though. In my mind, in many fields Nuitka is already
superior.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyhasse"&gt;
&lt;h3&gt;PyHasse&lt;/h3&gt;
&lt;p&gt;Another interesting contact I made, was with the author of PyHasse. It’s
Rainer Bruggemann, who is a really nice and witty guy. He introduced me
to how he applies graph theory to multi-parameter optimization problems.&lt;/p&gt;
&lt;p&gt;We agreed that we will try and work together on this project. Hopefully
it will come to pass. One thing I personally wanted, was to get into
contact with people who understand or are part of the scientific
community.&lt;/p&gt;
&lt;p&gt;I can see what NumPy is. But I may never know myself what it really is,
unless I find proxies, and make these kind of contacts. The same thing
is true of Django, or e.g. Mercurial. I am positive though that with
time, and such conferences, my knowledge of these will only grow.&lt;/p&gt;
&lt;p&gt;We said that we will try and see how far we can go. In the worst case,
Nuitka will not yet be useful, but I will have a clearer image what is
needed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="debian"&gt;
&lt;h3&gt;Debian&lt;/h3&gt;
&lt;p&gt;I saw the presentation from Jan Dittberner and met him later too, asking
him questions, and generally discussing Debian packaging of Nuitka. He
encouraged me to contact the Debian Python Team, and so I will.&lt;/p&gt;
&lt;p&gt;I used the chance to make contact with a Debian guy, who made a
presentation on how to package Python modules for Debian. He gave me
hints on how to solve that “find files near me” issue that plagues
Nuitka just as much as other software. Really kind and helpful guy and
clearly I admire Debian Developers, keep up the good work.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="general"&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;p&gt;I also made contacts with lots of other people. Python is diverse and it
was fun to get to know, many people with similar and entirely different
backgrounds.&lt;/p&gt;
&lt;p&gt;The mood was extremely constructive. Nuitka was well received, but
that’s not why I say it. There is that general sense of respect around
that German community, you can feel how pretty much everybody is well
established and doesn’t have to disprove the others.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="keynotes"&gt;
&lt;h2&gt;Keynotes&lt;/h2&gt;
&lt;p&gt;One keynotes speaker had a part about how trolling and hate is bad for a
community, but that’s not the German Python community.&lt;/p&gt;
&lt;p&gt;Another keynote speaker (Paul Everitt) had a part about how Zope, which
was kind of his project, failed in many ways. He seemed to be quite
disappointed about that, which triggered me to point out, that he should
start his story with Apache, and not see the “failure to integrate” as a
failure.&lt;/p&gt;
&lt;p&gt;If there had not been Apache failing, there wouldn’t have been Zope, and
then not Django, etc. that’s kind of normal and actually good. He agreed
and pointed out how Apache was created from another project that had
failed to integrate people.&lt;/p&gt;
&lt;p&gt;You either fork a projects code, or ideas. The fork still should credit
and appreciate the predecessor/origin.&lt;/p&gt;
&lt;p&gt;In my mind, Cython failed to integrate me. Which triggered me to come up
with Nuitka, and as I will point out over time (there ought to be
postings and there probably will be), some better approaches.&lt;/p&gt;
&lt;p&gt;So not integrating me is not necessarily a failure. If it were not for
Cython, there would not be Nuitka. The original projects will regret the
fork/remake, but they probably shouldn’t. Competition is good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lets-repeat-that"&gt;
&lt;h2&gt;Lets repeat that&lt;/h2&gt;
&lt;p&gt;I believe the PyCON DE 2011 was a huge success. I will most likely go
again to update people on Nuitka. It’s already clear there will be a
PyCON DE 2012 I understand. And I am aiming for a slot at PyCON EU 2012
next year too. I wanted to go in 2011, but need to not put it in my
early booked holiday again.&lt;/p&gt;
&lt;p&gt;But you know what Murphy says about that.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/pycon-de-2011-my-report.html" rel="alternate"/>
    <summary>The PyCON DE 2011 is just over, sprints are still happening over the
weekend, but my wife wouldn’t allow me to stay away for that long, so
it’s not for me this time. Maybe next time.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="conference" label="conference"/>
    <published>2011-10-08T21:24:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/my-7yr-old-fotographer.html</id>
    <title>My 7yr old fotographer</title>
    <updated>2011-10-18T17:24:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="my-7yr-old-fotographer"&gt;

&lt;p&gt;This photo was shot by my 7yr old son. It’s truly artful, if not
perfect. I have not applied any correction. He has my old camera, and
knows how to use it, more and more.&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="/_images/Michael-shot-of-his-mom.jpg"&gt;&lt;img alt="Artful photo of his mom taken by my son Michael" src="_images/Michael-shot-of-his-mom.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Michael shot of his mom&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/my-7yr-old-fotographer.html" rel="alternate"/>
    <summary>This photo was shot by my 7yr old son. It’s truly artful, if not
perfect. I have not applied any correction. He has my old camera, and
knows how to use it, more and more.</summary>
    <category term="family" label="family"/>
    <published>2011-10-18T17:24:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/cat-update.html</id>
    <title>Cat update</title>
    <updated>2011-10-18T17:36:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="cat-update"&gt;

&lt;p&gt;The new cat has become indispensable for just about anything. She
follows throughout the hous, and is just too lovely, here two photos of
her in typical spots.&lt;/p&gt;
&lt;p&gt;When I code for Nuitka, she often lays between keyboard and monitors,
sleeping, getting caressed by me.&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_3837-768x1024.jpg"&gt;&lt;img alt="Cat Muska laying in her usual place between monitor and keyboard." src="_images/IMG_3837-768x1024.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;And here is another one, hiding in her cat tree.&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_3767.jpg"&gt;&lt;img alt="Cat muska in her cat tree box." src="_images/IMG_3767.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/cat-update.html" rel="alternate"/>
    <summary>The new cat has become indispensable for just about anything. She
follows throughout the hous, and is just too lovely, here two photos of
her in typical spots.</summary>
    <category term="family" label="family"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2011-10-18T17:36:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka---pycon-de-video.html</id>
    <title>Nuitka - PyCON DE Video</title>
    <updated>2011-10-22T06:39:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-pycon-de-video"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;p&gt;the Video of my presentation is online:
&lt;a class="reference external" href="https://pyvideo.org/pycon-de-2011/nuitka-der-python-compiler.html"&gt;https://pyvideo.org/pycon-de-2011/nuitka-der-python-compiler.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leaving it to Mike Müller to announce here the links to everything, when
it’s all finished. Thanks for the good work, the video was very well
done.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;The video is also available via Youtube.&lt;/p&gt;
&lt;div class="video_wrapper" style=""&gt;
&lt;iframe allowfullscreen="true" src="https://www.youtube.com/embed/EYByCjptbhY" style="border: 0; height: 430px; width: 600px"&gt;
&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka---pycon-de-video.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="compiler" label="compiler"/>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="presentation" label="presentation"/>
    <category term="video" label="video"/>
    <published>2011-10-22T06:39:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/puting-a-conference-t-shirt-to-good-use.html</id>
    <title>Putting a conference T-shirt to good use</title>
    <updated>2011-11-01T09:11:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="putting-a-conference-t-shirt-to-good-use"&gt;

&lt;p&gt;This is my 7rd old son in his “Halloween” outfit. It is the first time,
he was allowed to do it and so he was very excited.&lt;/p&gt;
&lt;p&gt;The link to Python is the T-shirt “Don’t Panic - Use Python”. I got that
from PyCON DE, and the family loves it.&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_0072-765x1024.jpg"&gt;&lt;img alt="Michael wears Python T-shirt for Halloween." src="_images/IMG_0072-765x1024.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Michael in his Halloween outfit.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/puting-a-conference-t-shirt-to-good-use.html" rel="alternate"/>
    <summary>This is my 7rd old son in his “Halloween” outfit. It is the first time,
he was allowed to do it and so he was very excited.</summary>
    <category term="family" label="family"/>
    <category term="Python" label="Python"/>
    <published>2011-11-01T09:11:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-debian-package-and-windows-installer.html</id>
    <title>Nuitka Debian Package and Windows Installer</title>
    <updated>2011-11-13T22:20:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-debian-package-and-windows-installer"&gt;

&lt;p&gt;There is now a Windows installer and a Debian package of &lt;a class="reference external" href="/pages/overview.html"&gt;Nuitka&lt;/a&gt; available on the &lt;a class="reference external" href="/pages/download.html"&gt;Download&lt;/a&gt; page. Please try it out and give me feedback.&lt;/p&gt;
&lt;p&gt;Specifically I do know that the Debian package won’t work on Debian
Squeeze, but only on Debian Wheezy (Testing) maybe it does on Ubuntu as
well, please report. If you have anything to criticize about the
package, let me know. There is no apt source now, I hope to get it into
Debian proper directly.&lt;/p&gt;
&lt;p&gt;UPDATE: After Stani’s report that Ubuntu has an older Scons, I lowered
the dependency and updated the package on the page. It may now work on
Ubuntu as well.&lt;/p&gt;
&lt;p&gt;And then, the Windows installer still requires you to install MinGW and
add it to your path, but it’s clearly a huge step ahead. It’s created
with distutils, and that works very well. If you have the skills to
enhance it, so e.g. the PATH variable is changed, or it will launch a
MinGW install if not present, contact me and help.&lt;/p&gt;
&lt;p&gt;UPDATE: And the idea that I got while writing a reply to “swong” is also
now implemented. The new Nuitka on Windows simply guesses the PATH to
MinGW to be the default path &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C:\MinGW&lt;/span&gt;&lt;/code&gt; or at least &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\MinGW&lt;/span&gt;&lt;/code&gt; and
from there, it ought to just run after you installed it. Of course you
can still set your own PATH environment and make the pick yourself.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-debian-package-and-windows-installer.html" rel="alternate"/>
    <summary>There is now a Windows installer and a Debian package of Nuitka available on the Download page. Please try it out and give me feedback.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2011-11-13T22:20:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/static-site-generator.html</id>
    <title>Static Site Generator</title>
    <updated>2012-01-26T07:32:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="static-site-generator"&gt;

&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;somehow triggered by reading about Mynth, and the re-post of the last
release announcement on my feed, just because I added a missing category
to the post, I am wondering what it takes to achieve the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Edit the pages site as ReST (reStructured text) document with
links inside&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit posts as single ReST files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have it look decent and provide feeds, proper caching headers,
etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate a static site from with, with more control over what kind
of updates makes it into the feed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I am currently very annoyed, because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I would normally generate code examples now with “rst2html” and
replace the existing Wordpress plugin that renders in JavaScript.
Except I cannot without re-posting all these articles, or removing
the “python” tag from them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The documentation of Nuitka is in ReST and I even intend to expand
it with UML diagrams generated from text. Making the cross to HTML
content is difficult.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some pages only replicate content from the User or Developer
Manual, keeping those updated, in sync, etc. is a dull thing to
do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending Wordpress in Python is not feasible. And in php, I doubt
I want to master.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Other stuff in favor of it, is that Wordpress or any CMS needs more
memory and more time to process than static pages of course. I can’t
right now let anyone fork and edit the pages in a practical manner. So
while for User Manual and Developer Manual of Nuitka I will get
corrections, for the website it’s not happening.&lt;/p&gt;
&lt;p&gt;Is Mynth an appropriate intermediate step? Do I really want to learn one
of these strange templating languages or even consider software that has
no Debian package. I never considered “virtualenv” and “pip” much of
options to run software on a website. I guess I am more tied to Debian
than to Python still.&lt;/p&gt;
&lt;p&gt;Over the last months I have occasionally looked at Pyramids, but it
seems overly complex, if all you want is to simplify the authoring. I
have seen that e.g. Trac supports ReST as an exception, but that feels
too little for a hefty software like that.&lt;/p&gt;
&lt;p&gt;I may end up with using ReST to generate HTML which is then uploaded via
XMLRPC to Wordpress. Won’t give me the “static” benefits. Won’t solve
the post update problem. But at least will let me edit more easily.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/static-site-generator.html" rel="alternate"/>
    <summary>Hello,</summary>
    <category term="Python" label="Python"/>
    <published>2012-01-26T07:32:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/ubuntu-packages-for-nuitka.html</id>
    <title>Ubuntu Packages for Nuitka</title>
    <updated>2012-01-31T08:25:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="ubuntu-packages-for-nuitka"&gt;

&lt;p&gt;Hello there,&lt;/p&gt;
&lt;p&gt;as I previously said, I will make these a separate announcement. Thanks
to the NeuroDebian project build infrastructure, there is Nuitka
packages for the Ubuntu versions back to Maverick, Natty, and Oneiric.&lt;/p&gt;
&lt;p&gt;Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt; for
clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;p&gt;You may use the apt sources to track Nuitka or download the packages
from the page where I offer the &lt;a class="reference external" href="/pages/download.html"&gt;latest version here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: In fact, it’s 0.3.19.1 now, which includes a hotfix release made
after 0.3.19. The same is in Debian Unstable right now, waiting to
propagate into Debian Testing, where there is still 0.3.18 living at
this time.&lt;/p&gt;
&lt;p&gt;I would appreciate feedback on these.&lt;/p&gt;
&lt;p&gt;Thanks in advance, Kay&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/ubuntu-packages-for-nuitka.html" rel="alternate"/>
    <summary>Hello there,</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2012-01-31T08:25:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/award-winning-cat.html</id>
    <title>Award winning cat</title>
    <updated>2012-02-20T12:51:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="award-winning-cat"&gt;

&lt;figure class="align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/Katze_Medaille.jpg"&gt;&lt;img alt="Image of cat Muska with a medaille." src="_images/Katze_Medaille.jpg" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;The sweetness phase is over. At least in that instant. :-)&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/award-winning-cat.html" rel="alternate"/>
    <summary>The sweetness phase is over. At least in that instant. :-)</summary>
    <category term="family" label="family"/>
    <published>2012-02-20T12:51:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nikola-for-nuitka.html</id>
    <title>Nikola for nuitka.net</title>
    <updated>2012-05-26T13:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nikola-for-nuitka-net"&gt;

&lt;p&gt;Some time ago, I &lt;a class="reference external" href="/posts/static-site-generator.html"&gt;asked about static site generators&lt;/a&gt; and tried a few, but nothing was
as ReST friendly as I would like to. To me, ReST is to text publishing,
what Python is to programming.&lt;/p&gt;
&lt;p&gt;Well, the search has found a late hit. I had installed a work flow,
where I was using the XMLRPC interface, but it was some effort, and
somewhat limited.&lt;/p&gt;
&lt;p&gt;Then &lt;a class="reference external" href="http://ralsina.com.ar"&gt;Roberto Alsina&lt;/a&gt; announced &lt;a class="reference external" href="http://nikola.ralsina.com.ar"&gt;Nikola&lt;/a&gt; that was just what I wanted.&lt;/p&gt;
&lt;p&gt;I did migrate to it during the last days. Looking at the content in ReST
form, was a big ease, and I already found a bit of obsolete content, and
updated it. And the last release announcements, they now render somewhat
prettier.&lt;/p&gt;
&lt;p&gt;I am not using all the features yet, notable not using the image
galleries yet, and the download page is not yet generated again, and so
on. But this is a good base.&lt;/p&gt;
&lt;p&gt;And while I loved it, this was the result:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;wordpress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nikola-for-nuitka.html" rel="alternate"/>
    <summary>Some time ago, I asked about static site generators and tried a few, but nothing was
as ReST friendly as I would like to. To me, ReST is to text publishing,
what Python is to programming.</summary>
    <category term="Python" label="Python"/>
    <category term="Nikola" label="Nikola"/>
    <published>2012-05-26T13:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nikola-speed-improvements.html</id>
    <title>Nikola Speed Improvements</title>
    <updated>2012-06-12T13:15:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nikola-speed-improvements"&gt;

&lt;p&gt;At end the end of May, I switched my website from a W3 Total Cache
enhanced wordpress installation to static generated with Nikola, and
this is what Google Webmaster tool says about it.&lt;/p&gt;
&lt;img alt="_images/nikola-speed-improvements.png" src="_images/nikola-speed-improvements.png" /&gt;
&lt;p&gt;The numbers are average time to download pages in milliseconds.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nikola-speed-improvements.html" rel="alternate"/>
    <summary>At end the end of May, I switched my website from a W3 Total Cache
enhanced wordpress installation to static generated with Nikola, and
this is what Google Webmaster tool says about it.</summary>
    <category term="Python" label="Python"/>
    <category term="Nikola" label="Nikola"/>
    <published>2012-06-12T13:15:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/speedcenter-is-back.html</id>
    <title>Nuitka Speedcenter is back</title>
    <updated>2012-06-30T16:39:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-speedcenter-is-back"&gt;

&lt;p&gt;Once a long time ago, I was benchmarking Nuitka more often. Check &lt;a class="reference external" href="/pages/overview.html"&gt;“What
is Nuitka?”&lt;/a&gt; in case you don’t know what it
is.&lt;/p&gt;
&lt;section id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;And I was considering the use of codespeed, and had some data online.
But ultimately, it got discontinued. This has 3 reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Moved the website to a dedicated machine, which broke the previous
install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controlling which data is used for display was hard and not
satisfactory.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;For example, I didn’t want to have to commit and push, just to let
the benchmarks run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And I wanted to be able to re-run benchmarks with newer compiler,
even newer Python, but old Nuitka. Using g++ 4.6 over g++ 4.5
should not impact the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It turned out to be a nightmare to migrate to newer codespeed
versions. I found myself starting from empty database - over and
over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many things were not supported.&lt;/p&gt;
&lt;p&gt;For example, I would want to collect all PyBench results, but only
publish those who are expressive. That seemed difficult to
achieve.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Benchmarks of Nuitka are not yet useful&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka was not yet doing type inference&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most of the work was aimed at correctness, and effectively was
often degrading performance even if only temporary. Seeing it
wouldn’t have been too motivating.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;I have simply created a small wrapper:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Small script to run benchmarks and collect data.&lt;/p&gt;
&lt;p&gt;It checks out Nuitka in all versions in a playground, and then runs
defined benchmarks, with valgrind, etc. taking exe sizes, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data is stored in local sqlite databases.&lt;/p&gt;
&lt;p&gt;I have a database per machine, i.e. a distributed repository, where I
collect information. That works for me, and will allow me to compare
different kinds of machines.&lt;/p&gt;
&lt;p&gt;The advantage is that I have no risk of data loss anymore, and no
issues and difficulty with poor interfaces to replace existing data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data is merged on one machine, and then pushed.&lt;/p&gt;
&lt;p&gt;That allows me to inspect the changes before publishing them. It
allows me to play with local commits, branches, with information that
will go away. I can then push when I choose to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That integrates better with my work flow. It allows me to retro-fit
benchmarks results on the machine and to be tool independent.&lt;/p&gt;
&lt;p&gt;In principle, I could publish the data in other forms as well, and I
likely will. Making tables of e.g. PyBench results seems like one
application. Recently, I have worked with Nikola, and could also imagine
to integrate Codespeed graph functionality (which is apparently all I
want) to there.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/speedcenter-is-back.html" rel="alternate"/>
    <summary>Once a long time ago, I was benchmarking Nuitka more often. Check “What
is Nuitka?” in case you don’t know what it
is.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Nikola" label="Nikola"/>
    <category term="Python" label="Python"/>
    <category term="benchmark" label="benchmark"/>
    <published>2012-06-30T16:39:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-and-debian-changes.html</id>
    <title>Nuitka and Debian changes</title>
    <updated>2012-07-05T14:52:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-and-debian-changes"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;p&gt;this is just a quick note to Nuitka users that are Debian users. For
Debian, the freeze has arrived. This is a time of great joy for me. I
love Debian so deeply, I believe I am now for at least 10 years on it,
of 15 years on Linux.&lt;/p&gt;
&lt;p&gt;As you may know, Nuitka has been in Debian for some time now. In
discussion with my great sponsor Yaroslav Halchenko, we needed to
consider if Nuitka is ready to be maintained in Debian Stable.&lt;/p&gt;
&lt;p&gt;And for that I have to admit, it is just not ready. You will be able to
download packages from the &lt;a class="reference external" href="/pages/download.html"&gt;Downloads&lt;/a&gt; and
install them. They will still be in Debian Unstable, but they won’t be
in Debian Testing and the next Debian Stable.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-and-debian-changes.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="Debian" label="Debian"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2012-07-05T14:52:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-assert-quiz.html</id>
    <title>Python Assert Quiz</title>
    <updated>2012-07-15T17:07:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="python-assert-quiz"&gt;

&lt;p&gt;At Europython conference, in my presentation, I talked about
re-formulations of Python into simpler Python. It is my intention to
turn this into a series of Python quiz questions that you will hopefully
enjoy.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Due to comments feedback, I made it more clear that “-O” affects of
course both cases, and due to work on getting the recent CPython2.7
test suite to work, I noticed, how the re-formulation for Quiz
Question 2 needed a version dependent solution.&lt;/p&gt;
&lt;p&gt;And I thought this one was easy. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;section id="quiz-question-1"&gt;
&lt;h2&gt;Quiz Question 1&lt;/h2&gt;
&lt;p&gt;Say you have the following code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;How can you achieve the same thing, without using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt;
statement at all. The behavior is required to be absolutely the same.&lt;/p&gt;
&lt;p&gt;The answer is in the next paragraph, so stop reading if you want to find
out yourself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution-1"&gt;
&lt;h2&gt;Solution 1&lt;/h2&gt;
&lt;p&gt;The correct answer is that assertions are the same as a raise exception
in a conditional statement.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The thing where this makes a difference, is “-O”, which will discard
assertions, but I consider it rarely used. To be really compatible with
that, it should be:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__debug__&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="quiz-question-2"&gt;
&lt;h2&gt;Quiz Question 2&lt;/h2&gt;
&lt;p&gt;But wait, there is slightly more to it. Say you have the following code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;How can you achieve the same thing, without using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt;
statement at all. The behavior is required to be absolutely the same.&lt;/p&gt;
&lt;p&gt;The answer is in the next paragraph, so stop reading if you want to find
out yourself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution-2"&gt;
&lt;h2&gt;Solution 2&lt;/h2&gt;
&lt;p&gt;This is actually version dependent, due to recent optimizations of
CPython.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For version 2.6 it is as follows:&lt;/p&gt;
&lt;p&gt;The extra value to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt;, simply becomes an extra value to
raise, which indicates, delayed creation of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AssertionError&lt;/span&gt;&lt;/code&gt;
exception.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For version 2.7 and higher it is as follows:&lt;/p&gt;
&lt;p&gt;The extra value to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt;, simply becomes the argument to
creating the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AssertionError&lt;/span&gt;&lt;/code&gt; exception.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, even in the more complex case, you end up with a conditional
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;raise&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only thing where this makes a difference, is “-O”, which will
discard assertions, but I consider it rarely used. To be really
compatible with that, it should be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__debug__&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Surprised? Well, yes, there really is nothing to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt; statements.
I am using this for my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler Nuitka&lt;/a&gt;
which benefits from having not to deal with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt; as anything
special at all. See also the &lt;a class="reference external" href="/doc/developer-manual.html#the-assert-statement"&gt;respective section in the Developer Manual&lt;/a&gt; which explains this
and other things.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-assert-quiz.html" rel="alternate"/>
    <summary>At Europython conference, in my presentation, I talked about
re-formulations of Python into simpler Python. It is my intention to
turn this into a series of Python quiz questions that you will hopefully
enjoy.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="quiz" label="quiz"/>
    <published>2012-07-15T17:07:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-3-wonders-barry-bdfl.html</id>
    <title>Python 3 wonders - Barry BDFL</title>
    <updated>2012-07-23T06:56:41+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="python-3-wonders-barry-bdfl"&gt;

&lt;p&gt;While writing &lt;a class="reference external" href="/pages/overview.html"&gt;Nuitka&lt;/a&gt; I get to see an absurd
amount of CPython code. For a while now, it’s also CPython3.2 that I
look at. Checking out &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__future__&lt;/span&gt;&lt;/code&gt; handling, I was surprised the other
day though, this really works:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python 3.2.3 (default, Jun 25 2012, 23:10:56)&lt;/span&gt;
&lt;span class="c1"&gt;# [GCC 4.7.1] on linux2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;barry_as_FLUFL&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s new in CPython3, and this the code that makes it possible, from the
Python parser:&lt;/p&gt;
&lt;div class="highlight-c++ notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NOTEQUAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p_flags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CO_FUTURE_BARRY_AS_BDFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;PyObject_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;err_ret&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E_SYNTAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p_flags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CO_FUTURE_BARRY_AS_BDFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;PyObject_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;err_ret&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;with Barry as BDFL, use &amp;#39;&amp;lt;&amp;gt;&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;instead of &amp;#39;!=&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;err_ret&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E_SYNTAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now who would think bad of that, would you? The fun aspect is, that
Nuitka will easily supports it. By re-using the Python parser, it works
out of the box, I only needed to add the flag value.&lt;/p&gt;
&lt;p&gt;For fun, I tried to add a test that confirms - and then notice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It doesn’t really work for CPython3.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The flag is only used for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eval&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; and not on the
same level, so it’s only inherited.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And “2to3” kindly removes that flag silently. It probably should
raise an error.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;So yeah, oddities in Python3!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-3-wonders-barry-bdfl.html" rel="alternate"/>
    <summary>While writing Nuitka I get to see an absurd
amount of CPython code. For a while now, it’s also CPython3.2 that I
look at. Checking out __future__ handling, I was surprised the other
day though, this really works:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2012-07-23T06:56:41+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-3-wonders-breaking-str.html</id>
    <title>Python 3 wonders - Breaking str</title>
    <updated>2012-08-15T21:42:28+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="python-3-wonders-breaking-str"&gt;

&lt;p&gt;That just killed some hope inside of me, breaking code that uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;
ought to be forbidden.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Turns out, this only a bug, and not intentional. And the bug is only
in the doc string, so it’s being fixed, and there is no inconsistency
then any more.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python 3:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.2.3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jun&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.7.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Python 2:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7.3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.7.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;nice&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;representation&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I do understand that it’s in fact just the old &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; built-in. In
fact, I made it work like that for Nuitka just now. But there is a
difference, for Python2, it was well behaved.&lt;/p&gt;
&lt;p&gt;Python 2:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
&lt;span class="go"&gt;unicode(string [, encoding[, errors]]) -&amp;gt; object&lt;/span&gt;

&lt;span class="go"&gt;Create a new Unicode object from the given encoded string.&lt;/span&gt;
&lt;span class="go"&gt;encoding defaults to the current default string encoding.&lt;/span&gt;
&lt;span class="go"&gt;errors can be &amp;#39;strict&amp;#39;, &amp;#39;replace&amp;#39; or &amp;#39;ignore&amp;#39; and defaults to &amp;#39;strict&amp;#39;.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;u&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Is Python3 supposed to be more clean or what? I think it is not
happening.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-3-wonders-breaking-str.html" rel="alternate"/>
    <summary>That just killed some hope inside of me, breaking code that uses str
ought to be forbidden.</summary>
    <category term="Python" label="Python"/>
    <published>2012-08-15T21:42:28+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/letting-go-of-c11.html</id>
    <title>Letting go of C++11</title>
    <updated>2012-10-27T08:59:07+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;p&gt;How Nuitka came to use C++11 and then stop it.&lt;/p&gt;
&lt;section id="letting-go-of-c-11"&gt;

&lt;p&gt;This post is about Nuitka the Python compiler started out using C++0x
which is now C++11, and then chose to stop it.&lt;/p&gt;
&lt;section id="in-the-beginning"&gt;
&lt;h2&gt;In the Beginning&lt;/h2&gt;
&lt;p&gt;Very early on, when I considered how to generate code from the node
tree, in a way, that mistakes should practically be impossible to make,
I made the fundamental decision, that every Python expression, which
produces temporary variables, should become an expression in the
generated code too.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;That is my choice, I think it keeps code generation more simple, and
easier to understand. There may come a separate post about how that
played out.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That decision meant some trouble. Certain things were not easy, but
generally, it was achievable for g++ relatively quickly, and then lots
of helper functions would be needed. Think of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MAKE_TUPLE&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MAKE_DICT&lt;/span&gt;&lt;/code&gt;, but also other stuff needed that. Calling a Python
built-in with variable number of parameters e.g. could be implemented
that way easily.&lt;/p&gt;
&lt;p&gt;Other nice things were &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;enum&lt;/span&gt;&lt;/code&gt; classes, and generally good stuff. It
was really quick to get Nuitka code generation off the ground this way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reality-strikes"&gt;
&lt;h2&gt;Reality Strikes&lt;/h2&gt;
&lt;p&gt;But then, as time went on, I found that the order of evaluation was
becoming an issue. It became apparent that for more and more things, I
needed to reverse it, so it works. Porting to ARM, it then became clear,
that it needs to be the other way around for that platform. And checking
out clang, which is also a C++11 compiler, I noticed, this one yet uses
a different one.&lt;/p&gt;
&lt;p&gt;So, for normal functions, I found a solution that involves the
pre-processor to reverse or not, &lt;em&gt;both&lt;/em&gt; function definition and call
sites, and then it is already correct.&lt;/p&gt;
&lt;p&gt;This of course, doesn’t work for C++11 variadic functions. So, there
came a point, where I had to realize, that each of its uses was more or
less causing evaluation order bugs. So that most of their uses were
already removed. And so I basically knew they couldn’t stay that way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-features"&gt;
&lt;h2&gt;Other Features&lt;/h2&gt;
&lt;p&gt;Also, things I initially assumed, e.g. that lambda functions of C++11
may prove useful, or even “auto”, didn’t turn out to be true. There
seemingly is a wealth of new features, besides variadic templates that I
didn’t see how Nuitka would benefit from it at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="new-wishes"&gt;
&lt;h2&gt;New Wishes&lt;/h2&gt;
&lt;p&gt;Then, at Europython, I realized, that Android is still stuck with
g++-4.4 and as such, that an important target platform will be
unavailable to me. This platform will become even more important, as I
intend to buy an device now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="biting-it"&gt;
&lt;h2&gt;Biting it&lt;/h2&gt;
&lt;p&gt;So what I did, was to remove all variadic functions and instead generate
code for them as necessary. I just need to trace the used argument
counts, and then provide those, simple enough.&lt;/p&gt;
&lt;p&gt;Also, other things like deleted copy constructors, and so on, I had to
give up on these a bit.&lt;/p&gt;
&lt;p&gt;This change was probably suited to remove subtle evaluation order
problems, although I don’t recall seeing them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-present"&gt;
&lt;h2&gt;The Present&lt;/h2&gt;
&lt;p&gt;The current stable release still requires C++11, but the next release
will work on g++-4.4 and compiles fine with MSVC from Visual Studio
2008, although at this time, there is still the issue of generators not
working yet, but I believe that ought to be solvable.&lt;/p&gt;
&lt;p&gt;The new requirement is only C++03, which means, there is a good chance
that supporting Android will become feasible. I know there is interest
from App developers, because there, even the relatively unimportant 2x
speedup, that Nuitka might give for some code, may matter.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that is a detour, I have taken, expanding the base of Nuitka even
further. I felt, this was important enough to write down the history
part of it.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/letting-go-of-c11.html" rel="alternate"/>
    <summary>How Nuitka came to use C++11 and then stop it.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Windows" label="Windows"/>
    <category term="Android" label="Android"/>
    <published>2012-10-27T08:59:07+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/static-compilation-that-is-the-point.html</id>
    <title>Static Compilation - That is the point</title>
    <updated>2012-12-02T12:23:32+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="static-compilation-that-is-the-point"&gt;

&lt;p&gt;In a recent post, Stefan Behnel questioned the point of static
compilation and suggests that in order to be useful, a static compiler
&lt;strong&gt;needs&lt;/strong&gt; to add something on top.&lt;/p&gt;
&lt;p&gt;This is going to be a rebuttal.&lt;/p&gt;
&lt;section id="compatibility-i-mean-it"&gt;
&lt;h2&gt;Compatibility, I mean it&lt;/h2&gt;
&lt;p&gt;First of all, let me start out, by saying that Nuitka is intended to be
the fully optimizing compiler of Python. The optimizing part is not yet
true. Right now, it’s probably a correct compiler of Python. Correct in
the sense that it’s compatible to CPython as far as possible.&lt;/p&gt;
&lt;p&gt;As examples of what I mean with compatibility:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka will hold references to local variables of frames, when an
exception is raised, and will release them only once the next
exception is raised.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nuitka will give the same error messages for all kinds of errors. For
example, the parameter parsing of functions will be the same.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nuitka provides all language constructs no matter how absurd or
unused they are.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="compatibility-slower"&gt;
&lt;h2&gt;Compatibility != Slower&lt;/h2&gt;
&lt;p&gt;While generally Nuitka will have a hard time to be faster &lt;em&gt;and&lt;/em&gt;
compatible to CPython, I don’t have much concern about that. Using
guards between optimistic, and less optimistic variants of code, there
is no doubt in my head, that for programs, lots of code will only need
very minimal type annotation and still receive respectable speedups.&lt;/p&gt;
&lt;p&gt;Of course, at this point, this is only speculation. But I somehow gather
that the sentiment is that incompatible and fast &lt;em&gt;need&lt;/em&gt; to go along. I
totally dispute that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="language-extensions"&gt;
&lt;h2&gt;Language Extensions&lt;/h2&gt;
&lt;p&gt;Now, the “in addition” stuff, that Stefan is talking about. I don’t see
the point at all. It is quite obvious that everything you can say with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cdef&lt;/span&gt;&lt;/code&gt; syntax, could also be said with a more Pythonic syntax. And if
it were missing, it could be added. And where it’s a semantic change, it
should be frowned upon.&lt;/p&gt;
&lt;p&gt;For the Nuitka project, I never considered an own parser of Python. No
matter how easy it would be, to roll your own, and I understand that
Cython did that, it’s always going to be wrong and it’s work. Work that
has no point. The CPython implementation exhibits and maintains the
module &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; that works just fine.&lt;/p&gt;
&lt;p&gt;For Python, if this were so really useful, such language extensions
should be added to Python itself. If there were missing meaningful
things, I contend they would best be added there, not in a fork of it.
Note how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ctypes&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cffi&lt;/span&gt;&lt;/code&gt; &lt;strong&gt;have&lt;/strong&gt; been added. When I created
bindings for Ada code (C exports) to Python, it was so easy to do that
in pure Python with ctypes. I so much enjoyed that.&lt;/p&gt;
&lt;p&gt;So, slow bindings are in my view really easy to create with plain Python
now. Somebody ought to make a “.h” to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ctypes&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cffi&lt;/span&gt;&lt;/code&gt; declarations
converter, once they are really faster to use (possibly due to Nuitka).
For Nuitka it should be possible to accelerate these into direct calls
and accesses. At which point, mixing generated C code and C include
statements, will just be what it is, a source of bugs that Nuitka won’t
have.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Further down, I will give examples of why I think that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cdef&lt;/span&gt;&lt;/code&gt; is
inferior to plain Python, even from a practical point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="lack-of-interpreter-is-bad"&gt;
&lt;h2&gt;Lack of Interpreter is bad&lt;/h2&gt;
&lt;p&gt;Static compilation vs. interpretation as a discussion has little merits
to me. I find it totally obvious that you don’t need static compilation,
but 2 other things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You may need interpretation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And may need speed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To me static code analysis and compilation are means to achieve that
speed, but not intended to remove interpretation, e.g. plugins need to
still work, no matter how deep the go.&lt;/p&gt;
&lt;p&gt;For Cython syntax there is no interpreter, is there? That makes it loose
an important point. So it has to have another reason for using it, and
that would be speed and probably convenience. Now suppose Nuitka takes
over with these benefits, what would it be left with? Right. Nothing. At
all. Well, of course legacy users.&lt;/p&gt;
&lt;p&gt;The orinal sin fall of PyRex - that is now Cython - is nothing that
Nuitka should repeat.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="no-lock-in"&gt;
&lt;h2&gt;No Lock-in&lt;/h2&gt;
&lt;p&gt;The Cython language is so underspecified, I doubt anybody could make a
compatible implementation. Should you choose to use it, you will become
locked in. That means, if Cython breaks or won’t work to begin with, you
are stuck.&lt;/p&gt;
&lt;p&gt;That situation I totally despise. It seems an unnecessary risk to take.
Not only, if your program does not work, you can’t just try another
compiler. You also will never really know, if it’s either your fault or
Cython’s fault until you do know, whose fault it is. Find yourself
playing with removing, adding, or re-phrasing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cdef&lt;/span&gt;&lt;/code&gt; statements, until
things work.&lt;/p&gt;
&lt;p&gt;Common. I would rather use PyPy or anything else, that can be checked
with CPython. Should I ever encounter a bug with it, I can try CPython,
and narrow down with it. Or I can try Jython, IronPython, or low and
behold, Nuitka.&lt;/p&gt;
&lt;p&gt;I think, this totally makes it obvious, that static compilation of a
non-Python language has no point to people with Python code.&lt;/p&gt;
&lt;p&gt;What I will always admit, is that Cython is (currently) the best way to
create fast bindings, because Nuitka is not ready yet. But from my point
of view, Cython has no point long term if a viable replacement that is
Pythonic exists.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-alone-is-a-point"&gt;
&lt;h2&gt;Python alone is a point&lt;/h2&gt;
&lt;p&gt;So, if you leave out static compilation vs. interpretation and JIT
compilation, what would be the difference between PyPy and Nuitka? Well,
obviously PyPy people are a lot cooler and cleverer. Their design is
really inspiring and impressive. My design and whole approach to Nuitka
is totally boring in comparison.&lt;/p&gt;
&lt;p&gt;But from a practical standpoint, is there any difference? What is the
difference between Jython and PyPy? The target VM it is. PyPy’s or
Java’s. And performance it is, of course.&lt;/p&gt;
&lt;p&gt;So, with Python implementations all being similar, and just differing in
targets, and performances, do they all have no point? I believe taken to
the logical conclusion, that is what Stefan suggests. I of course think
that PyPy, Nuitka, and Jython have have as much of a point, as CPython
does.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="type-annotations-done-right"&gt;
&lt;h2&gt;Type Annotations done right&lt;/h2&gt;
&lt;p&gt;And just for fun. This is making up a use cases of type annotations:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;python_version&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;


&lt;span class="nd"&gt;@hints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;plong&lt;/span&gt;&lt;/code&gt; depends on an expression, that may become known
during compile time or not. Should that turn out to be not possible,
Nuitka can always generate code for both branches and branch when
called.&lt;/p&gt;
&lt;p&gt;Or more complex and useful like this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;guess_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;emit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unknown type &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;many_hints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Won&amp;#39;t raise exception.&lt;/span&gt;
    &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doesnot_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Signature to be inferred by conventions&lt;/span&gt;
    &lt;span class="n"&gt;guess_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# No side effects&lt;/span&gt;
    &lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@many_hints&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;


&lt;span class="nd"&gt;@many_hints&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="nd"&gt;@many_hints&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is just a rough sketch, but hopefully you get the idea. Do this
with Cython, can you?&lt;/p&gt;
&lt;p&gt;The hints can be put into decorators, which may be discovered as
inlinable, which then see more inlines. For this to work best, the loop
over the compile time constant code object, needs to be unrolled, but
that appears quite possible.&lt;/p&gt;
&lt;p&gt;The signatures can therefore be done fully automatic. One could use
prefix notation to indicate types.&lt;/p&gt;
&lt;p&gt;Another way would put fixed types for certain variable names. In Nuitka
code, “node”, “code”, “context”, etc. have always the same types. I
suspect many programs are the same, and it would be sweet, if you could
plug something in and check such types throughout all of the package.&lt;/p&gt;
&lt;p&gt;And then, what do you do then? Well, you can inspect these hints at run
time as well, they work with CPython as well (though they won’t make
things faster, only will that find errors in your program), they will
even work with PyPy, or at least not harm it. It will nicely JIT them
away I suppose.&lt;/p&gt;
&lt;p&gt;Your IDE will like the code. syntax highlighting, auto indent will work.
With every Python IDE. PyLint will find the bugs I made in that code up
there. And Nuitka will compile it and benefit from the hints.&lt;/p&gt;
&lt;p&gt;My point here really is, that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cdef&lt;/span&gt;&lt;/code&gt; is not flexible, not standard,
not portable. It should die. It totally is anti-Pythonic to me.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="elsewhere"&gt;
&lt;h2&gt;Elsewhere&lt;/h2&gt;
&lt;p&gt;In Java land, people compile to machine code as well. They probably also
- like stupid me - didn’t understand that static compilation would have
no point. Why do they do it? Why am I using compiled binaries done with
their compiler then?&lt;/p&gt;
&lt;p&gt;And why didn’t they take the chance to introduce ubercool &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cdef&lt;/span&gt;&lt;/code&gt;
a-likes while doing it? They probably just didn’t know better, did they?&lt;/p&gt;
&lt;p&gt;No seriously. A compiler is just a compiler. It takes a source code in a
language and turns it into a package to execute. That may be a required
or an optional step. I prefer optional for development turn around. It
should try and make code execute as fast as it can. But it should not
change the language. With Cython I have to compile. With Nuitka I could.&lt;/p&gt;
&lt;p&gt;In fact, I would be hard pressed to find another example of a compiler
that extends the interpreted language compiled, just so there is a point
in having it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Nuitka has a point. On top of that I enjoy doing it. It’s great to have
the time to do this thing in the correct way.&lt;/p&gt;
&lt;p&gt;So far, things worked out pretty well. My earlier experimentations with
type inference had shown some promise. The “value friends” thing, and
the whole plan, appears relatively sound, but likely is in need of an
update. I will work on it in december. Up to now, and even right now I
worked on re-formulations, that should have made it possible to get more
release ready effects from this.&lt;/p&gt;
&lt;p&gt;When I say correct way, I mean this. When I noticed that type inference
was harder than it should be, I could take the time and re-architecture
things so that it will be simpler. To me that is fun. This being my
spare time allows me to do things this efficiently. That’s not an
excuse, it’s a fact that explains my approach. It doesn’t mean it makes
less sense, not at all.&lt;/p&gt;
&lt;p&gt;As for language compatibility, there is more progress with Python3. I am
currently changing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;class&lt;/span&gt;&lt;/code&gt; re-formulations for Python2 and Python3
(they need totally different ones due to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;metaclass&lt;/span&gt;&lt;/code&gt; changes) and then
“test_desc.py” should pass with it too, which will be a huge achievement
in that domain. I will do a post on that later.&lt;/p&gt;
&lt;p&gt;Then infrastructure, should complete the valgrind based benchmark
automatism. Numbers will become more important from now on. It starts to
make sense to observe them. This is not entirely as fun. But with
improving numbers, it will be good to show off.&lt;/p&gt;
&lt;p&gt;And of course, I am going to document some more. The testing strategy of
Nuitka is worth a look, because it’s totally different from everything
else people normally do.&lt;/p&gt;
&lt;p&gt;Anyway. I am not a big fan of controversy. I respect Cython for all it
achieved. I do want to go where it fails to achieve. I should not have
to justify that, it’s actually quite obvious, isn’t it?&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/static-compilation-that-is-the-point.html" rel="alternate"/>
    <summary>In a recent post, Stefan Behnel questioned the point of static
compilation and suggests that in order to be useful, a static compiler
needs to add something on top.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2012-12-02T12:23:32+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-3-nuitka-support-is-upcoming.html</id>
    <title>Python3 support by Nuitka is upcoming</title>
    <updated>2013-02-09T08:38:37+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="python3-support-by-nuitka-is-upcoming"&gt;

&lt;p&gt;This is kind of semi-interesting news for you Python3 lovers. My
&lt;a class="reference external" href="/pages/overview.html"&gt;“Python compiler Nuitka”&lt;/a&gt; has been supporting
the language somewhat, but in the next release it’s going to be
&lt;em&gt;complete&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Support for annotations, unicode variable names, keyword only arguments,
starred assignments, exception chaining plus causes, and full support
for new meta classes all have been added. So Python3.2 is covered now
too and passing the test suite on about the same level as with Python2.6
and Python2.7 already.&lt;/p&gt;
&lt;p&gt;I readied this while working on optimization, which is also seeing some
progress, that I will report on another day. Plus it’s &lt;a class="reference external" href="http://pypi.python.org/pypi/Nuitka/"&gt;“available now
on PyPI”&lt;/a&gt; too. At the time of
this writing, there is pre-releases there, but after next release, there
will only stable releases published.&lt;/p&gt;
&lt;p&gt;My quick take on the Python3 that I saw:&lt;/p&gt;
&lt;section id="keyword-only-arguments"&gt;
&lt;h2&gt;Keyword Only Arguments&lt;/h2&gt;
&lt;p&gt;Now seriously. I didn’t miss that. And I am going to hate the extra
effort it causes to implement argument parsing. And when I looked into
default handling, I was just shocked:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;some_arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_key_arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What would you expect the evaluation order to be for defaults? I raised
a CPython &lt;a class="reference external" href="http://bugs.python.org/issue16967"&gt;“bug report”&lt;/a&gt; about it.
And I am kind of shocked this could be wrong.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="annotations"&gt;
&lt;h2&gt;Annotations&lt;/h2&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_int&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_long&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That looks pretty promising. I had known about that already, and I
guess, whatever “hints” idea, we come up with Nuitka, it should at least
allow this notation. Unfortunately, evaluation order of annotations is
not that great either. I would expected them to come first, but they
come last. Coming last, they kind of come too late to accept do anything
with defaults.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="unicode-variables"&gt;
&lt;h2&gt;Unicode Variables&lt;/h2&gt;
&lt;p&gt;Now great. While it’s one step closer to “you can’t re-enter any
identifier without copy&amp;amp;paste”, it is also a whole lot more consistent,
if you come e.g. from German or French and need only a few extra
letters. And there has to be at least one advantage to making everything
unicode, right?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="exception-chaining"&gt;
&lt;h2&gt;Exception Chaining&lt;/h2&gt;
&lt;p&gt;Gotta love that. Exception handlers are often subject to bit rot. They
will themselves contain errors, when they are actually used, hiding the
important thing that happened. No more. That’s great.&lt;/p&gt;
&lt;p&gt;The exception causes on the other hand, might be useful, but I didn’t
see them a lot yet. That’s probably because they are too new.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="starred-assigns"&gt;
&lt;h2&gt;Starred Assigns&lt;/h2&gt;
&lt;p&gt;I was wondering already, why that didn’t work before.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="metaclass-prepare"&gt;
&lt;h2&gt;Metaclass __prepare__&lt;/h2&gt;
&lt;p&gt;That’s great stuff. Wish somebody had thought about meta classes that
way from the outset.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nonlocal"&gt;
&lt;h2&gt;nonlocal&lt;/h2&gt;
&lt;p&gt;Yeah, big stuff. I love it. Also being able to write closure variables
is great for consistency.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Nothing ground breaking. Nothing that makes me give up on Python2.7 yet,
but a bunch of surprises. And for Nuitka, this also found bugs and
corner cases, where things were not yet properly tested. The Python3
test suite, inspired the finding of some obscure compatibility problems
for sure.&lt;/p&gt;
&lt;p&gt;Overall, it’s possible to think of Python2 and Python3 as still the same
language with only minor semantic differences. These can then be dealt
with re-formulations into the simpler Python that Nuitka optimization
deals with internally.&lt;/p&gt;
&lt;p&gt;I for my part, am still missing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt; statement. But well, now
Python3 finds them when I accidentally check them in. So that’s kind of
a feature for as long as I develop in Python2.6/2.7 language.&lt;/p&gt;
&lt;p&gt;Now if one of you would help out with Python3.3, that would be great. It
would be about the new dictionary implementation mostly. And maybe
finding a proper re-formulation for “yield from” too.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-3-nuitka-support-is-upcoming.html" rel="alternate"/>
    <summary>This is kind of semi-interesting news for you Python3 lovers. My
“Python compiler Nuitka” has been supporting
the language somewhat, but in the next release it’s going to be
complete.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2013-02-09T08:38:37+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/pystone-comparison-nuitka-cython-and-cpython.html</id>
    <title>PyStone Comparison Nuitka, Cython, and CPython</title>
    <updated>2013-03-04T08:57:10+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="pystone-comparison-nuitka-cython-and-cpython"&gt;

&lt;p&gt;As you all know, Nuitka (see &lt;a class="reference external" href="/pages/overview.html"&gt;“what is Nuitka?”&lt;/a&gt;
) has recently completed a milestone. Always short on time, I am not
doing a whole lot of benchmarking yet, and focus on development. But
here is an interesting submission from Dave Kierans (CTO of &lt;a class="reference external" href="http://ipowow.com"&gt;iPowow! Ltd&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~  python pystone.py 1000000
Pystone(1.1) time for 1000000 passes = 10.2972
This machine benchmarks at 97113.5 pystones/second
➜  ~  cython --embed pystone.py;gcc pystone.c -I/usr/include/python2.6 -L /usr/lib/ -lpython2.6 -o ./pystone.cython;./pystone.cython 1000000
Pystone(1.1) time for 1000000 passes = 8.20789
This machine benchmarks at 121834 pystones/second
➜  ~  nuitka-python pystone.py 1000000
Pystone(1.1) time for 1000000 passes = 4.06196
This machine benchmarks at 246187 pystones/second
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is nice result for Nuitka, even if we all &lt;em&gt;know&lt;/em&gt; that pystone is
not a really good benchmark at all, and that its results definitely do
not translate to other software. It definitely makes me feel good. With
the 0.4.x series kicked off, it will be exciting to see, where these
numbers can indeed go, once Nuitka actually applies standard compiler
techniques.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/pystone-comparison-nuitka-cython-and-cpython.html" rel="alternate"/>
    <summary>As you all know, Nuitka (see “what is Nuitka?”
) has recently completed a milestone. Always short on time, I am not
doing a whole lot of benchmarking yet, and focus on development. But
here is an interesting submission from Dave Kierans (CTO of iPowow! Ltd):</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2013-03-04T08:57:10+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-rpms-rhel-centos-f17-f18-opensuse.html</id>
    <title>Nuitka RPMs (RHEL, CentOS, F17, F18, openSUSE)</title>
    <updated>2013-03-16T18:44:45+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-rpms-rhel-centos-f17-f18-opensuse"&gt;

&lt;p&gt;Thanks to a contribution, Nuitka now has a proper RPM spec file. And
using &lt;a class="reference external" href="https://build.opensuse.org/package/show/home:kayhayen/Nuitka"&gt;openSUSE Build Service&lt;/a&gt;, we
can now enjoy RPMs for all major distributions.&lt;/p&gt;
&lt;p&gt;Check out the revamped &lt;a class="reference external" href="/pages/download.html"&gt;download page&lt;/a&gt; as well.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;At the time of this writing, the “stable” Nuitka 0.4.1 link points to
a 0.4.2 pre-release. That is only until 0.4.2 final will be released.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Thanks for making this possible, very much appreciated.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-rpms-rhel-centos-f17-f18-opensuse.html" rel="alternate"/>
    <summary>Thanks to a contribution, Nuitka now has a proper RPM spec file. And
using openSUSE Build Service, we
can now enjoy RPMs for all major distributions.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2013-03-16T18:44:45+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/netbsd-support-upcoming.html</id>
    <title>NetBSD support upcoming</title>
    <updated>2013-04-06T12:58:37+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="netbsd-support-upcoming"&gt;

&lt;p&gt;My first real UNIX ever was a NetBSD. That was now about 22 years ago. I
am still sentimental about it. I had installed it last about 8 years
ago. And I still like it. Back in the days, it was the first UNIX to
encounter for me, running on Amiga hardware, first of a friend, then on
my own.&lt;/p&gt;
&lt;p&gt;Recently, there had been support for Nuitka on FreeBSD added. A lot of
people use it on the web, and some want to use Nuitka to improve their
Python performance, so this is kind of relevant.&lt;/p&gt;
&lt;p&gt;There were issues resolved, but in the end, something was with Clang on
FreeBSD 8, that I could for the life of it, not resolve remotely. So I
attempted to install it myself. Using “virt-install”, these things are a
breeze now. I had already done it with CentOS6 before to test the RPM
repositories of Nuitka. That “virt-install” is a wonderful thing by
itself, making virtualisation somewhat useful. It’s only a pity, that I
can’t just install other qemu support architectures. I would love to
checkout Nuitka on PowerPC.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you could check out Nuitka on other Linux architectures than
x86_64, x86, or arm, that would be great.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is the report of getting NetBSD supported. It was a quite an
interesting story that I would like to share with you.&lt;/p&gt;
&lt;p&gt;Naivly I was assuming, that it would be just for fun, and that Nuitka
will work right away. Little did I know.&lt;/p&gt;
&lt;p&gt;On FreeBSD 9 the minimal install medium was chosen, and entered its
ports collection, installed git, cloned Nuitka, and ran the tests,
successfully right away. Now that is unfair, in the Nuitka there were
tons of “Linuxism” already removed. In fact, it had to work, and on the
newest FreeBSD (version 9.1) and then it did. Great!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you would like to add Nuitka to FreeBSD’s ports, please do so. It
should be really easy now.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On NetBSD, things were unfortunately a little different. I also chose
minimal system. After going through “pkg source” boot strap and git
install, I cloned Nuitka, and then tried to start it. First off, it
couldn’t locate “python” at all. I am using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/bin/env&lt;/span&gt; &lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt;
already. But Python2 was on the system. I ended up creating the “python”
link myself. What I should have done according to “#netbsd” is to
install the software, and indeed, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python2.7&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; gives
an installation of Nuitka that is executable.&lt;/p&gt;
&lt;p&gt;Next up, you need to know about “Fibers” in Nuitka. These are used for C
co-routines, used to implement Python generators. They have an
interface, that is very close to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makecontext&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;swapcontext&lt;/span&gt;&lt;/code&gt;
routines in C.&lt;/p&gt;
&lt;p&gt;For ARM and x86_64 Linux we have optimized code, that switches faster,
but other platforms, including x86 Linux, use the generic
implementation, also because it normally is very fast already.&lt;/p&gt;
&lt;p&gt;Now you have to know that since 2001 the interface is deprecated and
shall not be used. And next up, is that on NetBSD, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makecontext&lt;/span&gt;&lt;/code&gt; gave
a segfault only. So I ran to “#netbsd” and asked.&lt;/p&gt;
&lt;p&gt;Now that was a very friendly experience. Of course, I had to give a
rationale for using an obsolete interface. It’s not quite obvious, why
threads wouldn’t be a better choice. And maybe they are, but they
definitely have more overhead associated, and if they never run at the
same time, why use them.&lt;/p&gt;
&lt;p&gt;Ultimately it helped to point out, that for a user of 22 years, an
interface that is only obsolete for 11 years, is not quite as horrifying
as for others.&lt;/p&gt;
&lt;p&gt;And they helped me through it. And it turns out, funny thing. For the
context to setup, you are allocating a stack to use for the C routine,
and you “get” the current context, then you make a new one. All the
examples have a certain order of doing it. And my code did it the other
way around. No system but NetBSD noticed.&lt;/p&gt;
&lt;p&gt;On FreeBSD and Linux, it didn’t matter. But it seems, that the needed
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;getcontext&lt;/span&gt;&lt;/code&gt; call was overwriting my stack pointer now with the
current stack. And &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makecontext&lt;/span&gt;&lt;/code&gt; deeply hated that, a lot. It was
preparing that stack to be used, while it was in usage. Doesn’t sound
like a good task to give to it, right? My fault truly, because every
example on every man page, on all systems, was doing it differently. But
then they were also all using arrays from the local stack, so quite
obviously that was not real code.&lt;/p&gt;
&lt;p&gt;So that was fixed, and all good? No! Next thing was it crashed when
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;free&lt;/span&gt;&lt;/code&gt; happened in Python on a compiled frame object, in a later part
of a test that heavily uses generators. Turns out, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt;
information was corrupted. I had to suspect the generic “Fiber” code,
but that took me a while to figure out.&lt;/p&gt;
&lt;p&gt;And how could my simple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;free&lt;/span&gt;&lt;/code&gt; do that, and make it
happen. When I knew that a context would not longer be used (the
generator has finished, the generator object deleted, etc), I would look
at the context handle stack pointer and free it.&lt;/p&gt;
&lt;p&gt;But that pointer changed. Something totally unexpected (by me
obviously), but it also explains the earlier problem. For all systems, I
had used so far, this pointer was not being changed, and remained the
same. So I could &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;free&lt;/span&gt;&lt;/code&gt; it from there. It worked fine, but not on
NetBSD. And it wasn’t correct anywhere.&lt;/p&gt;
&lt;p&gt;It seems NetBSD is doing something clever, since instead of saving the
stack pointer register in a separate area, it saves it to that place
originally specified. It’s quite obviously an improvement, in that you
save the pointer.&lt;/p&gt;
&lt;p&gt;It’s only bad, that now to make up for this savings, I have added the
pointer in a separate field, which won’t be changed, so I can free it
again. If one needs it again, and that’s not unlikely, you have to
remember it elsewhere. So maybe that idea is not that clever. But it
surely was wrong by me to assume that the provided value would not be
touched.&lt;/p&gt;
&lt;p&gt;So, these are 2 bugs it found. The wrong order of calls. And the usage
of a pointer, that may have been changed. This can only help with other
systems, or possibly architectures under Linux.&lt;/p&gt;
&lt;p&gt;While this is all description of nasty problems, it’s also the report of
the solution, and it was big fun. I would also like to compliment
“#netbsd” for being very helpful and friendly with my porting of Nuitka.
I highly enjoyed doing so. It was a lot of fun. I know that it’s
probably on a very tiny amount of people that uses both NetBSD and
Nuitka, but still.&lt;/p&gt;
&lt;p&gt;If this Nuitka project were about market share, it wouldn’t exist. And I
can work for market share on another day.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/netbsd-support-upcoming.html" rel="alternate"/>
    <summary>My first real UNIX ever was a NetBSD. That was now about 22 years ago. I
am still sentimental about it. I had installed it last about 8 years
ago. And I still like it. Back in the days, it was the first UNIX to
encounter for me, running on Amiga hardware, first of a friend, then on
my own.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2013-04-06T12:58:37+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/support-for-portable-standalone-programs.html</id>
    <title>Support for portable (standalone) programs</title>
    <updated>2013-04-07T13:52:44+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="support-for-portable-standalone-programs"&gt;

&lt;p&gt;This post is about a feature often requested, but so far not available
feature of Nuitka. Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;“What is Nuitka?”&lt;/a&gt; for clarification of what it is now and what it
wants to be.&lt;/p&gt;
&lt;p&gt;In forums, and in Google, people are looking at a Python compiler, also
as a way of deployment. It should offer what &lt;a class="reference external" href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; does, allow installation independent of
Python.&lt;/p&gt;
&lt;p&gt;Well, for a long time it didn’t. But thanks to recent contributions,
it’s upcoming for the next release, Nuitka 0.4.3, and it’s in the
current pre-releases.&lt;/p&gt;
&lt;p&gt;It works by adding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--portable&lt;/span&gt;&lt;/code&gt; to the command line. So this should
work for you:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nuitka-python --recurse-all --portable your-program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Right now, it will create a folder “_python” with DLLs, and
“_python.zip” with standard library modules used along to the
“your-program.exe”. Copy these to another machine, without a Python
installation, and it will (should) work. Making that statement fully
true may need refinements, as some DLL dependencies might not be defined
yet.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;We may improve it in the future to meld everything into one
executable for even easier deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You are more than welcome to experiment with it. To do so, download
Nuitka from the &lt;a class="reference external" href="/pages/download.html"&gt;download page&lt;/a&gt; and give it a
roll.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Of course, Nuitka is not about replacing “py2exe” primarily, it’s
only a side effect of what we do. Our major goal is of course to
accelerate Python, but surely nobody minds achieving the two things
at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And while the post is labeled “Windows”, this feature also works for
Linux at least too. It’s just that the lack of Python installations on
client systems is far more widespread on this platform.&lt;/p&gt;
&lt;p&gt;To me, as this is from a contributor, it’s another sign of Nuitka
gaining adoption for real usage. My personal “py2exe” experience is
practically not existing, I have never used it. And I will only merge
the improvements into the Nuitka project as provided by others. My focus
for the time to come is of course the compile time and run time
optimization.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/support-for-portable-standalone-programs.html" rel="alternate"/>
    <summary>This post is about a feature often requested, but so far not available
feature of Nuitka. Please see the page “What is Nuitka?” for clarification of what it is now and what it
wants to be.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <category term="Windows" label="Windows"/>
    <published>2013-04-07T13:52:44+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-needs-you-a-call-for-help.html</id>
    <title>Nuitka needs you - a call for help</title>
    <updated>2013-04-10T07:51:13+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-needs-you-a-call-for-help"&gt;

&lt;div class="admonition-update-3 admonition"&gt;
&lt;p class="admonition-title"&gt;Update 3&lt;/p&gt;
&lt;p&gt;And the first point has been done too, Python3.3 is now fully
supported, including &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition-update-2 admonition"&gt;
&lt;p class="admonition-title"&gt;Update 2&lt;/p&gt;
&lt;p&gt;The third point, Windows 64 support has been done as well. Turns out,
that I do in fact own only Win64 systems, and with MSVC support in
place, only a few portability fixes were needed.&lt;/p&gt;
&lt;p&gt;Help with the other point, “re-formulation of yield”, would still be
more than welcome, and no signs of progress there yet. So stop
thinking “you could”, enter telling people “you did” mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;The second point, Fibers implementation for Windows, has been done.
Thanks for the help you people provide. The next release will contain
it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;p&gt;the Python compiler Nuitka has come an ever longer way, and currently I
have quite a bunch of issues, that I believe could well need your help.
These are all issues of some important and significance, yet self
contained jobs that you may enjoy.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You can check the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt; for
clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 3.3 - reformulation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; needed.&lt;/p&gt;
&lt;p&gt;As you can see, covering all the CPython 2.6, 2.7, and 3.2 language
features is already something. Also CPython 3.3 is now working on a
basic level. Other projects are far, far away from that.&lt;/p&gt;
&lt;p&gt;Many language constructs, such as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; statement are
re-formulated into other constructs. This makes it possible to work
with a simple core for optimization, and to reduce the complexity a
lot. For the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; statement case, it’s changed to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;finally&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;except&lt;/span&gt;&lt;/code&gt; statements, together with
a few temporary variables. Check the Nuitka source of it:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nuitka.net/gitweb/?p=Nuitka.git;a=blob;f=nuitka/tree/ReformulationWithStatements.py;h=2a2d5821e5a511201454e5ae8a7c979d48f04c4a;hb=HEAD"&gt;ReformulationWithStatements.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also &lt;a class="reference external" href="/doc/developer-manual.html#language-conversions-to-make-things-simpler"&gt;descriptions of all these re-formulations in the
Developer Manual&lt;/a&gt;
so you can see how this is done.&lt;/p&gt;
&lt;p&gt;Now check &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0380/"&gt;PEP 380&lt;/a&gt; for
the details of it, and your task would be to come up with a
re-formulation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; statements to the semantically
equivalent.&lt;/p&gt;
&lt;p&gt;The benefit is, you are working on a totally self-contained level.
The re-formulation only needs to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; node information, and
turn that into Nuitka nodes. The problem will be fully solved this
way.&lt;/p&gt;
&lt;p&gt;And once we have this, we can pronounce CPython3.3 as fully
supported. So if you would like to see this happen, please join.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows - MSVC support needs low level code help&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;update&lt;/p&gt;
&lt;p&gt;This is now done.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The support for MSVC is already mostly there. If you execute the
environment setting script, and use Nuitka under Windows, it will
work. The only problem is that for the generator functions, Nuitka is
using a concept called “Fiber”, which is basically just switching C
stacks, so called co-routines.&lt;/p&gt;
&lt;p&gt;It works great for Linux and UNIX. For Windows, Fibers are currently
using threads, which wouldn’t be as much of a performance problem,
because they are very lightweight, it is slightly wasteful only.&lt;/p&gt;
&lt;p&gt;But, the bad thing, is with these threads switching and C++
exceptions used to represent Python exceptions, no combination of
MSVC options seems to carry the day and keep the exception in the
current thread. They are caught in the wrong thread, and make
generators misbehave, crash.&lt;/p&gt;
&lt;p&gt;This is the &lt;em&gt;only&lt;/em&gt; thing that holds back proper MSVC support at this
time, and it has been like this for a while. With MinGW, the issue
does not exist, but MinGW is a stranger to many, and MSVC will be
more efficient code generation, so we would like to have that.&lt;/p&gt;
&lt;p&gt;So what it takes is somebody familiar with Windows and its ABI, esp.
register usage to write code that swaps the registers around, so we
can have multiple C stacks without threads for it too. This may
involve messing around with exception jump back pointers as well.&lt;/p&gt;
&lt;p&gt;It needs somebody who can handle this and does it for Nuitka, and
then it would be well supported. It may involve writing some
assembler code. The job is also very well contained, but also
requires very specific knowledge, so please join me here. If you
think you can do this, do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows 64 bit&lt;/p&gt;
&lt;p&gt;I have no access to Win64. I bought many Windows versions, but not
the Win64 variants so far. I understand that there are CPython builds
for it, and probably a MinGW matching it, as well as a matching newer
MSVC, that may work better for C++ exceptions than the one CPython
2.x is tied to.&lt;/p&gt;
&lt;p&gt;Doing that, you would mostly only have to play around with
&lt;a class="reference external" href="https://nuitka.net/gitweb/?p=Nuitka.git;a=blob;f=nuitka/build/SingleExe.scons;h=f32dd2f61293ee6dca3b5b828b30769ea4d00902;hb=HEAD"&gt;SingleExe.scons&lt;/a&gt;,
which abstracts the details of it all. One issue you will encounter
is that Scons needs a Python2, and other small things. This is mostly
only about porting Nuitka, and could be done by anybody with access
to Win64 and willing to fiddle around a bit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So these are 3 different ways you can help Nuitka. Creating the Python
compiler is a huge effort. And if you help it, we will sooner arrive at
its goals. Join the Nuitka mailing list (since closed) or &lt;a class="reference external" href="mailto:kay&amp;#46;hayen&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;contact me&lt;/a&gt; directly if you choose to help with any
of these issues.&lt;/p&gt;
&lt;p&gt;Wait, actually there is another way you can help. Please spread this
news to people that you believe might be willing to help. And allow me
to plug this, I am doing Nuitka in my spare time. If you feel, you
cannot help, but still would like to support it, you can still &lt;a class="reference external" href="/pages/donations.html"&gt;make
donations&lt;/a&gt; to allow me to travel to conferences
and spend more time on it myself.&lt;/p&gt;
&lt;p&gt;Anyway, it would be great if these 3 things got sorted out. Come and
join me for this grand vision of the Python compiler.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-needs-you-a-call-for-help.html" rel="alternate"/>
    <summary>And the first point has been done too, Python3.3 is now fully
supported, including yield from syntax.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <published>2013-04-10T07:51:13+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/support-for-msvc-upcoming.html</id>
    <title>Support for MSVC upcoming</title>
    <updated>2013-04-10T20:30:11+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="support-for-msvc-upcoming"&gt;

&lt;p&gt;The good news are lately coming in high density, although I barely have
the opportunity to work on Nuitka. Check the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt; for clarification of what it is now and what it
wants to be.&lt;/p&gt;
&lt;p&gt;It seems my &lt;a class="reference external" href="nuitka-needs-you-a-call-for-help.html"&gt;recent call for help&lt;/a&gt; was at least partially
effective. One the major points has been addressed. In the next release,
Visual Studio 2008 and 2010 will both work for Nuitka, right now it’s
only in git develop branch.&lt;/p&gt;
&lt;p&gt;That is really nice, as it will make Nuitka on Windows a whole lot more
accessible. Combine that with &lt;a class="reference external" href="support-for-portable-standalone-programs.html"&gt;portable support&lt;/a&gt; and it’s up to solving
problems with distributing on Windows it seems.&lt;/p&gt;
&lt;p&gt;The other two things listed there have received no feedback yet. So if
you want to help with those, feel free to do so. Nuitka needs you.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/support-for-msvc-upcoming.html" rel="alternate"/>
    <summary>The good news are lately coming in high density, although I barely have
the opportunity to work on Nuitka. Check the page What is Nuitka? for clarification of what it is now and what it
wants to be.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Windows" label="Windows"/>
    <published>2013-04-10T20:30:11+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/going-to-europython-2013.html</id>
    <title>Going to Europython 2013</title>
    <updated>2013-04-16T09:58:34+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="going-to-europython-2013"&gt;

&lt;p&gt;I am going to the wonderful city of Florence, and &lt;a class="reference external" href="https://ep2013.europython.eu/"&gt;Europython 2013&lt;/a&gt; and make a presentation there. This
time, I am not introducing Nuitka anymore, I did that in 2012, this
time, I will try and dive into static optimization and try to convey the
message why I believe it is possible.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#going-to-europython-2013" id="id1"&gt;Going to Europython 2013&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#things-to-talk-about" id="id2"&gt;Things to talk about&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#status" id="id3"&gt;Status&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#last-years-questions" id="id4"&gt;Last years questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#builtins" id="id5"&gt;Builtins&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#debugger-pdb" id="id6"&gt;Debugger - pdb&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#threading" id="id7"&gt;Threading&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#c-to-python-gaps" id="id8"&gt;C++ to Python gaps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id9"&gt;Performance&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#demos" id="id10"&gt;Demos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future-work" id="id11"&gt;Future Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa" id="id12"&gt;SSA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compiled-modules" id="id13"&gt;Compiled Modules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compiled-locals" id="id14"&gt;Compiled Locals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#whole-program-analysis" id="id15"&gt;Whole Program Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#perspective" id="id16"&gt;Perspective&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id17"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#final-picture" id="id18"&gt;Final Picture&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#final-words" id="id19"&gt;Final Words&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="things-to-talk-about"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Things to talk about&lt;/a&gt;&lt;/h2&gt;
&lt;section id="status"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Status&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Only briefly this time, since I will be able to say that all current
Python versions are fully supported (&lt;a class="reference external" href="nuitka-needs-you-a-call-for-help.html"&gt;surely if you help me with
Python3.3 yield from&lt;/a&gt;), all
major platforms now. One important milestone has been reached meanwhile,
and work on far reaching compile time optimizations is happening. As
this should be quite obvious stuff, I am going to keep that short.&lt;/p&gt;
&lt;p&gt;What I would like to get done until then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Win64&lt;/p&gt;
&lt;p&gt;One remaining area of work to achieve Win64 support, which is almost
complete. I epxect one of the next releases to support it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Threading&lt;/p&gt;
&lt;p&gt;And of course there is threading, which was the one real major
weakness present last time, which appears only short of pronouncing
break-through. At least one user is using Nuitka with many threads
operationally already. I just have to re-activate the thread using
tests CPython that I disabled. Seems I only have to convince myself
of it too.&lt;/p&gt;
&lt;p&gt;Since it’s not totally a priority right now, one of the next releases
will support it, likely before the conference.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But as you see. Completion all around is there or at least in sight.
Kind of worked on this nearby.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="last-years-questions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Last years questions&lt;/a&gt;&lt;/h3&gt;
&lt;section id="builtins"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id5"&gt;Builtins&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For instance, writing to built-ins, what will/did happen.&lt;/p&gt;
&lt;p&gt;Changing builtins can be done in two ways. One is to set the value on
the module level, which is something that has always worked. The other
is writing to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;builtins&lt;/span&gt;&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;This is something that is OK for Nuitka in some cases (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__import__&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;open&lt;/span&gt;&lt;/code&gt; ) and handled by it at run time. And it’s not effective in
others (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;len&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Good news is that we got contributed a “compiled built-ins” code, where
we now will be able to see such writes. Now it’s only used to not check
every time for changes, but to know them (pull vs. push). But we will
also use it and trigger &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RuntimeError&lt;/span&gt;&lt;/code&gt; exceptions for things we cannot
handle when we only learn of it at run time.&lt;/p&gt;
&lt;p&gt;The other element to address is, it of course whole program analysis.
When Nuitka sees the write to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;builtins.str&lt;/span&gt;&lt;/code&gt;, it may very well
consider it. The distinction between initial and current builtin values,
and the optimization of it, that will be interesting to cover.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Currently Nuitka does nothing of this, but it will.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="debugger-pdb"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id6"&gt;Debugger - pdb&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The compiled binaries work the same as the normal Python code. So you
will be able to simply use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pdb&lt;/span&gt;&lt;/code&gt; on it instead.&lt;/p&gt;
&lt;p&gt;Interacting with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pdb&lt;/span&gt;&lt;/code&gt; is not &lt;em&gt;totally&lt;/em&gt; out of reach, but kind of
pointless mostly, unless you need to attach to long running operational
programs. For now that use case is not supported though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="threading"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id7"&gt;Threading&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I learned a whole lot about threading. Also thanks to the kind people of
Stackless Python, who explained things to me. I am still amazed at how
little I did know of these things, and still went so far. In my
industry, threads are considered not allowed, and I personally don’t
like them either, so my experience was non-existing.&lt;/p&gt;
&lt;p&gt;But in the mean time, I managed to come up with ideas that appear to
work, and if I implement the full design, it will even be more efficient
than anything.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="c-to-python-gaps"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;C++ to Python gaps&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I consider all of these more or less solved.&lt;/p&gt;
&lt;p&gt;Well maybe except recently arose issues with MSVC for “function calls”.
It appears that compiler highlights a weakness in one of my approaches.
Nuitka so far only changed the order of declaration and call arguments
around, which is kind of transparent.&lt;/p&gt;
&lt;p&gt;But MSVC actively takes liberty to calculate function arguments as it
sees fit. The fix for it, is now totally different and should be highly
portable and even compliant to C++.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Performance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are still slow exceptions. I would like to avoid raising C++
exceptions in the future, because they are so slow (Python exceptions
are much faster).&lt;/p&gt;
&lt;p&gt;And diagrams, I would like to have a whole lot more of these. Since I
dropped speedcenter, I am making actual progress there. I hope to have
enough to show at the conference, where the actual strength and weakness
currently is.&lt;/p&gt;
&lt;p&gt;Since I am getting closer to pronouncing Nuitka useful. I surely
believe, I need to answer the performance question in larger detail. And
of course, I need now a better idea, what impact measures have.&lt;/p&gt;
&lt;p&gt;But as this is a lot of work, I doubt that I will be all that perfect by
then, my goal is to have a comparison with Shedskin. No matter how
unfair it is (Shedskin does only a small subset of Python), it’s the
most useful comparison in my eyes, as where Shedskin makes static type
analysis, Nuitka also should do it, only hampered by guards at maximum.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="demos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Demos&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The talk with start out with demonstration of Nuitka, something simple
first, and then Mercurial as a more complex example, and then its test
suite.&lt;/p&gt;
&lt;p&gt;And I will show portable binaries. It seems to work quite nicely.
Generally I expect to start out with demos, and explain from there,
instead of having a demo only at the end.&lt;/p&gt;
&lt;p&gt;If it all works out, this time, they will be prepared with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;recordmydesktop&lt;/span&gt;&lt;/code&gt; so I can publish them separately too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-work"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Future Work&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generally the talk will be more directed at the future, although this is
kind of a dark area now. That’s its nature I guess.&lt;/p&gt;
&lt;section id="ssa"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id12"&gt;SSA&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The talk will also be largely built SSA (static single assignment) and
how it applies to Python. What everybody means, when they say “Python is
too dynamic (to be statically compiled)” is that Python values may
escape to unknown code that changes them very often.&lt;/p&gt;
&lt;p&gt;I will have to talk about that, and how get out of that trap, basically
guards, much like PyPy does it too. Escaped values and strange code are
only one option of things to occur. Having code for both cases, sounds
possible. I will talk about how to decide, which branches we shall have
and which not.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compiled-modules"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id13"&gt;Compiled Modules&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;And I believe with “compiled modules” potentially already in place, we
can achieve very cheap guards in most cases. I can at least explain, why
guards can be relatively cheap, where we need them.&lt;/p&gt;
&lt;p&gt;I am kind of bugged by that idea. It kind of means to revisit an older
milestone, but now an idea has surfaced, that I previously didn’t have,
and that I am very curious to learn the benefit of. Very quick &lt;em&gt;and&lt;/em&gt;
safe module variabls, are very tempting to have, and definitely make a
difference for the Nuitka design.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compiled-locals"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;Compiled Locals&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Who knows, we might even have a “compiled locals” as well, which as a
side effect, also allows total interactivity with the most absurd codes.
So far, each local variable is a C++ object, and as this is compiled,
and very fast.&lt;/p&gt;
&lt;p&gt;But the frame locals is not in sync with it. Were it a special object,
it could try and interact with these when control escapes to code that
we don’t know if it might use it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="whole-program-analysis"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id15"&gt;Whole Program Analysis&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Big words. Can Nuitka avoid module objects entirely. Can it inline
functions, specialize them according to the only types used (think
including &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os.path.dirname&lt;/span&gt;&lt;/code&gt; in the binary, but with the constraint
that it only need to work on string objects as input, because the
program is known to use it any different.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="perspective"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Perspective&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last time, I spent a lot of time on justification, “why a new project?”,
“why not work with the others?”, what goals do I have that others do
not. Giving examples of how code generation works. Generally to give
people an idea of the project.&lt;/p&gt;
&lt;p&gt;With this out of the way, I can now focus on inclusion, and success.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Funding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And, well yes, this time I may not have to pay for it all by myself.
Last time I spent close to 1000 Euros for the trip (ticket to enter,
hotel, flight, food), because I am &lt;a class="reference external" href="/pages/donations.html"&gt;accepting donations&lt;/a&gt; for this specific reason.&lt;/p&gt;
&lt;p&gt;For a strange reason, I devote substantial amounts of time to the
project, only to put it under the most liberal license. It’s probably
fair to allow people to &lt;a class="reference external" href="/pages/donations.html"&gt;make donations&lt;/a&gt; if
they feel they want to further the project, but don’t know how. Or if
they just consider it too important for me to loose interest. That kind
of feels unlikely though. Too much fun.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-picture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Final Picture&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And lets have an image I made during Europython 2012 in the city of
Florence. It shows what a vibrant place this town is.&lt;/p&gt;
&lt;img alt="_images/europython-2012-07-img6319.jpg" src="_images/europython-2012-07-img6319.jpg" /&gt;
&lt;p&gt;Florence is a place full of kind people. The mood not only of the
conference, but the whole city is very open minded and helpful. It was
very easy to get adopted by strangers to their party.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-words"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Final Words&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am looking forward to meeting the friends I made there last time, and
new friends. I kind of a great time there last time, one of these “times
of my life”. Even if the reception was not always as warm as I had
deserved. I remember laughing a lot, learning a lot. And making unique
experiences.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/going-to-europython-2013.html" rel="alternate"/>
    <summary>I am going to the wonderful city of Florence, and Europython 2013 and make a presentation there. This
time, I am not introducing Nuitka anymore, I did that in 2012, this
time, I will try and dive into static optimization and try to convey the
message why I believe it is possible.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <category term="europython" label="europython"/>
    <published>2013-04-16T09:58:34+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-on-github-bitbucket-and-gitorious.html</id>
    <title>Nuitka on Github, Bitbucket and Gitorious</title>
    <updated>2013-04-26T07:17:16+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-on-github-bitbucket-and-gitorious"&gt;

&lt;p&gt;This is to let you know, that I have &lt;em&gt;finally&lt;/em&gt; carved in and created
accounts on all those “social” platforms, that deal with code. So far I
had resisted their terms (you pay us when we get sued), but I have given
up on that stance, it’s likely irrelevant, as Nuitka won’t get sued, and
if it is, those are not the issues.&lt;/p&gt;
&lt;p&gt;And I don’t want to feel too old school it seems. And who knows, maybe
this helps Nuitka to get more contributions.&lt;/p&gt;
&lt;p&gt;So these are the landing pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bitbucket (since deleted)&lt;/p&gt;
&lt;p&gt;I kind of like the looks of it the most. Also it’s very popular for
Python people due to its Mercurial ties. I also liked that it
imported my Nuitka repository easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kayhayen/Nuitka"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is not being on Github allowed these days? Anyway, from ease of use,
the interface looks more powerful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gitorious (since discontinued)&lt;/p&gt;
&lt;p&gt;The interface and looks definitely are worst. But it’s Free Software,
and an open platform, so it has to be in the list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know what you think. I am going to push ‘develop’ at pre-release
and ‘master’ at release time, automatically from the release scripts
into all these. Hopefully that way, they turn out to be time savers no
wasters.&lt;/p&gt;
&lt;p&gt;And yes, I couldn’t decide on one. Since I fancy Free Software,
Gitorious probably would have won, but it would also miss the point of
expanding the reach. And for as long as I don’t use their issue tracking
or Wikis, it appears to be not necessary to make that decision.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The preferred for use, and most up to date repository will remain
&lt;a class="reference external" href="/pages/download.html"&gt;the one from Downloads&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So fork away, like it, and stuff. Awaiting your pull requests…&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-on-github-bitbucket-and-gitorious.html" rel="alternate"/>
    <summary>This is to let you know, that I have finally carved in and created
accounts on all those “social” platforms, that deal with code. So far I
had resisted their terms (you pay us when we get sued), but I have given
up on that stance, it’s likely irrelevant, as Nuitka won’t get sued, and
if it is, those are not the issues.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="git" label="git"/>
    <published>2013-04-26T07:17:16+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/changing-python-faq.html</id>
    <title>Changes in Python FAQ</title>
    <updated>2013-08-15T08:15:17+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="changes-in-python-faq"&gt;

&lt;p&gt;The Python FAQ changed a while ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Nuitka is an up-and-coming compiler of Python into C++ code, aiming
to support the full Python language.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/changing-python-faq.html" rel="alternate"/>
    <summary>The Python FAQ changed a while ago:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2013-08-15T08:15:17+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/my-europython-2013-report.html</id>
    <title>My Europython 2013 report</title>
    <updated>2013-08-15T08:15:17+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="my-europython-2013-report"&gt;

&lt;p&gt;Back from Europython 2013 in Florence for a while now. I had a
presentation about my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler Nuitka&lt;/a&gt;.
You can watch the Video on Youtube. I believe it’s absolutely worth your
time. I was not doing a lot of “why” at all now, only “what”, and demo
times, and answering questions:&lt;/p&gt;
&lt;div class="video_wrapper" style=""&gt;
&lt;iframe allowfullscreen="true" src="https://www.youtube.com/embed/BDjXZY_8d58" style="border: 0; height: 345px; width: 560px"&gt;
&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;The talk went really well. I believe one can clearly see that I felt
really good and at ease. The state presented is very good and progress -
there was a lot, so that was great. The &lt;a class="reference external" href="/pr/Nuitka-Presentation-PyCON-EU-2013.pdf"&gt;slides&lt;/a&gt; of the talk may also be
interesting.&lt;/p&gt;
&lt;p&gt;And it definitely raised a lot of interest.&lt;/p&gt;
&lt;p&gt;Last years talk is also there. You can (maybe) see that I was 20kg more
weight then, and also &lt;em&gt;much&lt;/em&gt; more excited, at least initially.
Background: I was surprised then that Guido van Rossum was attending the
talk, plus I was kind of not in the state of this year, the confidence
that people should believe, that things will work after that, was not
yet there. I knew it, but standing in front of a croud and saying, look
I am attempting what you consider impossible, or even have failed at, is
not easy:&lt;/p&gt;
&lt;div class="video_wrapper" style=""&gt;
&lt;iframe allowfullscreen="true" src="https://www.youtube.com/embed/ZDHkla5rllg" style="border: 0; height: 345px; width: 560px"&gt;
&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;There are also the &lt;a class="reference external" href="/pr/Nuitka-Presentation-PyCON-EU-2012.pdf"&gt;slides&lt;/a&gt; of that talk which may
also be interesting, but of course are outdated somewhat now.&lt;/p&gt;
&lt;section id="years-make-differences"&gt;
&lt;h2&gt;Years make differences&lt;/h2&gt;
&lt;p&gt;So yeah, the progress happened since 2012 made a difference. Nuitka has
proven things. Let’s see what this year does to it. I would hope for
real type inference optimization and portable mode to be there next
year.&lt;/p&gt;
&lt;p&gt;Consider that is the a &lt;em&gt;spare time effort&lt;/em&gt;. Lots of people lauded it for
the out of the box experience, and how it just works. That’s right. I
put a lot of focus on stability, correctness, and ease of use. In fact,
since my return, I have mostly worked on the feedback I got in that
domain.&lt;/p&gt;
&lt;p&gt;But for the relatively small amount of time I can invest (outside of
holidays), it’s make very fast progress.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="out-of-the-box-thinking"&gt;
&lt;h2&gt;Out of the box thinking&lt;/h2&gt;
&lt;p&gt;The feedback during the conference was great. While Nuitka is not yet
seeing a lot of users, and not as many contributions or donations as I
would hope for, but that’s kind of expected with my out of the box
thinking there.&lt;/p&gt;
&lt;p&gt;Few people at Europython really need a Python compiler. The most
important exception are scientific people, doing number crunching. And I
made some interesting contacts there.&lt;/p&gt;
&lt;p&gt;Since my return, I have been receiving a bunch of bug reports. Some of
which were unfortunately regressions of 0.4.4, and these got fixed in
two hotfix releases. Currently 0.4.4.2 is released, and contains a huge
amount of fixes, mostly stuff found by the surge new users.&lt;/p&gt;
&lt;p&gt;But I deserved that, having said that I didn’t have to do hotfixes for a
while now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="florence"&gt;
&lt;h2&gt;Florence&lt;/h2&gt;
&lt;p&gt;Such a lovely place, and so lovely people. It’s a tourist place, true,
but it’s very open minded. The food is extremely good. And going from
the conference hotel straight over to the river to meet up and have a
few beers was very comfortable for after-conference stuff.&lt;/p&gt;
&lt;p&gt;Now that I have been there 2 times, and the conference even 3 times,
it’s moving on, to Berlin, which I sort of regret. Knowing the place
somewhat definitely is an advantage by itself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-revolution"&gt;
&lt;h2&gt;Python Revolution&lt;/h2&gt;
&lt;p&gt;One thing that came to my mind during the conference, witnessing the
large amount of non-satisfaction, was that the community is fed up with
the leadership. Questioned about lack of Python3 adoption, a PSF guy in
his presentation said they were 3 years into a 5 years plan, and got
interrupted by laughter.&lt;/p&gt;
&lt;p&gt;It may be about time, somebody actually gets up, removes the GIL and has
a Python2.8 that is compatible. Obviously that’s much more useful. It
could be a Python3.x with compatibility names of modules, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt;
statement, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict.iteritems&lt;/span&gt;&lt;/code&gt; added, probably also making some of
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; mess more harmless, and providing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; built-in names.&lt;/p&gt;
&lt;p&gt;Considering that I have in fact been playing with the idea of forking
CPython top versions, to add things, that would allow Nuitka to work
better with it, that could be a staging ground, where such changes are
nurtured. On the other hand, Nuitka is too irrelevant yet to drive this,
and it would detract me away from it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gains"&gt;
&lt;h2&gt;Gains&lt;/h2&gt;
&lt;p&gt;So Nuitka got a lot more exposure. And one guy watching the talk even
created a really &lt;a class="reference external" href="/_static/Nuitka-Logo-Symbol.svg"&gt;nice logo&lt;/a&gt; for
it. I will make it a separate announcement though, and the next release
is going to use it.&lt;/p&gt;
&lt;p&gt;And in the aftermath, there were much bug useful reports. And new ideas.
And reinforcement that what I am doing is actually useful to some people
already.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;Donations&lt;/h2&gt;
&lt;p&gt;My travel to Florence was in part funded by donations. Thanks a lot to
all of you who have given, and who would like to also &lt;a class="reference external" href="/pages/donations.html"&gt;make a donation&lt;/a&gt;. Should I receive sufficient donations, I
intend to go to FOSDEM 2014 as well.&lt;/p&gt;
&lt;p&gt;Going to Berlin will be a bit cheaper this time around, as I can travel
there via train.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Europython 2012 and 2013 both are among the times of my life.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/my-europython-2013-report.html" rel="alternate"/>
    <summary>Back from Europython 2013 in Florence for a while now. I had a
presentation about my Python compiler Nuitka.
You can watch the Video on Youtube. I believe it’s absolutely worth your
time. I was not doing a lot of “why” at all now, only “what”, and demo
times, and answering questions:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <category term="conference" label="conference"/>
    <category term="presentation" label="presentation"/>
    <category term="video" label="video"/>
    <category term="europython" label="europython"/>
    <published>2013-08-15T08:15:17+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-python-research-and-physics.html</id>
    <title>Nuitka, Python research and Physics</title>
    <updated>2013-10-04T09:54:45+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-python-research-and-physics"&gt;

&lt;p&gt;Once upon a time ago physics had multiple forces. Each with very
distinct traits. These were the early days. Then as time went on people
started to realize that weak nuclear force and electromagnetic force
were the same sort. That was after discovering that electricity and
magnetism were the same, and that is the pattern. It’s called symmetry,
equivalence, and so on.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="/pages/overview.html"&gt;Nuitka&lt;/a&gt; project is effectively a Python
research that goes through the same steps. There are e.g. currently
local variables, closure variables (shared from containing function),
module variables, temp holder, temp keeper, and temp variables.&lt;/p&gt;
&lt;p&gt;Often when I added one more this was driven by code generation needs or
deficiencies at the time. These are of course way too many, and all are
good at one thing only.&lt;/p&gt;
&lt;p&gt;So the main task Nuitka is faced with now to e.g. generalize that “temp
keeper” variables are temporary variables local to one statement only,
surely to be released afterwards, and make that particular feature e.g.
work for all variables across the board. Right now, code generation uses
“cheats” where it puts a C++ block and local declarations for “temp
keeper” variables.&lt;/p&gt;
&lt;p&gt;It would be good, if it could be a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt; with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt; statement on the
“temp keeper variable” in its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;finally&lt;/span&gt;&lt;/code&gt; part and yet, get the same
code generated. Difficult, yes, but not impossible, and definitely what
I am aiming at.&lt;/p&gt;
&lt;p&gt;So that is what Nuitka will be dealing with in the next releases. Once
done, maybe there will be a “gravity”, i.e. the one thing not yet
harmonized, but for good reasons. Potentially limited due to lack of
understanding, potentially because there is a good reason. And so not
all we be unified or maybe e.g. module variables will be a bit more
special than local variables, although modules are just functions with
variables writable everywhere.&lt;/p&gt;
&lt;p&gt;Good stuff is coming, hold on. &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;Join the project&lt;/a&gt;, or support it financially if you
wish.&lt;/p&gt;
&lt;p&gt;Nuitka still is too much of a one man show. Should I be asked to name
one single weakness of it - that would be it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-python-research-and-physics.html" rel="alternate"/>
    <summary>Once upon a time ago physics had multiple forces. Each with very
distinct traits. These were the early days. Then as time went on people
started to realize that weak nuclear force and electromagnetic force
were the same sort. That was after discovering that electricity and
magnetism were the same, and that is the pattern. It’s called symmetry,
equivalence, and so on.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="physics" label="physics"/>
    <published>2013-10-04T09:54:45+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-and-guis.html</id>
    <title>Nuitka and GUIs</title>
    <updated>2013-11-26T09:35:53+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-and-guis"&gt;

&lt;p&gt;Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;“What is Nuitka?”&lt;/a&gt; for
clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;p&gt;Nuitka is a typical compiler, just for Python, and aims to be
integrating with build tools, and as such is so much a command line
tool, it hurts.&lt;/p&gt;
&lt;p&gt;Yet, there are GUIs. Yes, &lt;em&gt;plural&lt;/em&gt;, there are even two.&lt;/p&gt;
&lt;p&gt;Many of you are maybe using Ninja IDE already. I have developed most of
early Nuitka in vim, and later, mostly because of Nuitka, switched back
to Emacs. I had switched from Emacs at one point 12 years ago, but then
went back a couple of years ago.&lt;/p&gt;
&lt;p&gt;But recently &lt;a class="reference external" href="https://plus.google.com/118074123761587415902/about"&gt;+Juan Carlos&lt;/a&gt; convinced me to
give Ninja a try. Because not only is he the creator the &lt;a class="reference external" href="https://github.com/juancarlospaco/nuitka-gui"&gt;Nuitka GUI&lt;/a&gt;, but also the creator
of the &lt;a class="reference external" href="https://github.com/juancarlospaco/nuitka-ninja"&gt;Ninja IDE plugin&lt;/a&gt; for Nuitka.&lt;/p&gt;
&lt;p&gt;So on Windows, I now use Ninja, and I like it, a lot.&lt;/p&gt;
&lt;p&gt;I must admit, I am not a heavy user of both Nuitka GUIs, rather being a
command line guy I suppose, but that is just great. I would like to
thank Juan Carlos for these contributions.&lt;/p&gt;
&lt;p&gt;They are one sign of Nuitka getting more external recognition. It is
showing that the eco system around Nuitka is indeed warming up.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-and-guis.html" rel="alternate"/>
    <summary>Please see the page “What is Nuitka?” for
clarification of what it is now and what it wants to be.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2013-11-26T09:35:53+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-in-arch-linux.html</id>
    <title>Nuitka in Arch Linux</title>
    <updated>2013-11-30T14:17:59+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-in-arch-linux"&gt;

&lt;p&gt;Got this message:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;thought&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;wanted&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;know&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;official&lt;/span&gt;
&lt;span class="n"&gt;Arch&lt;/span&gt; &lt;span class="n"&gt;Linux&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="n"&gt;simply&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;nuitka&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, that is another sign of Nuitka getting more external recognition. It
is showing that the eco system around Nuitka is indeed warming up.&lt;/p&gt;
&lt;p&gt;Many thanks to Alexander Rødseth and Panagiotis Mavrogiorgos for
maintaining the Nuitka packages inside Arch and on AUR.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-in-arch-linux.html" rel="alternate"/>
    <summary>Got this message:</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2013-11-30T14:17:59+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-standalone-mode-is-work-in-progress.html</id>
    <title>Nuitka Standalone Mode is Work in Progress</title>
    <updated>2013-12-27T10:48:22+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-standalone-mode-is-work-in-progress"&gt;

&lt;p&gt;Many of you who turn to my easy to use, highly compatible Python
compiler &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;, do this mostly because they
seek to solve the deployment problem that Python suffers from.&lt;/p&gt;
&lt;p&gt;Be this, because you want to use a newer Python2.7 on RHEL5 without
installing anything at all there. Or because Windows is difficult to
tackle otherwise.&lt;/p&gt;
&lt;p&gt;For the longest time, Nuitka had not offered anything in this domain,
focusing solely on being an accelerator. Lately, I have taken up the
challenge and polished initial solutions submitted by contributors.&lt;/p&gt;
&lt;p&gt;This first showed up in the 0.4.7 release, but turned out relatively
weak. While first examples were working on Linux, it was not working at
all on Windows (anymore). And basically there was a huge lack of tests.&lt;/p&gt;
&lt;p&gt;Actually I didn’t mean for it to be released with that feature, but as
parts of it seemed to work, I did so. But truth to be sad, that feature
is not nearly as polished in that release as you would like it to.&lt;/p&gt;
&lt;p&gt;In current &lt;a class="reference external" href="/pages/download.html"&gt;development releases&lt;/a&gt;, of what is going to become
0.5.0 really soon now, it’s much better already. More things actually
work. But it appears, there will be more ground to cover, and this is a
lot of stuff to sort out.&lt;/p&gt;
&lt;p&gt;So, this is mostly about asking you two things. Give that development
release a try and report issues you have with it. And help me.&lt;/p&gt;
&lt;p&gt;And have patience. I am developing Nuitka as an accelerator on a “no
known bugs” basis. That means, once I know of a bug, I will fix it. OK,
some issues in fact take longer, but then it really is not important at
all, but difficult at the time. For standalone mode, I can’t do it that
way, or I would have to neglect the acceleration parts, which I totally
don’t want to do.&lt;/p&gt;
&lt;p&gt;Because while you maybe are only interested in a packaging solution,
many others would like to have that orders of magnitude speedup that I
have been aiming for and that feels near now. This is about making
Python a viable language for more uses than it currently is.&lt;/p&gt;
&lt;p&gt;So why do it in the first place. For one, I am hoping that it helps
people to not turn away from Python. And second, and more important, I
am hoping that by making it more useful, more people will join me. (Oh,
and thirdly, it’s also a nice puzzle to solve. I seem to enjoy that.)&lt;/p&gt;
&lt;p&gt;Ultimately both modes will be needed, standalone, and acceleration. And
it seems like I am working to provide both. For standalone, more often,
than seeking to avoid bugs as far as possible, I am going to rely on
your participation.&lt;/p&gt;
&lt;p&gt;So join Nuitka. Now. &lt;a class="reference external" href="/pages/download.html"&gt;Download from here&lt;/a&gt;. Join the mailing list (since
closed). And help if you can. And yes you can.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-standalone-mode-is-work-in-progress.html" rel="alternate"/>
    <summary>Many of you who turn to my easy to use, highly compatible Python
compiler Nuitka, do this mostly because they
seek to solve the deployment problem that Python suffers from.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Windows" label="Windows"/>
    <published>2013-12-27T10:48:22+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/re-about-python-3.html</id>
    <title>Re: About Python 3</title>
    <updated>2013-12-30T20:56:32+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="re-about-python-3"&gt;

&lt;p&gt;In &lt;a class="reference external" href="http://alexgaynor.net/2013/dec/30/about-python-3/"&gt;Alex Gaynor’s post&lt;/a&gt; there is just
about everything right. I still want to add my take on it.&lt;/p&gt;
&lt;p&gt;Python3 is a fork of the Python community, that has left the user base
largely behind. After developing features very conservatively for a long
time (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;__future__&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;division&lt;/span&gt;&lt;/code&gt; and stuff), where features
were first available but not active by default, that whole “Python 3000”
thing came up.&lt;/p&gt;
&lt;p&gt;Misguided, after having maintained CPython on a level of excellence for
such a long time, there was a sense of “finally we get to make free
choices”. I can understand that. And having witnessed Gnome 2.0.0, and
KDE 4.0.0, I even start to believe that there is some kind of underlying
law. Something that makes people want to start over.&lt;/p&gt;
&lt;p&gt;That “5 years plan” Alex mentioned has failed, and everybody knows that
without solving the GIL within the next 5 years, i.e. another
incompatible Python change, it will likely become obsolete.&lt;/p&gt;
&lt;p&gt;In terms of Python2.8, call it that way. Or have a 3.5 that has
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt; statement, and then all kinds of incompatible changes to
Python3 to make it behave sane &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes(7)&lt;/span&gt;&lt;/code&gt; needs to do what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str(7)&lt;/span&gt;&lt;/code&gt;
once it. That would be about &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;__past__&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;....&lt;/span&gt;&lt;/code&gt; I suppose.&lt;/p&gt;
&lt;p&gt;I also had another idea, having a “python2” built-in module that carries
a CPython2 interpreter and proxy objects for instances, where they talk
to another with incompatible types (new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; to old
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Due to my work on that &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler&lt;/a&gt; that should have existed 20
years ago, I am familiar enough, to actually be able and create that
kind of CPython2/CPython3 hybrid.&lt;/p&gt;
&lt;p&gt;But the main problems with all of that are:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;CPython is developed by volunteers, and as such, they are neither
obliged to do what we need, nor will they bend to any amount of
posting. We need to get our acts together or it’s not happening, and
we are people who care about Python relevancy.&lt;/p&gt;
&lt;p&gt;There may not be nearly enough overlap of people capable and caring.
And that would be a tremendous amount of work. Highly speculative, in
the sense, that it may not see fruits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And then, when you got that sorted out, expect a hostile reaction
from the core developers and/or PSF. Whatever it is, that you
develop, you won’t be able to call it Python 2.8, as they are going
to hate it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And finally, as a course of action, that may even bring the complete
downfall of Python as a community. The controversy associated is not
for everybody, and we don’t need a libreoffice/openoffice situation
in Python, do we.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s a pity, because clearly, for Nuitka there would be a bunch of
patches, that I would like to make, that would make my life far easier,
and even interpreted Python faster.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/re-about-python-3.html" rel="alternate"/>
    <summary>In Alex Gaynor’s post there is just
about everything right. I still want to add my take on it.</summary>
    <category term="Python" label="Python"/>
    <published>2013-12-30T20:56:32+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/not-going-to-fosdem-2014.html</id>
    <title>Not going to FOSDEM 2014</title>
    <updated>2014-01-18T20:48:53+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="not-going-to-fosdem-2014"&gt;

&lt;p&gt;So I submitted a talk for FOSDEM “Python has a compiler now”. And it
didn’t get accepted. Quite a surprise to me, but likely mostly logical.
These are the accepted talks (link since became unavailable) and well,
it surely didn’t fit in, right.&lt;/p&gt;
&lt;p&gt;My intent was to introduce &lt;a class="reference external" href="/pages/overview.html"&gt;Nuitka&lt;/a&gt; to the
larger community. Not going to happen now, but maybe next year.&lt;/p&gt;
&lt;p&gt;Clearly triggered by the rejection, I am questioning Europython 2014 in
Berlin as a useful destination too. To me it seems, that code writing is
the best way to create the community at this time anyway.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/not-going-to-fosdem-2014.html" rel="alternate"/>
    <summary>So I submitted a talk for FOSDEM “Python has a compiler now”. And it
didn’t get accepted. Quite a surprise to me, but likely mostly logical.
These are the accepted talks (link since became unavailable) and well,
it surely didn’t fit in, right.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="europython" label="europython"/>
    <category term="conference" label="conference"/>
    <published>2014-01-18T20:48:53+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/try-finally-python-quiz.html</id>
    <title>Try Finally Python Quiz</title>
    <updated>2014-04-24T22:08:56+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="try-finally-python-quiz"&gt;

&lt;p&gt;When working on my Python compiler Nuitka, I often come across
ridiculous language details of the Python language, and turn these into
quizzes, for which I finally added a &lt;a class="reference external" href="/blog/tag/quiz.html"&gt;dedicated quiz tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, who can predict, what these will do to you:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Will it return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt; ?&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Will this raise an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt; or return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt; ?&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Is this an endless loop or does it return?&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What about that? This one holds an inconsistency.&lt;/p&gt;
&lt;p&gt;No solutions yet this time.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/try-finally-python-quiz.html" rel="alternate"/>
    <summary>When working on my Python compiler Nuitka, I often come across
ridiculous language details of the Python language, and turn these into
quizzes, for which I finally added a dedicated quiz tag.</summary>
    <category term="Python" label="Python"/>
    <category term="quiz" label="quiz"/>
    <published>2014-04-24T22:08:56+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/state-of-nuitka.html</id>
    <title>State of Nuitka</title>
    <updated>2014-06-17T05:35:48+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="state-of-nuitka"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#state-of-nuitka" id="id1"&gt;State of Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#c-ish-vs-c-ish" id="id2"&gt;C-ish vs. C++-ish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#rewriting-code-generation" id="id3"&gt;Rewriting Code Generation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#current-situation" id="id4"&gt;Current Situation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#open-points" id="id5"&gt;Open Points&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-things" id="id6"&gt;Other Things&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#call-for-help" id="id7"&gt;Call for Help&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#final-words" id="id8"&gt;Final Words&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;For quite some time, publicly, very little has happened with my Python
compiler Nuitka. But that doesn’t mean, there hasn’t been progress. In
fact it is tremendous. I would like to have a post that kind of
summarizes, what happened.&lt;/p&gt;
&lt;p&gt;The last release, 0.5.1 was more of a maintenance release than making
real changes. It turns out, that the bigger changes got delayed by a
feature that I have described as “C-ish”. Let me outline, what this
means.&lt;/p&gt;
&lt;section id="c-ish-vs-c-ish"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;C-ish vs. C++-ish&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I started working on Nuitka, the big question was if it is possible
to create a sufficiently compatible compiler. The use of C++11 then,
together with some templates made it easy to cover a wide, wide part of
the language, and to fully integrate with CPython for compatibility.&lt;/p&gt;
&lt;p&gt;The main goal was to get it going to work correctly. As time went on,
execution order demanded to do away with variadic templates, raw strings
were not all that perfect at all, and so C++-03 was good enough at one
point.&lt;/p&gt;
&lt;p&gt;And then, as Nuitka became less and less template based, and shoving
more things into the node tree, and re-formulations, making this where
the knowledge resided. It became more and more obvious that C++ has two
problems. One in the way I used it. One inherent in the language typical
implementations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C++ exceptions are god damn slow&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything should be a in a single statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The later was my choice. Initially it made it easy to pass on references
and put the releasing C++ class around every expression as necessary.
Identifier classes were allowing for code generation to avoid taking
references where necessary, and it was not all that bad. Yet limiting.&lt;/p&gt;
&lt;p&gt;This led to a couple of issues.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The order of call arguments release for e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;f(g(h()))&lt;/span&gt;&lt;/code&gt; was not
completely compatible, with the way how CPython does it. C++
destructors for objects living in a single statement didn’t give
sufficient control, and make the order and timing of finalization not
compatible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The generated C++ code complexity became large. The compilation of
the generated C++ in some cases was huge. To the point, that e.g.
“code too complex” was giving by compilers like MSVC for some
modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cases of in-place assignments were discovered, where CPython
outperforms Nuitka by a large margin. But these don’t fit into that
style of code generation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, at some point, the pain had built up. Code generation was already
lighter than in the beginning. For example, initially &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt;
statements had dedicated code templates to them. This, and many other
things, are long gone.&lt;/p&gt;
&lt;p&gt;I took a deep dive, and &lt;strong&gt;rewrote&lt;/strong&gt; the whole code generation, to be
much more “C-ish” than “C++-ish”. A huge undertaking that would take
months.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Where previously, code didn’t have to handle return error codes (a
C++ exception was thrown), now everything needed a return value name,
and error check.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where classes were previously conviently made sure things happened at
function or scope exit, manual handling needed to be added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The handling of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;return&lt;/span&gt;&lt;/code&gt; was
previously done with exceptions being thrown, if they were to pass a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;finally&lt;/span&gt;&lt;/code&gt; handler. Now these are done with stacks of exit
handlers, where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;goto&lt;/span&gt;&lt;/code&gt; statements are used to produce the correct
behaviour.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="rewriting-code-generation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Rewriting Code Generation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Redoing code generation, over months, while ultimately, slowly, arriving
at a point where Nuitka would be doing this, it already did before, was
kind of frustrating.&lt;/p&gt;
&lt;p&gt;Of course, the performance benefit would be there, but it would not be
all that much, except for exception raising and handling. There it would
be huge. Ultimately for PyStone, a couple of extra percents were gained.&lt;/p&gt;
&lt;p&gt;This really was a point, where I felt, that Nuitka will make it or
break. And for a long time, I honestly wasn’t so sure, that I pull
through. But I did.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="current-situation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Current Situation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current pre-release is release quality. You should try it out, it’s
great.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There are many changes to Standalone mode. Due to changes in how
constants are now created in the modules that uses them, instead of
everything globally, the parallel compilation now works great. What
previously took an hour with MSVC (the problem child, gcc was always
relatively good), now takes minutes only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The support for virtualenv’s of all kinds seems to work on Windows,
Linux, and macOS, which all seem to have different kinds of codes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The support for macOS is now there. Thanks to a virtual server month
donated to Jarrad Hope, I was able to iron issues out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The final release will also work with standalone binaries created on
Fedora 20 which got hard code rpaths removed on the factory git
branch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And yet, I am not yet releasing. In fact, I would like to ask you to
give it a roll, and integrate test feedback.&lt;/p&gt;
&lt;p&gt;Although more tests than ever are executed and pass, (e.g. the Mercurial
test suite is now run each time I make a commit, and fully identically
passes or fails the test suite with the current Mercurial code), there
can never be enough.&lt;/p&gt;
&lt;p&gt;The changes I made are the most intense ever, and definitely have
potential for regressions. I am used to providing very high quality
releases.&lt;/p&gt;
&lt;p&gt;Also, I am working on the Buildbot instances to automate the production
of &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;performance graphs&lt;/a&gt;, which get
updated fully automatically. I am working on updating the downloads page
automatically for each release that gets made.&lt;/p&gt;
&lt;p&gt;And generally, I am trying to improve my work flow, to make it easier to
push out releases with less effort. Buildbot should drive the release
process more completely. I am using the git flow to provide hot-fixes,
and this should be even less painful in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="open-points"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Open Points&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With this release, presenting great progress, many things remain in an
unfinished state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The support for Python3.4 is not complete. Most things work, but some
need more work. Specifically the changes to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__class__&lt;/span&gt;&lt;/code&gt; variable
closure taking, need another major refactoring, this time on variable
handling.&lt;/p&gt;
&lt;p&gt;Currently there are variables, closure variables, temp variables, and
then temp variable references. The way they work is different. One
way they work different, prevents a temp variable closure reference
to carry a name, in that case &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-_class__&lt;/span&gt;&lt;/code&gt;, which would be needed
for Python3.4, where that is suddenly necessary.&lt;/p&gt;
&lt;p&gt;With this done, the SSA code will be even easier to write, as temp
variables and named variables will finally be fully unified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The use of C++ classes is largely reduced now. But a few still
remain, namely for local variables, closure variables, and temp
variables that are explicit variables. They still use C++ classes,
although changing that seems quite possible now, because at least for
temporary variables, the class doesn’t do anything in terms of code
anymore.&lt;/p&gt;
&lt;p&gt;Removing these classes may well gain more performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that code generation can more easily make a difference, and SSA
apparently is becoming reliable, it could be used to &lt;em&gt;know&lt;/em&gt; that
values must be value and to optimize checks away.&lt;/p&gt;
&lt;p&gt;Currently every variable access checks for “NULL”, when it’s part of
an assign trace. Some optimizations exist for parameter variables
without &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt; on them, that do not use SSA.&lt;/p&gt;
&lt;p&gt;This could be expanded and made general, allowing for much less code
to be generated (specifically avoiding error code, and release code
for variables that cannot give an error).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The SSA has been found unreliable in some instances, due to bugs that
I believe I found. We could attempt and forward propagate variable
assignments to where they are used, eliminating variables, etc.&lt;/p&gt;
&lt;p&gt;This is a place, where a lot of performance can be gained. We really
want to be there. And “C-ish” now makes this ever more attractive,
despite the large delay in time it has caused.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The in-place assignment code for strings, where CPython can be way
faster than current Nuitka, it bears a risk of getting it wrong. It
is therefore pushed to a future release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-things"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Other Things&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the website, I am relocating the virtual machine to a dedicated
server rented for an increased price. This will allow to add a few more
dynamic features, as the virtual machine was always too limited in RAM.
It’s more expensive, but I feel a better investment of my time.&lt;/p&gt;
&lt;p&gt;As mentioned before, I am not going to conferences this year. Enjoy
Europython, and consider having a Lightning talk about Nuitka. I will be
there next year again.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="call-for-help"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Call for Help&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Please test the latest release of Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please consider &lt;a class="reference external" href="/pages/donations.html"&gt;making a donation&lt;/a&gt; to support my work on
Nuitka. I have continuous monthly costs of it, so it would be sweet
if it’s with all my time spent working on it, at least not a
financial cost to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please join the mailing list (since closed), and offer your help with
tasks. Nuitka can seriously take more people developing, testing,
reviewing, and quality checking it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="final-words"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Final Words&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is this “C-ish” release 0.5.2 cooking. You are invited to
help. Big, improvements are coming to Nuitka. Even after this next huge
release, very important work is still open, but hope is to have this
complete over the summer.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/state-of-nuitka.html" rel="alternate"/>
    <summary>State of Nuitka</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2014-06-17T05:35:48+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/yup-another-python-riddle.html</id>
    <title>Yup, another Python Quiz</title>
    <updated>2014-06-18T07:46:50+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="yup-another-python-quiz"&gt;

&lt;p&gt;Using the following source code as a test happily in my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler
Nuitka&lt;/a&gt; for some years now.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Testing dict optimization with all constants for compatibility.&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Dictionary entirely from constant args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Guido&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;van&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Rossum&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;invented&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="quiz-question"&gt;
&lt;h2&gt;Quiz Question&lt;/h2&gt;
&lt;p&gt;Lately, when adding Python 3.4 support, this and other code changed. So
lets do this manually:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PYTHONHASHSEED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; python3.3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.3.5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mar&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.8.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See, the dictionary is stable, once it gets reordered, due to hash
values, but then it stays fixed. Which is pretty OK, and using a fixed
hash value, it’s deterministic. Random hashing is not good for
comparison testing, so I disable it for tests.&lt;/p&gt;
&lt;p&gt;Now things get interesting, repeat with 3.4:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PYTHONHASHSEED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; python3.4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.4.1&lt;/span&gt;&lt;span class="n"&gt;rc1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.8.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;                &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rossum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;van&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="n"&gt;builds&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;
&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Since&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s all compile time constants, we can do that, right, and&lt;/span&gt;
&lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;So&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Look at how the result of “dict” is not reproducing itself, when used as
a constant. I am only feeding the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; result to the interpreter,
and it changes.&lt;/p&gt;
&lt;p&gt;So the quizz this time is, why does this happen. What change in
CPython3.4 makes this occur. Obviously it has to do with dictionary
sizes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;I had a theory, but I couldn’t confirm it looking at all of CPython
sources “ceval.c” and “dictobject.c” differences between the two
versions.&lt;/p&gt;
&lt;p&gt;I am suspecting a difference between presized and non-presized
dictionaries, or that change to dictionary grow. When &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; is being
called, the amount of keys is know though, as well as when building the
constant. So this ought to not play any role.&lt;/p&gt;
&lt;p&gt;Hm, actually. I don’t know the solution yet. :-)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/yup-another-python-riddle.html" rel="alternate"/>
    <summary>Using the following source code as a test happily in my Python compiler
Nuitka for some years now.</summary>
    <category term="Python" label="Python"/>
    <category term="quiz" label="quiz"/>
    <published>2014-06-18T07:46:50+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-shaping-up.html</id>
    <title>Nuitka shaping up</title>
    <updated>2014-10-02T07:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-shaping-up"&gt;

&lt;p&gt;Not much has happened publicly to Nuitka, so it’s time to make a kind of
status post, about the exciting news there is.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-shaping-up" id="id1"&gt;Nuitka shaping up&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#improved-code-generation" id="id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id5"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python2-exec-statements" id="id6"&gt;Python2 exec statements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python3-classes" id="id7"&gt;Python3 classes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python3-4" id="id8"&gt;Python3.4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id9"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id10"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#incremental-assignments" id="id11"&gt;Incremental Assignments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id12"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id13"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id14"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id15"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id16"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
enabling &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka. There is a component called “constraint collection”, which is
tasked with driving the optimization, and collecting variable traces.&lt;/p&gt;
&lt;p&gt;Based on these traces, optimizations could be made. Having SSA or not,
is (to me) the difference between Nuitka as a compiler, and Nuitka as an
optimizing compiler.&lt;/p&gt;
&lt;p&gt;The news is, SSA is shaping up, and will be used in the next release.
Not yet to drive variable based optimization (reserved for a release
after it), but to aid the code generation to avoid useless checks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improved-code-generation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previously, under the title “C-ish”, Nuitka moved away from C++ based
code generation to less C++ based code generated, and more C-ish code.
This trend continues, and has lead to removing even more code cleanups.&lt;/p&gt;
&lt;p&gt;The more important change is from the SSA derived knowledge. Now Nuitka
knows that a variable must be assigned, cannot be assigned, may be
assigned, based on its SSA traces.&lt;/p&gt;
&lt;p&gt;Lets check out an example:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nevermind, that &lt;em&gt;obviously&lt;/em&gt; the variable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; can be removed, and this
could be transformed to statically return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt;. That is the next step
(and easy if SSA is working properly), now we are looking at what
changed now.&lt;/p&gt;
&lt;p&gt;This is code as generated now, with current 0.5.5pre5:&lt;/p&gt;
&lt;div class="highlight-c++ notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp_assign_source_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_pos_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INCREASE_REFCOUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_assign_source_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;tmp_return_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_return_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function_return_exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are some things, wrong with it still. For one, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;var_a&lt;/span&gt;&lt;/code&gt; is still
a C++ object, which we directly access. But the good thing is, we can
assert that it starts out uninitialized, before we overwrite it. The
stable release as of now, 0.5.4, generates code like this:&lt;/p&gt;
&lt;div class="highlight-c++ notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp_assign_source_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_pos_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INCREASE_REFCOUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_assign_source_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INCREASE_REFCOUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_assign_source_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyFrameObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cache_frame_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;MAKE_OR_REUSE_FRAME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache_frame_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeobj_4e03e5698a52dd694c5c263550d71551&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;module___main__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;PyFrameObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;frame_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache_frame_function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Push the new frame as the currently active one.&lt;/span&gt;
&lt;span class="n"&gt;pushFrameStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frame_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Mark the frame object as in use, ref count 1 will be up for reuse.&lt;/span&gt;
&lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frame_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Py_REFCNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frame_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Frame stack&lt;/span&gt;

&lt;span class="c1"&gt;// Framed code:&lt;/span&gt;
&lt;span class="n"&gt;tmp_return_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_return_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exception_type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;INCREASE_REFCOUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyExc_UnboundLocalError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exception_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UNSTREAM_STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;constant_bin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exception_tb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;frame_function&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_lineno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frame_exception_exit_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp_return_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frame_return_exit_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, the assignment to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;var_a.object&lt;/span&gt;&lt;/code&gt; was checking if it
were &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NULL&lt;/span&gt;&lt;/code&gt;, and if were not (which we now statically know), would
release the old value. Next up, before returning, the value of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;var_a.object&lt;/span&gt;&lt;/code&gt; needed to be checked, if it were &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NULL&lt;/span&gt;&lt;/code&gt;, in which
case, we would need to create a Python exception, and in order to do so,
we need to create a frame object, that even if cached, consumes time,
and code size.&lt;/p&gt;
&lt;p&gt;So, that is the major change to code generation. The SSA information is
now used in it, and doing so, has found a bunch of issues, in how it is
built, in e.g. nested branches, that kind of stuff.&lt;/p&gt;
&lt;p&gt;The removal of local variables as C++ classes, and them managed as
temporary variables, is going to happen in a future release, reducing
code complexity further. Were &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; a temporary variable, already, the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_INCREF&lt;/span&gt;&lt;/code&gt; which implies a later &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_DECREF&lt;/span&gt;&lt;/code&gt; on the constant &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt;
could be totally avoided.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The scalability of Nuitka hinges much of generated code size. With it
being less stupid, the generated code is now not only faster, but
definitely smaller, and with more optimization, it will only become more
practical.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;section id="python2-exec-statements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Python2 exec statements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A recent change in CPython 2.7.8+ which is supposed to become 2.7.9 one
day, highlighted an issue with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; statements in Nuitka. These were
considered to be fully compatible, but apparently are not totally.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above two are supposed to be identical. So far this was rectified at
run time of CPython, but apparently the parser is now tasked with it, so
Nuitka now sees &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt; &lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;b,&lt;/span&gt; &lt;span class="pre"&gt;c&lt;/span&gt;&lt;/code&gt; for both lines. Which is good.&lt;/p&gt;
&lt;p&gt;However, as it stands, Nuitka handles &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;locals()&lt;/span&gt;&lt;/code&gt; the same
as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; for plain functions (OK to classes and modules),
which is totally a bug.&lt;/p&gt;
&lt;p&gt;I have been working on an enhanced re-formulation (it needs to be
tracked if the value was &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt;, and then the sync back to locals from
the provided dictionary ought to be done. But the change breaks
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;execfile&lt;/span&gt;&lt;/code&gt; in classes, which was implemented piggy-backing on
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;, and now requires locals to be a dictionary, and immediately
written to.&lt;/p&gt;
&lt;p&gt;Anyway, consider &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; as well working already. The non-working cases
are really corner cases, obviously nobody came across so far.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python3-classes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Python3 classes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Incidentally, that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;execfile&lt;/span&gt;&lt;/code&gt; issue will be solved as soon as a bug is
fixed, that was exposed by new abilities of Python3 metaclasses. They
were first observed in Python3.4 enum classes.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyEnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Currently, Nuitka is delaying the building of the dictionary (absent
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;execfile&lt;/span&gt;&lt;/code&gt; built-in), and that is not allowed, in fact, immediate
writes to the mapping giving by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__prepare__&lt;/span&gt;&lt;/code&gt; of the metaclass will be
required, in which case, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;enum&lt;/span&gt;&lt;/code&gt; class can raise an error for the
second assignment to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;red&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So that area now hinges on code generation to learn different local
variable codes for classes, centered around the notion of using the
locals dictionary immediately.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python3-4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Python3.4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next release is no longer warning you if you use Python3.4, as many
of the remaining problems have been sorted out. Many small things were
found, and in some cases these highlighted general Python3 problems.&lt;/p&gt;
&lt;p&gt;Nuitka for Python3 is not yet all that much in the focus in terms of
performance, but correctness will have become much better, with most
prominently, exception context being now correct most often.&lt;/p&gt;
&lt;p&gt;The main focus of Nuitka is Python2, but to Nuitka the incompatibility
of Python3 is largely not all that much an issue. The re-formulations to
lower level operations for just about everything means that for the
largest part there is not much trouble in supporting a mostly only
slightly different version of Python.&lt;/p&gt;
&lt;p&gt;The gain is mostly in that new tests are added in new releases, and
these sometimes find things that affect Nuitka in all versions, or at
least some others. And this could be a mere reference leak.&lt;/p&gt;
&lt;p&gt;Consider this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, that is working with Python2, but comes from a Python3 test. Python2
is supposed to unwrap the tuple and take the first argument and raise
that. It didn’t do that so far. Granted, obscure feature, but still an
incompatibility. For Python3, a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TypeError&lt;/span&gt;&lt;/code&gt; should be raised
complaining that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tuple&lt;/span&gt;&lt;/code&gt; is not derived from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BaseException&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Turned out, that also, in that case, a reference leak occurs, in that
the wrong exception was not released, and therefore memory leaked.
Should that happen a lot during a programs live, it will potentially
become an issue, as it keeps frames on the traceback also alive.&lt;/p&gt;
&lt;p&gt;So this lead to a compatibility fix and a reference leak fix. And it was
found by the Python3.4 suite, checking that exception objects are
properly released, and that the proper kind of exception is raised in
the no longer supported case.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I had been working on automated performance graphs, and they are
supposed to show up on &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; already, but currently it’s broken
and outdated.&lt;/p&gt;
&lt;p&gt;Sad state of affairs. Reasons include that I found it too ugly to
publish unless updated to latest Nikola, for which I didn’t take the
time. I intend to fix it, potentially before the release though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="incremental-assignments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Incremental Assignments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; is a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;, and if (and only if), it’s the only reference
being held, then CPython, reuses the object, instead of creating a new
object and copying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; over. Well, Nuitka doesn’t do this. This is
despite the problem being known for quite some time.&lt;/p&gt;
&lt;p&gt;With SSA in place, and “C-ish” code generation complete, this will be
solved, but I am not going to solve this before.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka is pretty good, and in the pre-release it
was again improved. For instance, virtualenv and standalone should work
now, and more modules are supported.&lt;/p&gt;
&lt;p&gt;However, there are known issues with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;win32com&lt;/span&gt;&lt;/code&gt; and a few other
packages, which need to be debugged. Mostly these are modules doing
nasty things that make Nuitka not automatically detect imports.&lt;/p&gt;
&lt;p&gt;This has as usual only so much priority from me. I am working on this on
some occasions, as kind of interesting puzzles to solve. Most of the
time, it just works though, with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wxpython&lt;/span&gt;&lt;/code&gt; being the most notable
exception. I am going to work on that though.&lt;/p&gt;
&lt;p&gt;The standalone compilation exhibits scalability problems of Nuitka the
most, and while it has been getting better, the recent and future
improvements will lead to smaller code, which in turn means not only
smaller executables, but also faster compilation. Again, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wxpython&lt;/span&gt;&lt;/code&gt; is
a major offender there, due to its many constants, global variables,
etc. in the bindings, while Qt, PySide, and GTK are apparently already
good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka doesn’t receive enough &lt;a class="reference external" href="/pages/donations.html"&gt;donations&lt;/a&gt;. There is no support from
organizations like e.g. the PSF, which recently backed several projects
by doubling donations given to them.&lt;/p&gt;
&lt;p&gt;I remember talking to a PSF board member during Europython 2013 about
this, and the reaction was fully in line with the Europython 2012
feedback towards me from the dictator. They wouldn’t help Nuitka in any
way before it is successful.&lt;/p&gt;
&lt;p&gt;I have never officially applied for help with funding though with them.
I am going to choose to take pride in that, I suppose.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My quest to find collaborators to Nuitka is largely failing. Aside from
the standalone mode, there have been too little contributions. Hope is
that it will change in the future, once the significant speed gains
arrive. And it might be my fault for not asking for help more, and to
arrange myself with that state of things.&lt;/p&gt;
&lt;p&gt;Not being endorsed by the Python establishment is clearly limiting the
visibility of the project.&lt;/p&gt;
&lt;p&gt;Anyway, things are coming along nicely. When I started out, I was fully
aware that the project is something that I can do on my own if
necessary, and that has not changed. Things are going slower than
necessary though, but that’s probably very typical.&lt;/p&gt;
&lt;p&gt;But you can join now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More “C-ish” code generation&lt;/p&gt;
&lt;p&gt;The next release is going to be more “C-ish” than before, generating
less complex code than before, and removes the previous
optimizations, which were a lot of code, to e.g. detect parameter
variables without &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;This prong of action will have to continue, as it unblocks further
changes that lead to more compatibility and correctness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More SSA usage&lt;/p&gt;
&lt;p&gt;The next release did and will find bugs in the SSA tracing of Nuitka.
It is on purpose only using it, to add &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt; statements to
things it now no longer does. These will trigger in tests or cause
crashes, which then can be fixed.&lt;/p&gt;
&lt;p&gt;We better know that SSA is flawless in its tracking, before we use it
to make optimizations, which then have no chance to assert anything
at all anymore.&lt;/p&gt;
&lt;p&gt;Once we take it to that next level, Nuitka will be able to speed up
some things by more than the factor it basically has provided for 2
years now, and it’s probably going to happen this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More compatibility&lt;/p&gt;
&lt;p&gt;The new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; code makes the dictionary synchronization explicit,
and e.g. now it is optimized away to even check for its need, if we
are in a module or a class, or if it can be known.&lt;/p&gt;
&lt;p&gt;That means faster &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;, but more importantly, a better understood
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;, with improved ability to do &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SSA&lt;/span&gt;&lt;/code&gt; traces for them. Being
able to in-line them, or to know the limit of their impact, as it
will help to know more invariants for that code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When these 3 things come to term, Nuitka will be a huge, huge step ahead
towards being truly a static optimizing compiler (so far it is mostly
only peep hole optimization, and byte code avoidance). I still think of
this as happening this year.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-shaping-up.html" rel="alternate"/>
    <summary>Not much has happened publicly to Nuitka, so it’s time to make a kind of
status post, about the exciting news there is.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2014-10-02T07:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/article-over-nuitka-standalone.html</id>
    <title>Article about Nuitka Standalone Mode</title>
    <updated>2015-01-06T12:46:50+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="article-about-nuitka-standalone-mode"&gt;

&lt;p&gt;There is a really well written article about Nuitka written by Tom
Sheffler.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The article has since become unavailable unfortunately.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It inspired me to finally become clean with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__file__&lt;/span&gt;&lt;/code&gt; attributes in
standalone mode. Currently it points to where your source was when
things were compiled. In the future (in standalone mode, for accelerated
mode that continues to be good), it will point into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.dist&lt;/span&gt;&lt;/code&gt;
folder, so that the SWIG workaround may become no longer necessary.&lt;/p&gt;
&lt;p&gt;Thanks Tom for sharing your information, and good article.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/article-over-nuitka-standalone.html" rel="alternate"/>
    <summary>There is a really well written article about Nuitka written by Tom
Sheffler.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2015-01-06T12:46:50+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-2014.html</id>
    <title>Nuitka progress 2014</title>
    <updated>2015-03-02T07:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-2014"&gt;

&lt;p&gt;Again, not much has happened publicly to Nuitka, except for some
releases, so it’s time to make a kind of status post, about the really
exciting news there is, also looking back at 2014 for Nuitka, and
forward of course.&lt;/p&gt;
&lt;p&gt;I meant to post this basically since last year, but never got around to
it, therefore the 2014 in the title.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-2014" id="id1"&gt;Nuitka progress 2014&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#improved-code-generation" id="id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id5"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cells-for-closure" id="id6"&gt;Cells for Closure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#local-variable-storage" id="id7"&gt;Local Variable Storage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id12"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id13"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id14"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
enabling &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka. There is a component called “constraint collection”, which is
tasked with driving the optimization, and collecting variable traces.&lt;/p&gt;
&lt;p&gt;Based on these traces, optimizations can be made. Having SSA or not, is
(to me) the difference between Nuitka as a compiler, and Nuitka as an
optimizing compiler.&lt;/p&gt;
&lt;p&gt;The news is, SSA has carried the day, and is used throughout code
generation for some time now, and gave minor improvements. It has been
applied to the temporary and local variable values.&lt;/p&gt;
&lt;p&gt;And currently, work is on the way to expand it to module and shared
variables, which can get invalidated quite easily, as soon as unknown
code is executed. An issue there is to identify all those spots
reliably.&lt;/p&gt;
&lt;p&gt;And this spring, we are finally going to see the big jump that is
happening, once Nuitka starts to use that information to propagate
things.&lt;/p&gt;
&lt;p&gt;Still, right now, this code assigns to a local variable, then reads from
it to return. But not much longer.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is going to instantly give gains, and more importantly, will enable
analysis, that leads to avoiding e.g. the creation of function objects
for local functions, being able to in-line, etc.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improved-code-generation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previously, under the title “C-ish”, Nuitka moved away from C++ based
code generation to less C++ based code generated, and more C-ish code.
This trend continues, and has lead to removing more code generation
improvements.&lt;/p&gt;
&lt;p&gt;The important change recently was to remove the usage of the blocking
holdouts, the C++ classes used for local variables are closure taking,
and release, and move those to be done manually.&lt;/p&gt;
&lt;p&gt;This enabled special code generation for in-place operations, which are
the most significant improvements of the upcoming release. These were
held back on, as with C++ destructors doing the release, it’s
practically impossible to deal with values suddenly becoming illegal.
Transfer of object ownership needs to be more fluid than could be
presented to C++ objects.&lt;/p&gt;
&lt;p&gt;Currently, this allows to speed up string in-place operations, which
very importantly then, can avoid to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;memcpy&lt;/span&gt;&lt;/code&gt; large values potentially.
And this is about catching up to CPython in this regard. After that, we
will likely be able to expand it to cases where CPython could never do
it, e.g. also &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; objects&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The scalability of Nuitka depends much on generated code size. With it
being less stupid, the generated code is now not only faster, but
definitely smaller, and with more optimization, it will only become more
practical.&lt;/p&gt;
&lt;p&gt;Removing the many C++ classes already gave the backend compiler an
easier time. But we need to do more, to e.g. have generic parameter
parsing, instead of specialized per function, and module exclusive
constants should not be pre-created, but in the module body, when they
are used.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is not a whole lot to gain in the compatibility domain anymore.
Nothing important certainly. But there are these minor things.&lt;/p&gt;
&lt;section id="cells-for-closure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Cells for Closure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;However, since we now use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyCell&lt;/span&gt;&lt;/code&gt; objects for closure, we could start
and provide a real &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__closure__&lt;/span&gt;&lt;/code&gt; value, that could even be writable.
We could start supporting that easily.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="local-variable-storage"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Local Variable Storage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Currently, local variables use stack storage. Were we to use function
object or frame object attached storage, we could provide frame locals
that actually work. This may be as simple as to put those in an array on
the stack and use the pointer to it.&lt;/p&gt;
&lt;p&gt;Suddenly locals would become writable. I am not saying this is useful,
just that it’s possible to do this.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The work on automated performance graphs has made progress, and they are
supposed to show up on &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of which
makes it basically useless to everybody except me. And even harder for
me than necessary.&lt;/p&gt;
&lt;p&gt;At least it’s updated to latest Nikola, and uses PyGal for the graphics
now, so it’s easier to expand. The plan here, is to integrate with
special pages from a Wiki, making it easy to provide comments.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka is pretty good, and as usual it continued
to improve only.&lt;/p&gt;
&lt;p&gt;The major improvements came from handling case collisions between
modules and packages. One can have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Module.py&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;module/__init__.py&lt;/span&gt;&lt;/code&gt; and they both are expected to be different, even
on Windows, where filenames are case insensitive.&lt;/p&gt;
&lt;p&gt;So, giving up on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;implib&lt;/span&gt;&lt;/code&gt; and similar, we finally have our own code to
scan in a compatible way the file system, and make these determinations,
whereas library code exposing functionality, doesn’t handling all things
in really the proper way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives some, bit not quite enough &lt;a class="reference external" href="/pages/donations.html"&gt;donations&lt;/a&gt;. There is no support from
organizations like e.g. the PSF, and it seems I better not hold my
breath for it. I will travel to Europython 2015, and would ask you to
support me with that, it’s going to be expensive.&lt;/p&gt;
&lt;p&gt;In 2014, with donations, I bought a “Cubox i4-Pro”, which is an ARM
based machine with 4 cores, and 2GB RAM. Works from flash, and with the
eSATA disk attached, it works nice for continuous integration, which
helps me a lot to deliver extremely high quality releases. It’s pretty
nice, except that when using all 4 cores, it gets too hot. So “systemd”
to the rescue and just limited the Buildbot slave’s service to use 3
cores of CPU maximum and now it runs stable.&lt;/p&gt;
&lt;p&gt;Also with donations I bought a Terrabyte SSD, which I use on the desktop
to speed up hosting the virtual machines, and my work in general.&lt;/p&gt;
&lt;p&gt;And probably more important, the host of “nuitka.net” became a real
machine with real hardware last year, and lots more RAM, so I can spare
myself of optimizing e.g. MySQL for low memory usage. The monthly fee of
that is substantial, but supported from your donations. Thanks a lot!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Things are coming along nicely. When I started out, I was fully aware
that the project is something that I can do on my own if necessary, and
that has not changed. Things are going slower than necessary though, but
that’s probably very typical.&lt;/p&gt;
&lt;p&gt;But you can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;p&gt;Nuitka is about to make break through progress. And you can be a part of
it. Now.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More “C-ish” code generation&lt;/p&gt;
&lt;p&gt;The next release is going to be more “C-ish” than before, and we can
start to actually migrate to really “C” language. You can help out if
you want to, this is fairly standard cleanups. Just pop up on the
mailing list and say so.&lt;/p&gt;
&lt;p&gt;This prong of action is coming to a logical end. The “C-ish” project,
while not planned from the outset, turns out to be a full success.
Initially, I would not have started Nuitka, should I have faced the
full complexity of code generation that there is now. So it was good
to start with “C++”, but it’s a better Nuitka now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More SSA usage&lt;/p&gt;
&lt;p&gt;The previous releases consolidated on SSA. A few missing
optimizations were found, because SSA didn’t realize things, which
were then highlighted by code generation being too good, e.g. not
using exception variables.&lt;/p&gt;
&lt;p&gt;We seem to have an SSA that can be fully trusted now, and while it
can be substantially improved (e.g. the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try/finally&lt;/span&gt;&lt;/code&gt; removes all
knowledge, although it only needs to do a partial removing of
knowledge for the finally block, not for afterwards at all), it will
already allow for many nice things to happen.&lt;/p&gt;
&lt;p&gt;Once we take it to that next level, Nuitka will be able to speed up
some things by much more than the factor it basically has provided
for 2 years now, and it’s probably going to happen before summer, or
so I hope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Value propagation&lt;/p&gt;
&lt;p&gt;Starting out with simple cases, Nuitka will forward propagate
variable values, and start to eliminate variable usages entirely,
where they are not needed.&lt;/p&gt;
&lt;p&gt;That will make many things much more compact, and faster at run time.
We will then try and build “gates” for statements that they cannot
pass, so we can e.g. optimize constant things outside of loops, that
kind of thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When these 3 things come to term, Nuitka will make a huge step ahead. I
look forward to demoing function call in-lining, or at least avoiding
the argument parsing at EuroPython 2015, making direct calls, which will
be way faster than normal calls.&lt;/p&gt;
&lt;p&gt;From then on, a boatload of work remains. The infrastructure in place,
still there is going to be plenty of work to optimize more and more
things conretely.&lt;/p&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-2014.html" rel="alternate"/>
    <summary>Again, not much has happened publicly to Nuitka, except for some
releases, so it’s time to make a kind of status post, about the really
exciting news there is, also looking back at 2014 for Nuitka, and
forward of course.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-03-02T07:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-spring-2015.html</id>
    <title>Nuitka Progress in Spring 2015</title>
    <updated>2015-04-30T16:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-in-spring-2015"&gt;

&lt;p&gt;It’s absolutely time to speak about what’s going on with Nuitka, there
have been a few releases, and big things are going to happen now. The
ones I have always talked of, it’s happening now.&lt;/p&gt;
&lt;p&gt;I absolutely prefer to talk of things when they are completed, that is
why I am shy to make these kinds of postings, but this time, I think
it’s warranted. The next couple of releases are going to be very
different.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-in-spring-2015" id="id1"&gt;Nuitka Progress in Spring 2015&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id3"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id4"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-5" id="id5"&gt;Python 3.5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cells-for-closure" id="id6"&gt;Cells for Closure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#importing-enhancements" id="id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#debian-stable" id="id12"&gt;Debian Stable&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id13"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#europython-2015" id="id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id15"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id16"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
increasing &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka.&lt;/p&gt;
&lt;p&gt;The component that works on this, is now called “trace collection”, and
does the major driving part for optimization. It collects “variable
traces” and puts them together into “global” forms as well.&lt;/p&gt;
&lt;p&gt;Based on these traces, optimizations can be made. Having SSA or not, is
(to me) the difference between Nuitka as a mere compiler, and Nuitka as
an optimizing compiler.&lt;/p&gt;
&lt;p&gt;The major news is that factory versions of Nuitka now do this in serious
ways, propagating values forward, and we also are close to eliminating
dead assignments, some of which become dead by being having been forward
propagated.&lt;/p&gt;
&lt;p&gt;So we can now finally see that big step, jump really, happening, and
Nuitka does now do some pretty good static optimization, at least
locally.&lt;/p&gt;
&lt;p&gt;Still, right now, this trivial code assigns to a local variable, then
reads from it to return. But not for much longer.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is going to instantly give performance gains, and more importantly,
will enable analysis, that leads to avoiding e.g. the creation of
function objects for local functions, becoming able to in-line, etc.&lt;/p&gt;
&lt;p&gt;This is major excitement to me. And I cannot wait to have the releases
that do this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The focus has also been lately, to reduce Nuitka’s own memory usage. It
has gone down by a large factor, often by avoiding cyclic dependencies
in the data structures, that the garbage collector of Python failed to
deal with properly.&lt;/p&gt;
&lt;p&gt;The scalability of Nuitka also depends much on generated code size. With
the optimization become more clever, less code needs to be generated,
and that will help a lot. On some platforms, MSVC most notably, it can
be really slow, but it’s noteworthy that Nuitka works not just with 2008
edition, but with the latest MSVC, which appears to be better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was not a whole lot to gain in the compatibility domain anymore.
Nothing important certainly. But there are import changes.&lt;/p&gt;
&lt;section id="python-3-5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Python 3.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next release has changes to compile and run the Python3.4 test suite
successfully. Passing here means, to pass/fail in the same way as does
the uncompiled Python. Failures are of course expected, and a nice way
of having coverage for exception codes.&lt;/p&gt;
&lt;p&gt;The new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;&lt;/span&gt;&lt;/code&gt; operator is not supported yet. I will wait with that for
things to stabilize. It’s currently only an alpha release.&lt;/p&gt;
&lt;p&gt;However, Nuitka has probably never been this close to supporting a new
Python version at release time. And since 3.4 was such a heavy drain,
and still not perfectly handled (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;super&lt;/span&gt;&lt;/code&gt; still works like it’s 3.3
e.g.), I wanted to know what is coming a bit sooner.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cells-for-closure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Cells for Closure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We now provide a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__closure__&lt;/span&gt;&lt;/code&gt; value for compiled functions too. These
are not writable in Python, so it’s only a view. Having moved storage
into the compiled function object, that was easy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="importing-enhancements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The the past couple of releases, the import logic was basically
re-written with compatibility much increased. The handling of file case
during import, multiple occurrences in the path, and absolute import
future flags for relative imports has been added.&lt;/p&gt;
&lt;p&gt;It’s mainly the standalone community that will have issues, when just
one of these imports doesn’t find the correct thing, but picking the
wrong one will of course have seriously bad impacts on compile time
analysis too. So once we do cross module optimization, this must be rock
solid.&lt;/p&gt;
&lt;p&gt;I think we have gotten there, tackling these finer details now too.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka, users don’t know what to expect regarding the speed of their
code after compilation through Nuitka, neither now nor after type
inference (possibly hard to guess). Nuitka does a bunch of optimizations
for some constructs pretty heavily, but weak at others. But how much
does that affect real code?&lt;/p&gt;
&lt;p&gt;There may well be no significant gain at all for many people, while
there is a number for PyStone that suggests higher. The current and
future versions possibly do speed up but the point is that you cannot
tell if it is even worth for someone to try.&lt;/p&gt;
&lt;p&gt;Nuitka really has to catch up here. The work on automated performance
graphs has some made progress, and they are supposed to show up on
&lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of
which makes it basically useless to everybody except me. And even
harder for me than necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;However, as a glimpse of what will happen when we in-line functions,
take a look at the case, where we already eliminate parameter parsing
only, and make tremendous speedups:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-calllambdaexpressiondirectly.html"&gt;Lambda call construct case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Right now (the graph gets automatic updates with each change), what you
should see, is that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; branch is 20 times faster than CPython
for that very specific bit of code. That is where we want to be, except
that with actually in-line, this will of course be even better.&lt;/p&gt;
&lt;p&gt;It’s artificial, but once we can forward propagate local function
creations, it will apply there too. The puzzle completes.&lt;/p&gt;
&lt;p&gt;But we also need to put real programs and use cases to test. This may
need your help. Let me know if you want to.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka is pretty good, and as usual it continued
to improve only.&lt;/p&gt;
&lt;p&gt;Nothing all that important going on there, except the work on a plug-in
framework, which is under development, and being used to handle e.g.
PyQt plug-ins, or known issues with certain packages.&lt;/p&gt;
&lt;p&gt;The importing improvements already mentioned, have now allowed to cover
many more libraries successfully than before.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="debian-stable"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Debian Stable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka is now part of Debian stable, aka Jessie. Debian and Python are
the two things closest to my heart in the tech field. You can imagine
that being an upstream worthy of inclusion into Debian stable is an
import milestone to Nuitka for me.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives the occasional &lt;a class="reference external" href="/pages/donations.html"&gt;donation&lt;/a&gt; and those make me very happy.
As there is no support from organization like the PSF, I am all on my
own there.&lt;/p&gt;
&lt;p&gt;This year I likely will travel to Europython 2015, and would ask you to
support me with that, it’s going to be expensive.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="europython-2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have plans to present Nuitka’s function in-lining there, real stuff,
on a fully and functional compiler that works as a drop-in replacement.&lt;/p&gt;
&lt;p&gt;Not 100% sure if I can make it by the time, but things look good.
Actually so far I felt ahead of the plan, but as you know, this can
easily change at any point. But Nuitka stands on very stable grounds
code wise.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Things are coming along nicely. When I started out, I was fully aware
that the project is something that I can do on my own if necessary, and
that has not changed. Things are going slower than necessary though, but
that’s probably very typical.&lt;/p&gt;
&lt;p&gt;But you can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;p&gt;Nuitka is about to make break through progress. And you can be a part of
it. Now.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More SSA usage&lt;/p&gt;
&lt;p&gt;The next releases are going to be all about getting this done.&lt;/p&gt;
&lt;p&gt;Once we take it to that next level, Nuitka will be able to speed up
some things by much more than the factor it basically has provided
for 2 years now, and it’s probably going to happen long before
EuroPython 2015.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function in-lining&lt;/p&gt;
&lt;p&gt;For locally declared functions, it should become possible to avoid
their creation, and make direct calls instead of ones that use
function objects and expensive parameter handling.&lt;/p&gt;
&lt;p&gt;The next step there of course is to not only bind the arguments to
the function signature, but then also to in-line and potentially
specialize the function code. It’s my goal to have that at EuroPython
2015 in a form ready to show off.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When these 2 things come to term, Nuitka will have made really huge
steps ahead and laid the ground for success.&lt;/p&gt;
&lt;p&gt;From then on, a boatload of work remains. The infrastructure in place,
still there is going to be plenty of work to optimize more and more
things conretely, and to e.g. do type inference, and generate different
codes for booleans, ints or float values.&lt;/p&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster. Nuitka will become more and more important only.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-spring-2015.html" rel="alternate"/>
    <summary>It’s absolutely time to speak about what’s going on with Nuitka, there
have been a few releases, and big things are going to happen now. The
ones I have always talked of, it’s happening now.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-04-30T16:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-summer-2015.html</id>
    <title>Nuitka Progress in Summer 2015</title>
    <updated>2015-10-05T08:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-in-summer-2015"&gt;

&lt;p&gt;A long time has passed again without me speaking about what’s going on
with Nuitka, and that although definitely a lot has happened. I would
contend it’s even &lt;em&gt;because&lt;/em&gt; so much is going on.&lt;/p&gt;
&lt;p&gt;I also am shy to make public postings about unfinished stuff it seems,
but it’s long overdue, so much important and great stuff has happened.
We are in the middle of big things with the compiler and there is a lot
of great achievement.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-in-summer-2015" id="id1"&gt;Nuitka Progress in Summer 2015&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#function-inlining" id="id3"&gt;Function Inlining&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id5"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-5" id="id6"&gt;Python 3.5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#importing-enhancements" id="id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id12"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#europython-2015" id="id13"&gt;EuroPython 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id14"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id15"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
increasing &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka.&lt;/p&gt;
&lt;p&gt;Now it’s there. The current pre-release just uses it. There were many
things to consider before enabling it, and always a next thing to be
found that was needed. Often good changes to Nuitka, it was also
annoying the hell out of me at times.&lt;/p&gt;
&lt;p&gt;But basically now the forward propagation of variables is in place, with
some limitations that are going to fall later.&lt;/p&gt;
&lt;p&gt;So the current release, soon to be replaced, still doesn’t optimize this
code as well as possible:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But starting with the next release, the value of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; is forward
propagated (also in way more complex situations), and that’s a serious
milestone for the project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="function-inlining"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Function Inlining&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When submitting my talk to EuroPython 2015, I was putting a lot of
pressure on me by promising to demo that. And I did. It was based on the
SSA code that only now became completely reliable, but otherwise very
few few other changes, and it just worked.&lt;/p&gt;
&lt;p&gt;The example I used is this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# can be inlined&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, the function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;g&lt;/span&gt;&lt;/code&gt; is forward propagated to a direct call, as are
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;x&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;y&lt;/span&gt;&lt;/code&gt; into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;return&lt;/span&gt;&lt;/code&gt; statement after making the in-line,
making this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Currently function in-lining is not yet activated by default, for this I
am waiting for a release cycle to carry the load of SSA in the wild. As
you probably know I usually tend to be conservative and to not make too
many changes at once.&lt;/p&gt;
&lt;p&gt;And as this works for local functions only yet, it’s not too important
yet either. This will generally become relevant once we have this
working across modules and their globally defined functions or methods.
This will be a while until Nuitka gets there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having got Nuitka’s memory usage under control, it turned out that there
are files that can trigger Python recursion &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RuntimeError&lt;/span&gt;&lt;/code&gt; exception
when using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; module to build the Nuitka internal tree. People
really have code with many thousands of operations to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;So, Nuitka here learned to include whole modules as bytecode when it is
too complex as there is no easy way to expand the stack on Windows at
least. That is kind of a limitation of CPython itself I didn’t run into
so far, and rather very annoying too.&lt;/p&gt;
&lt;p&gt;The scalability of Nuitka also depends much on generated code size. With
the optimization become more clever, less code is generated, and that
trend will continue as more structural optimization are applied.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Very few things are possible here anymore. For the tests, in full
compatibility mode, even more often the less good line number is used.&lt;/p&gt;
&lt;p&gt;Also the plug-in work is leading to improved compatibility with Qt
plugins of PySide and PyQt. Or another example is the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; module that on Windows is now supposed to fork
compiled code too.&lt;/p&gt;
&lt;section id="python-3-5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Python 3.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next release has experimental support for Python 3.5, with the
notable exception that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt;, these do not yet work.
It passes the existing test suite for CPython3.4 successfully. Passing
here means, to pass or fail in the same way as does the uncompiled
Python. Failures are of course expected, as details change, and a nice
way of having coverage for exception codes.&lt;/p&gt;
&lt;p&gt;The new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;&lt;/span&gt;&lt;/code&gt; operator is now supported. As the stable release of
Python3.5 was made recently, there is now some pressure on having full
support of course.&lt;/p&gt;
&lt;p&gt;I am not sure, if you can fully appreciate the catch up game to play
here. It will take a compiled coroutine to support these things
properly. And that poses lots of puzzles to solve. As usual I am binding
these to internal cleanups so it becomes simpler.&lt;/p&gt;
&lt;p&gt;In the case of Python3.5, the single function body node type that is
used for generators, class bodies, and function, is bound to be replaced
with a base class and detailing instances, instead of one thing for them
all, then with coroutines added.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="importing-enhancements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A while ago, the import logic was basically re-written with
compatibility much increased. Then quite some issues were fixed. I am
not sure, but some of the fixes have apparently also been regressions at
times, with the need for other fixes now.&lt;/p&gt;
&lt;p&gt;So it may have worked for you in the past, but you might have to report
new found issues.&lt;/p&gt;
&lt;p&gt;It’s mainly the standalone community that encounters these issues, when
just one of these imports doesn’t find the correct thing, but picking
the wrong one will of course have seriously bad impacts on compile time
analysis too. So once we do cross module optimization, this must be rock
solid.&lt;/p&gt;
&lt;p&gt;I think we have gotten a long way there, but we still need to tackle
some more fine details.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I also presented this weak point to EuroPython 2015 and my plan on how
to resolve it. And low and behold, turns out the PyPy people had already
developed a tool that will be usable for the task and to present to the
conference.&lt;/p&gt;
&lt;p&gt;So basically I was capable of doing kind of a prototype of comparative
benchmark during EuroPython 2015 already. I will need to complete this.
My plan was to get code names of functions sorted out in a better way,
to more easily match the Nuitka C function names with Python functions
in an automatic way. That matching is the hard part.&lt;/p&gt;
&lt;p&gt;So that is already progressing, but I could need help with that
definitely.&lt;/p&gt;
&lt;p&gt;Nuitka really has to catch up with benchmarks generally.. The work on
automated performance graphs has made more progress, and they are
supposed to show up on &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;,
or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of
which makes it basically useless to everybody except me. And even
harder for me than necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As a glimpse of what is possible with in-lined functions, look at this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-calllambdaexpressiondirectly.html"&gt;Lambda call construct case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But we also need to put real programs and use cases to test. This may
need your help. Let me know if you want to. It takes work on taking the
data, and merging them into one view, linking it with the source code
ideally. That will be the tool you can just use on your own code.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka was pretty good, and continued to improve
further, now largely with the help of plug-ins.&lt;/p&gt;
&lt;p&gt;I now know that PyGTK is an issue and will need a plug-in to work. Once
the plug-in interface is public, I hope for more outside contributions
here.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives the occasional &lt;a class="reference external" href="/pages/donations.html"&gt;donation&lt;/a&gt; and those make me very happy.
As there is no support from organization like the PSF, I am all on my
own there.&lt;/p&gt;
&lt;p&gt;This year I traveled to Europython 2015, I needed a new desktop computer
after burning the old one through with CI tests, the website has running
costs, and so on. That is pretty hefty money. It would be sweet if aside
of my free time it wouldn’t also cost me money.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="europython-2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;EuroPython 2015&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was a blast. Meeting people who knew Nuitka but not me was a
regular occurrence. And many people well appreciate my work. It felt
much different than the years before.&lt;/p&gt;
&lt;p&gt;I was able to present Nuitka’s function in-lining indeed there, and this
high goal that I set myself, quite impressed people. My talk went very
well, I am going to post a link separately in another post.&lt;/p&gt;
&lt;p&gt;Also I made many new contacts, largely with the scientific community. I
hope to find work with data scientists in the coming years. More amd
more it looks like my day job should be closer to Nuitka and my
expertise in Python.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka is making break through progress. And you can be a part of it.
Now.&lt;/p&gt;
&lt;p&gt;You can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Function in-lining&lt;/p&gt;
&lt;p&gt;For locally declared functions, it should become possible to avoid
their creation, and make direct calls instead of ones that use
function objects and expensive parameter handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nested frames&lt;/p&gt;
&lt;p&gt;One result of in-lining will be nested frames still present for
exceptions to be properly annotated, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;locals&lt;/span&gt;&lt;/code&gt; giving different
sets of locals and so on.&lt;/p&gt;
&lt;p&gt;Some cleanup of these will be needed for code generation and SSA to
be able to attach variables to some sort of container, and for a
function to be able to reference different sets of these.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Inference&lt;/p&gt;
&lt;p&gt;With SSA in place, we really can start to recognize types, and treat
things that work something assigned from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[]&lt;/span&gt;&lt;/code&gt; different, and with
code special to these.&lt;/p&gt;
&lt;p&gt;That’s going to be a lot of work. For &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; there
are very important use cases, where the code can be much better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shape Analyisis&lt;/p&gt;
&lt;p&gt;My plan for types, is not to use them, but the more general shapes,
things that will be more prevalent than actual type information in a
program. In fact the precise knowledge will be rare, but more often,
we will just have a set of operations performed on a variable, and be
able to guess from there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python 3.5 new features&lt;/p&gt;
&lt;p&gt;The coroutines are a new type, and currently it’s unclear how deep
this is tied into the core of things, i.e. if a compile coroutine can
be a premier citizen immediately, or if that needs more work. I hope
it just takes for the code object to have the proper flag. But there
could be stupid type checks, we shall see.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plug-ins&lt;/p&gt;
&lt;p&gt;Something I wish I could have shown at EuroPython was plug-ins to
Nuitka. It is recently becoming more complete, and some demo plug-ins
for say Qt plugins, or multiprocessing, are starting to work. The API
will need work and of course documentation. Hope is for this to
expand Nuitka’s reach and appeal to get more contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster. Nuitka will become more and more important only.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-summer-2015.html" rel="alternate"/>
    <summary>A long time has passed again without me speaking about what’s going on
with Nuitka, and that although definitely a lot has happened. I would
contend it’s even because so much is going on.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-10-05T08:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-podcast-init.html</id>
    <title>Nuitka on Podcast __init__</title>
    <updated>2015-10-25T11:02:56+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-on-podcast-init"&gt;

&lt;p&gt;So, if you want to get to know Nuitka or me, there is a really good
interview from the popular podcast “__init__” online.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pythonpodcast.com/episode-28-kay-hayen-on-nuitka/"&gt;Kay Hayen on Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it’s very good at explaining things, putting it into
perspective, history, future, and generally getting to know what kind of
person I am.&lt;/p&gt;
&lt;p&gt;So, this is probably as good as it ever gets. So please share, like and
go ahead and spread it in this social media craziness that you use all
day.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-podcast-init.html" rel="alternate"/>
    <summary>So, if you want to get to know Nuitka or me, there is a really good
interview from the popular podcast “__init__” online.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2015-10-25T11:02:56+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-winter-2015.html</id>
    <title>Nuitka Progress in 2015</title>
    <updated>2016-01-29T08:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-in-2015"&gt;

&lt;p&gt;For quite a bit, there have been no status posts, not for lack of news,
but a lot has happened indeed. I just seem to post a &lt;em&gt;lot&lt;/em&gt; more to the
mailing list than I do here. Especially about unfinished stuff, which is
essentially for a project like Nuitka everything that’s going on.&lt;/p&gt;
&lt;p&gt;Like I previously said, I am shy to make public postings about
unfinished stuff and that’s going to continue. But I am breaking it, to
keep you up to date with where Nuitka has been going lately.&lt;/p&gt;
&lt;p&gt;And with release focuses, I have been making some actual changes that I
think are worth talking about.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-in-2015" id="id1"&gt;Nuitka Progress in 2015&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#function-inlining" id="id3"&gt;Function Inlining&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#parameter-parsing" id="id5"&gt;Parameter Parsing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#variable-error-messages" id="id6"&gt;Variable Error Messages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#code-objects" id="id7"&gt;Code Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization" id="id8"&gt;Optimization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id9"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id10"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id11"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id12"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id13"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#europython-2015" id="id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id15"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id16"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#videos" id="id17"&gt;Videos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id18"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id19"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#release-focus" id="id20"&gt;Release Focus&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#summary" id="id21"&gt;Summary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The SSA using release has been made last summer. Recent releases have
lifted more and more restrictions on where and now it is applied and
made sure the internal status is consistent and true. And that trend is
going to continue even more.&lt;/p&gt;
&lt;p&gt;For shared variables (closure variables and module variables), Nuitka is
still too conservative to make optimization. Code does annotate value
escapes, but it’s not yet trusting it. The next releases will focus on
lifting that kind of restriction, and for quality of result, that will
mean making a huge jump ahead once that works, so module variables used
locally a lot will become even faster to use then and subject to static
optimization too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="function-inlining"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Function Inlining&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When doing my talk to EuroPython 2015, I was demoing it that, and
indeed, what a break through. The circumstances under which it is done
are still far too limited though. Essentially that ability is there, but
will not normally be noticeable yet due to other optimization, e.g.
functions are most often module variables and not local to the using
function.&lt;/p&gt;
&lt;p&gt;More code generation improvements will be needed to be able to inline
functions that might raise an exception. Also the “cost” of inlining a
function is also very much an unsolved issue. It will become the focus
again, once the SSA use as indicated above expands to module variables,
as then inlining other things than local functions will be possible too.&lt;/p&gt;
&lt;p&gt;So there is a lot of things to do for this to really make a difference
to your programs. But it’s still great to have that part solved so far.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;section id="parameter-parsing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Parameter Parsing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recent releases have replaced some of the oldest code of Nuitka, the one
that generated special argument parsing for each function individually,
now replaced with generic code, that surprisingly is often even faster,
although quick entry points were tough to beat.&lt;/p&gt;
&lt;p&gt;That gives the C backend compiler a much easier time. Previously 3 C
functions were created per Python level function, two of which could get
really big with many arguments, and these are no more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="variable-error-messages"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Variable Error Messages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Something similar was going on with variable error messages. Each had
their exception value pre-computed and created at module load time. Most
of these are of course unused. This has been replaced with code that
generates it on the fly, resulting in a lot less constants code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="code-objects"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Code Objects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And another thing was to look after code objects, of which there often
were two for each Python level function. The one used or the frame
during run time and the one used in the function object, differered
often, sometimes by small things like flags or local variable names.&lt;/p&gt;
&lt;p&gt;That of course was just the result of not passing that along, but
created cached objects with hopefully the same options, but that not
being true.&lt;/p&gt;
&lt;p&gt;Resolving that, and sharing the code object used for creation and then
the frame is gives less complex C code too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Optimization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The scalability of Nuitka also depends much on generated code size. With
the optimization become more clever, less code is generated, and that
trend will continue as more structural optimization are applied.&lt;/p&gt;
&lt;p&gt;Every time e.g. an exception is identified to not happen, this removes
the corresponding error exits from the C code, which then makes it
easier for the C compiler. Also more specialized code as we now have or
dictionaries, is often less complex to it.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Important things have happened here. Full compatibility mode is planned
to not be the default anymore in upcoming releases, but that will only
mean to not be stupid compatible, but to e.g. have more complete error
messages than CPython, more correct line numbers, or for version
differences, the best Python version behaviour.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The stable release has full support for Python 3.5, including the new
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt; functions. So recent releases can pronounce it
as fully supported which was quite a feat.&lt;/p&gt;
&lt;p&gt;I am not sure, if you can fully appreciate the catch up game needed to
play here. CPython clearly implements a lot of features, that I have to
emulate too. That’s going to repeat for every major release.&lt;/p&gt;
&lt;p&gt;The good news is that the function type of Nuitka is now specialized to
the generators and classes, and that was a massive cleanup of its core
that was due anyway. The generators have no more their own function
creation stuff and that has been helpful with a lot of other stuff.&lt;/p&gt;
&lt;p&gt;Another focus driven from Python3, is to get ahead with type shape
tracing and type inference of dictionary, and value tracing. To fully
support Python3 classes, we need to work on something that is a
dictionary a-like, and that will only ever be efficient if we have that.
Good news is that the next release is making progress there too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I also presented this weak point to EuroPython 2015 and my plan on how
to resolve it. Unfortunately, nothing really happened here. My plan is
still to use what the PyPy people have developed as vmprof.&lt;/p&gt;
&lt;p&gt;So that is not progressing, and I could need help with that definitely.
Get in contact if you think you can.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka was pretty good, and continued to improve
further, but I don’t care much.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="europython-2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was a blast. Meeting people who knew Nuitka but not me was a
regular occurrence. And many people well appreciate my work. It felt
much different than the years before.&lt;/p&gt;
&lt;p&gt;I was able to present Nuitka’s function in-lining indeed there, and this
high goal that I set myself, quite impressed people.&lt;/p&gt;
&lt;p&gt;Also I made many new contacts, largely with the scientific community. I
hope to find work with data scientists in the coming years. More amd
more it looks like my day job should be closer to Nuitka and my
expertise in Python.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives the occasional &lt;a class="reference external" href="/pages/donations.html"&gt;donation&lt;/a&gt; and those make me very happy.
As there is no support from organization like the PSF, I am all on my
own there.&lt;/p&gt;
&lt;p&gt;This year I want to travel to Europython 2016. It would be sweet if
aside of my free time it wouldn’t also cost me money. So please consider
donating some more, as these kind of events are really helpul to Nuitka.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka is making more and more break through progress. And you can be a
part of it. Now.&lt;/p&gt;
&lt;p&gt;You can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="videos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Videos&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a Youtube channel of mine with &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLKO58t9ADuF6o_Dcmve1DXpUkUEEVvDux"&gt;all the videos of Nuitka so far&lt;/a&gt;
and I have been preparing myself with proper equipment to make Videos of
Nuitka, but so far nothing has come out of that.&lt;/p&gt;
&lt;p&gt;I do however really want to change that. Let’s see if it happens.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Twitter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have started to use &lt;a class="reference external" href="https://twitter.com/kayhayen"&gt;my Twitter account&lt;/a&gt; on occasions. You are welcome to follow
me there. I will highlight interesting stuff there.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Type Inference&lt;/p&gt;
&lt;p&gt;With SSA in place, Nuitka starts to recognize types, and treat things
that work something assigned from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{}&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; built-in with
special nodes and code.&lt;/p&gt;
&lt;p&gt;That’s going to be a lot of work. For &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; there
are very important use cases, where the code can be much better. But
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; is the hardest case, and to get the structure of shape
tracing right, we are going there first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shape Analyisis&lt;/p&gt;
&lt;p&gt;The plan for types, is not to use them, but the more general shapes,
things that will be more prevalent than actual type information in a
program. In fact the precise knowledge will be rare, but more often,
we will just have a set of operations performed on a variable, and be
able to guess from there.&lt;/p&gt;
&lt;p&gt;Shape analysis will begin though with concrete types like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt;.
The reason is that some re-formulations like Python3 classes should
not use locals, but dictionary accesses throughout for full
compatibility. Tracing that correctly to be effectively the same code
quality will allow to make that change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plug-ins&lt;/p&gt;
&lt;p&gt;Something I wish I could have shown at EuroPython was plug-ins to
Nuitka. It has become more complete, and some demo plug-ins for say
Qt plugins or multiprocessing, are starting to work, but it’s not
progressing recently. The API will need work and of course
documentation. Hope is for this to expand Nuitka’s reach and appeal
to get more contributors.&lt;/p&gt;
&lt;p&gt;It would be sweet, if there were any takers, aiming to complete these
things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nested frames&lt;/p&gt;
&lt;p&gt;One result of in-lining will be nested frames still present for
exceptions to be properly annotated, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;locals&lt;/span&gt;&lt;/code&gt; giving different
sets of locals and so on.&lt;/p&gt;
&lt;p&gt;Some cleanup of these will be needed for code generation and SSA to
be able to attach variables to some sort of container, and for a
function to be able to reference different sets of these.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster. Nuitka will become more and more important only.
And with your help, things will be there sooner.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="release-focus"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Release Focus&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One thing I have started recently, is to make changes to Nuitka focused
to just one goal, and to only deal with the rare bug in other fields,
but not much else at all. So instead of across the board improvements in
just about everything, I have e.g. in the last release added type
inference for dictionaries and special nodes and their code generation
for dictionary operations.&lt;/p&gt;
&lt;p&gt;This progresses Nuitka in one field. And the next release then e.g. will
only focus on making the performance comparison tool, and not continue
much in other fields.&lt;/p&gt;
&lt;p&gt;That way, more “flow” is possible and more visible progress too. As an
example of this, these are the focuses of last releases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Full Python 3.5 on a clean base with generators redone so that
coroutines fit in nicely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalability of C compilation with argument parsing redone&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next release soon: Shape analysis of subscript usages and
optimization to exact dictionaries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next release thereafter: Comparison benchmarking (vmprof, resolving C
level function identifiers easier)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other focuses will also happen, but that’s too far ahead. Mostly like
some usability improvements will be the focus of a release some day.
Focus is for things that are too complex to attack as a side project,
and therefore never happen although surely possible.&lt;/p&gt;
&lt;p&gt;Digging into Python3.5 coroutines and their semantics was hard enough,
and the structural changes needed to integrate them properly with not
too much special casing, but rather removing existing special cases
(generator functions) was just too much work to ever happen while also
doing other stuff.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I am very excited about Nuitka. It feels like the puzzle is coming
together finally, with type inference becoming a real thing. And should
dictionaries be sorted out, the real important types, say &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; for
scientific use cases, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; for others, will be easy to
make.&lt;/p&gt;
&lt;p&gt;With this, and then harder import association (knowing what other
modules are), and module level SSA tracing that can be trusted, we can
finally expect Nuitka to be generally fast and deserve to be called a
compiler.&lt;/p&gt;
&lt;p&gt;That will take a while, but it’s likely to happen in 2016. Let’s see if
I will get the funding to go to EuroPython 2016, that would be great.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-winter-2015.html" rel="alternate"/>
    <summary>For quite a bit, there have been no status posts, not for lack of news,
but a lot has happened indeed. I just seem to post a lot more to the
mailing list than I do here. Especially about unfinished stuff, which is
essentially for a project like Nuitka everything that’s going on.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="europython" label="europython"/>
    <published>2016-01-29T08:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-1.html</id>
    <title>Nuitka this week #1</title>
    <updated>2018-07-27T07:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-1"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-1" id="id1"&gt;Nuitka this week #1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#new-series-rationale" id="id2"&gt;New Series Rationale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#planned-mode" id="id3"&gt;Planned Mode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#locals-dict" id="id4"&gt;Locals Dict&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nodes-need-finalization" id="id5"&gt;Nodes need Finalization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#impact-on-memory-usage" id="id6"&gt;Impact on Memory Usage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#type-hints-question" id="id7"&gt;Type Hints Question&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-7" id="id8"&gt;Python 3.7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#coroutine-compatibility" id="id9"&gt;Coroutine Compatibility&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#pylint-troubles" id="id10"&gt;PyLint Troubles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#todo-solving" id="id11"&gt;TODO solving&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#issues-encountered" id="id12"&gt;Issues Encountered&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id13"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="new-series-rationale"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;New Series Rationale&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think I tend to prefer coding over communication too much. I think I
need to make more transparent what I am doing. Also things, will be
getting exciting continuously for a while now.&lt;/p&gt;
&lt;p&gt;I used to status report posts, many years ago, every 3 months or so, and
that was nice for me also to get an idea of what changed, but I stopped.
What did not happen, was to successfully engage other people to
contribute.&lt;/p&gt;
&lt;p&gt;This time I am getting more intense. I will aim to do roughly weekly or
bi-weekly reports, where I highlight things that are going on, newly
found issues, hotfixes, all the things Nuitka.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="planned-mode"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Planned Mode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I will do it this fashion. I will write a post to the mailing list,
right about wednesday every week or so. I need to pick a day. I am
working from home that day, saving me commute time. I will invest that
time into this.&lt;/p&gt;
&lt;p&gt;The writing will not be too high quality at times. Bare with me there.
Then I will check feedback from the list, if any. Hope is for it to
point out the things where I am not correct, missing, or even engage
right away.&lt;/p&gt;
&lt;p&gt;Topics are going to be random, albeit repeating. I will try and make
links to previous issues where applicable. Therefore also the TOC, which
makes for link targets in the pages.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="locals-dict"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Locals Dict&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I am speaking of locals dict, I am talking of class scopes (and
functions with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; statements). These started to use actual
dictionary a while ago, which was a severe setback to optimization.&lt;/p&gt;
&lt;p&gt;Right now, so for this week, after a first prototype was making the
replacement of local dict assignment and references for Python2, and
kind of worked through my buildbots, flawlessly, I immediately noticed
that it would require some refactoring to not depend on the locals
scopes to be only in one of the trace collections. Thinking of future
inlining, maybe part of a locals scope was going to be in multiple
functions, that ought to not be affected.&lt;/p&gt;
&lt;p&gt;Therefore I made a global registry of locals scopes, and working on
those, I checked its variables, if they can be forward propagated, and
do this not per module, but after all the modules have been done. This
is kind of a setback for the idea of module specific optimization
(cacheable later on) vs. program optimization, but since that is not yet
a thing, it can remain this way for now.&lt;/p&gt;
&lt;p&gt;Once I did that, I was interested to see the effect, but to my horror, I
noticed, that memory was not released for the locals dict nodes. It was
way too involved with cyclic dependencies, which are bad. So that was
problematic of course. Compilation to keep nodes in memory for both
tracing the usage as a locals dict and temporary variables, wasn’t going
to help scaling at all.&lt;/p&gt;
&lt;p&gt;Solution is finalization&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nodes-need-finalization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Nodes need Finalization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So replaced nodes reference a parent, and then the locals scope
references variables, and trace collections referencing variables, which
reference locals scopes, and accesses referencing traces, and so on. The
garbage collector can handle some of this, but seems I was getting past
that.&lt;/p&gt;
&lt;p&gt;For a solution, I started to add a finalize method, which released the
links for locals scopes, when they are fully propagated, on the next
run.&lt;/p&gt;
&lt;p&gt;Adding a finalize to all nodes, ought to make sure, memory is released
soon, and might even find bugs, as nodes become unusable after they are
supposedly unused. Obviously, there will currently be cases, where nodes
becomes unused, but they are not finalized yet. Also, often this is more
manual, because part of the node is to be released, but one child is
re-used. That is messy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="impact-on-memory-usage"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Impact on Memory Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The result was a bit disappointing. Yes, memory usage of mercurial
compilation went back again, but mostly to what it had been. Some
classes are now having their locals dict forward propagated, but the
effect is not always a single dictionary making yet. Right now, function
definitions, are not forward at all propagated. This is a task I want to
take on before next release though, but maybe not, there is other things
too. But I am assuming that will make most class dictionaries created
without using any variables at all anymore, which should make it really
lean.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="type-hints-question"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Type Hints Question&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Then, asking about type hints, I got the usual question about Nuitka
going to use it. And my stance is unchanged. They are just hints, not
reliable. Need to behave the same if users do it wrong. Suggested to
create decorated which make type hints enforced. But I expect nobody
takes this on though. I need to make it a Github issue of Nuitka,
although technically it is pure CPython work and ought to be done
independently. Right now Nuitka is not yet there anyway yet, to take
full advantage.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-3-7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Python 3.7&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Then, for Python 3.7, I have long gotten the 3.6 test suite to pass. I
raised 2 bugs with CPython, one of which lead to update of a failing
test. Nuitka had with large delay, caught of with what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;
&lt;span class="pre"&gt;__annotations__&lt;/span&gt;&lt;/code&gt; was doing in a class. Only with the recent work for
proper locals dict code generation, we could enforce a name to be local,
and have proper code generation, that allows for it to be unset.&lt;/p&gt;
&lt;p&gt;This was of course a bit of work. But the optimization behind was always
kind of necessary to get right. But now, that I got this, think of my
amazement when for 3.7 they reverted to the old behavior, where
annotiatons then corrupt the module annotations&lt;/p&gt;
&lt;p&gt;The other bug is a reference counting bug, where Nuitka tests were
failing with CPython 3.7, and turns out, there is a bug in the
dictionary implementation of 3.7, but it only corrupts counts reported,
not actual objects, so it’s harmless, but means for 3.7.0 the reference
count tests are disabled.&lt;/p&gt;
&lt;p&gt;Working through the 3.7 suite, I am cherry picking commits, that e.g.
allow the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;repr&lt;/span&gt;&lt;/code&gt; of compiled functions to contain &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;compiled_function&lt;/span&gt;
&lt;span class="pre"&gt;...&amp;gt;&lt;/span&gt;&lt;/code&gt; and the like. Nothing huge yet. There is now a subscript of type,
and foremost the async syntax became way more liberal, so it is more
complex for Nuitka to make out if it is a coroutine due to something
happening inside a generator declared inside of it. Also &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cr_origin&lt;/span&gt;&lt;/code&gt;
was added to coroutines, but that is mostly it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="coroutine-compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Coroutine Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A bigger thing was that I debugged coroutines and their interaction with
uncompiled and compiled coroutines awaiting one another, and turns out,
there was a lot to improve.&lt;/p&gt;
&lt;p&gt;The next release will be much better compatible with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;asyncio&lt;/span&gt;&lt;/code&gt; module
and its futures, esp with exceptions to cancel tasks passed along. That
required to clone a lot of CPython generator code, due to how ugly they
mess with bytecode instruction pointers in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; on an
uncompiled coroutine, as they don’t work with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;send&lt;/span&gt;&lt;/code&gt; method unlike
everything else has to.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pylint-troubles"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;PyLint Troubles&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For PyLint, the 2.0.0 release found new things, but unfortunately for
2.0.1 there is a lot of regressions that I had to report. I fixed the
versions of first PyLint, and now also Astroid, so Travis cannot
suddenly start to fail due to a PyLint release finding new warnings.&lt;/p&gt;
&lt;p&gt;Currently, if you make a PR on Github, a PyLint update will break it.
And also the cron job on Travis that checks master.&lt;/p&gt;
&lt;p&gt;As somebody pointed out, I am now using &lt;cite&gt;requires.io
&amp;lt;https://requires.io/github/kayhayen/Nuitka/requirements/?branch=factory&amp;gt;&lt;/cite&gt;
to check for Nuitka dependencies. But since 1.9.2 is still needed for
Python2, that kind of is bound to give alarms for now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="todo-solving"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;TODO solving&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a habit of doing off tasks, when I am with my notebook in some
place, and don’t know what to work on. So I have some 2 hours recently
like this, and used it to look at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TODO&lt;/span&gt;&lt;/code&gt; and resolve them.&lt;/p&gt;
&lt;p&gt;I did a bunch of cleanups for static code helpers. There was one in my
mind about calling a function with a single argument. That fast call
required a local array with one element to put the arg into. That makes
using code ugly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="issues-encountered"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Issues Encountered&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;enum&lt;/span&gt;&lt;/code&gt; module of Python3 hates compiled classes and their
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;staticmethod&lt;/span&gt;&lt;/code&gt; around &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt;. Since it manually unwraps
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt; and then calls it itself, it then finds that a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;staticmethod&lt;/span&gt;&lt;/code&gt; object cannot be called. It’s purpose is to sit in the
class dictionary to give a descriptor that removes the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/code&gt; arg from
the call.&lt;/p&gt;
&lt;p&gt;I am contemplating submitting an upstream patch for CPython here. The
hard coded check for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyFunction&lt;/span&gt;&lt;/code&gt; on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt; value is hard to
emulate.&lt;/p&gt;
&lt;p&gt;So I am putting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;staticmethod&lt;/span&gt;&lt;/code&gt; into the dictionary passed already.
But the undecorated function should be there for full compatibility.&lt;/p&gt;
&lt;p&gt;If I were to make compiled function type that is both a staticmethod
alike and a function, maybe I can work around it. But it’s ugly and a
burden. But it would need no change. And maybe there is more core
wanting to call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt; manually&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I intend to make a release, probably this weekend. It might not contain
full 3.7 compatibility yet, although I am aiming at that.&lt;/p&gt;
&lt;p&gt;Then I want to turn to “goto generators”, a scalability improvement of
generators and coroutines that I will talk about next week then.&lt;/p&gt;
&lt;p&gt;Until next week.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-1.html" rel="alternate"/>
    <summary>Nuitka this week #1</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-07-27T07:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-2.html</id>
    <title>Nuitka this week #2</title>
    <updated>2018-08-02T07:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-2"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-2" id="id1"&gt;Nuitka this week #2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#new-series-rationale" id="id2"&gt;New Series Rationale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-7" id="id3"&gt;Python 3.7&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#msi-3-7-files-for-nuitka" id="id4"&gt;MSI 3.7 files for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#planned-mode" id="id5"&gt;Planned Mode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id6"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python3-enumerators" id="id7"&gt;Python3 Enumerators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id8"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id9"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="new-series-rationale"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;New Series Rationale&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As discussed last week in &lt;a class="reference external" href="./nuitka-this-week-1.html"&gt;TWN #1&lt;/a&gt; this is
a new series that I am using to highlight things that are going on,
newly found issues, hotfixes, all the things Nuitka.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-3-7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Python 3.7&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I made the first release with official 3.7 support, huge milestone in
terms of catching up. Generic classes posed a few puzzles, and need more
refinements for error handling, but good code works now.&lt;/p&gt;
&lt;p&gt;The class creation got a bit more complex, yet again, which will make it
even hard to know the exact base classes to be used. But eventually we
will manage to overcome this and statically optimize that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="msi-3-7-files-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;MSI 3.7 files for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building the MSI files for Nuitka ran into a 3.7.0 regression of CPython
failing to build them, that I reported and seems to be valid bug of
theirs.&lt;/p&gt;
&lt;p&gt;So they will be missing for some longer time. Actually I wasn’t so sure
if they are all that useful, or working as expected for the runners, but
with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;nuitka&lt;/span&gt;&lt;/code&gt; mode of execution, that ought to be a non-issue.
so it would be nice to keep them for those who use them for deployment
internally.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="planned-mode"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Planned Mode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a change here. This is going to be a draft post until I publish
it, so I might the link, or mention it on the list, but I do not think I
will wait for feedback, where there is not going to be all that much.&lt;/p&gt;
&lt;p&gt;So I am shooting this off the web site.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is an exciting field of work, that I have been busy with this week.
I will briefly describe the issue at hand.&lt;/p&gt;
&lt;p&gt;So generators in Python are more generally called coroutines in other
places, and basically that is code shaking hands, executing resuming in
one, handing back a piece of data back and forth.&lt;/p&gt;
&lt;p&gt;In Python, the way of doing this is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;&lt;/code&gt; and more recently &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;
&lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; as a convienant way for of doing it in a loop in Python3. I still
recall the days when that was a statement. Then communication was one
way only. Actually when I was still privately doing Nuitka based on then
Python 2.5 and was then puzzled for Python 2.6, when I learned in Nuitka
about it becoming an expression.&lt;/p&gt;
&lt;p&gt;The way this is implemented in Python, is that execution of a frame is
simply suspended, and another frame stack bytecode is activated. This
switching is of course very fast potentially, the state is already fully
preserved on the stack of the virtual machine, which is owned by the
frame. For Nuitka, when it still was C++, it wasn’t going to be possible
to interrupt execution without preserving the stack. So what I did was
very similar, and I started to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makecontext/setcontext&lt;/span&gt;&lt;/code&gt; to
implement what I call fibers.&lt;/p&gt;
&lt;p&gt;Basically that is C level stack switching, but with a huge issue. Python
does not grow stacks, but can need a lot of stack space below. Therefore
1MB or even 2MB per generator was allocated, to be able to make deep
function calls if needed.&lt;/p&gt;
&lt;p&gt;So using a lot of generators on 32 bits could easily hit a 2GB limit.
And now with Python3.5 coroutines people use more and more of them, and
hit memory issues.&lt;/p&gt;
&lt;p&gt;So, goto generators, now that C is possible, are an entirely new
solution. With it, Nuitka will use one stack only. Generator code will
become re-entrant, store values between entries on the heap, and
continue execution at goto destinations dispatched by a switch according
to last exit of the generator.&lt;/p&gt;
&lt;p&gt;So I am now making changes to cleanup the way variable declarations and
accesses for the C variables are being made. More on that next week
though. For now I am very exited about the many cleanups that stem from
it. The code generation used to have many special bells and whistles,
and they were generalized into one thing now, making for cleaner and
easier to understand Nuitka code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python3-enumerators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Python3 Enumerators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On interesting thing, is that an incompatibility related to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt;
will go away now.&lt;/p&gt;
&lt;p&gt;The automatic &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;staticmethod&lt;/span&gt;&lt;/code&gt; that we had to hack into it, because the
Python core will do it for uncompiled functions only, had to be done
while declaring the class. So it was visible and causing issues with at
least the Python enum module, which wants to call your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt;
manually. Because why would it not?!&lt;/p&gt;
&lt;p&gt;But turns out, for Python3 the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;staticmethod&lt;/span&gt;&lt;/code&gt; is not needed anymore.
So this is now only done for Python2, where it is needed, and things
work smoothly with this kind of code now too. This is currently in my
factory testing and will probably become part of a hotfix if it turns
out good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Immediately after the release, some rarely run test, where I compiled
all the code on my machine, found 2 older bugs, obscure ones arguably,
that I made into a hotfix, also because the test runner was having a
regression with 3.7, which prevented some package builds. So that was
0.5.32.1 release.&lt;/p&gt;
&lt;p&gt;And then I received a bug report about &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt; where a self test of
Nuitka fails and reports an optimization error. Very nice, the new
exceptions that automatically dump involved nodes as XML made it
immediately clear from the report, what is going on, even without having
to reproduce anything. I bundled a 3.7 improvement for error cases in
class creation with it. So that was the 0.5.32.2 release.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing goto generators is my top priority, but I am also going over
minor issues with the 3.7 test suite, fixing test cases there, and as
with e.g. the enum issue, even known issues this now finds.&lt;/p&gt;
&lt;p&gt;Until next week.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-2.html" rel="alternate"/>
    <summary>Nuitka this week #2</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-08-02T07:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-3.html</id>
    <title>Nuitka this week #3</title>
    <updated>2018-08-11T11:58:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-3"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-3" id="id1"&gt;Nuitka this week #3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#new-series-rationale" id="id2"&gt;New Series Rationale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id3"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id4"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id5"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id6"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="new-series-rationale"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;New Series Rationale&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is working out well so far. I think driving more attention at the
things that are going on can only be good. Also to explain will always
help. It also kind of motivates me a bit.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Also as part of my communications offensive, I am using my Twitter
account more regularly. I used to highlight important fixes, or
occasionally releases of some importance there. I will continue to do
only important stuff there, but with more regularity.&lt;/p&gt;
&lt;p&gt;And I noticed in the past, even when I do not post, followers makes me
happy. So here you go:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This continues &lt;a class="reference external" href="./nuitka-this-week-2.html#goto-generators"&gt;TWN #2&lt;/a&gt;
where I promised to speak more of it, and this is the main focus of my
work on Nuitka right now.&lt;/p&gt;
&lt;p&gt;Brief summary, context switches were how this was initially implemented.
The main reason being that for C++ there never was going to be a way to
save and restore state in the middle of an expression that involves
constructors and destructors.&lt;/p&gt;
&lt;p&gt;Fast forward some years, and C-ish entered the picture. No objects are
used anymore, and Nuitka is purely C11 now, which has convenience of
C++, but no objects. Instead &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;goto&lt;/span&gt;&lt;/code&gt; is used a lot already. So every
time an exception occurs, a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;goto&lt;/span&gt;&lt;/code&gt; is done, every time a branch is
done, a loop exit or continue, you get it, another &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;goto&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But so far, all Python level variables of a frame live on that C stack
still, and the context switch is done with functions that swap stack.
That is fast, but the imporant drawback is that it takes more memory.
How deep of a stack will we need? And we can use really many, if you
imagine a pool of 1000 coroutines, that quickly become impossible to
deal with.&lt;/p&gt;
&lt;p&gt;So, the new way of doing this basically goes like this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This was some far becoming something along this lines:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;impl_g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NuitkaGenerator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;YIELD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;YIELD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;PyErr_SetException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StopIteration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;YIELD&lt;/span&gt;&lt;/code&gt; in there was basically doing the switching of the stacks
and for the C code, it looked like a normal function call.&lt;/p&gt;
&lt;p&gt;In the new approach, this is done:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;impl_g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NuitkaGenerator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_resume_point&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resume_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resume_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_yielded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resume_point&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;resume_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_yielded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;const_int_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resume_point&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;resume_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;PyErr_SetException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StopIteration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, the function has an initial dispatcher. Resume point 0
means we are starting at the top. Then every &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;&lt;/code&gt; results in a
function return with an updated resume point.&lt;/p&gt;
&lt;p&gt;I experimented with this actually a long time ago, and experimental code
was the result that remained in Nuitka. The problem left to solve was to
store the variables that would normally live on the stack, in a heap
storage. That is what I am currently working on.&lt;/p&gt;
&lt;p&gt;This leads me to “heap storage”, which is what I am currently working on
and will report on next week. Once that is there, goto generators can
work, and will become the norm. Until then, I am refactoring a lot to
get accesses to variable go through proper objects that know their
storage locations and types.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there have been 2 more hotfixes. One was to make the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;enum&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__new__&lt;/span&gt;&lt;/code&gt; compatibility available that I talked about last week in
&lt;cite&gt;TWN #2 &amp;lt;./nuitka-this-week-2.html#python3-enumerators&amp;gt;&lt;/cite&gt; coupled with a
new minor things.&lt;/p&gt;
&lt;p&gt;And then another one, actually important, where Python3
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__annotations__&lt;/span&gt;&lt;/code&gt; by default was the empty dictionary, but then could
be modified, corrupting the Nuitka internally used one severely.&lt;/p&gt;
&lt;p&gt;Right now I have on factory another fix for nested namespace packages in
Python3 and that might become another hotfix soon.&lt;/p&gt;
&lt;p&gt;As you know, I am following the git flow model, where it’s easy to push
out small fixes, and just those, on top of the last release. I tend to
decide based on importance. However, I feel that with the important
fixes in the hotfixes now, it’s probably time to make a full release, to
be sure everybody gets those.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing heap storage is my top priority right now and I hope to
complete the refactorings necessary in the coming week. I will also talk
about how it also enables C types work next week.&lt;/p&gt;
&lt;p&gt;Until next week then!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-3.html" rel="alternate"/>
    <summary>Nuitka this week #3</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-08-11T11:58:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-4.html</id>
    <title>Nuitka this week #4</title>
    <updated>2018-08-17T14:55:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-4"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-4" id="id1"&gt;Nuitka this week #4&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id2"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tox-plugin" id="id3"&gt;Tox Plugin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id4"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id5"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id6"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This continues &lt;a class="reference external" href="./nuitka-this-week-3.html#goto-generators"&gt;TWN #3&lt;/a&gt;
where I explained what is all about.&lt;/p&gt;
&lt;p&gt;Good news is, at the time Python2 generators were largely working with
the new ways, in the mean time not only did all of the Python 2.7 test
suite pass with goto generators, also did the Python 3.4 test suite,
i.e. also the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; is working with it.&lt;/p&gt;
&lt;p&gt;The way it was done is to set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;m_yieldfrom&lt;/span&gt;&lt;/code&gt; in generators, and then to
enter a state, where the code will only be resumed, when that
sub-generator that currently it is yielding from, is finished. That
makes it very much like normal yield. In fact, code generation is hardly
different there.&lt;/p&gt;
&lt;p&gt;Since the whole purpose is to get rid of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make/get/setcontext&lt;/span&gt;&lt;/code&gt;, the
next stop is coroutines. They have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt; &lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt; &lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt; but at the end of the day, the implementation comes down to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; really with only a lot of sugar applied.&lt;/p&gt;
&lt;p&gt;Right now, I am debugging “goto coroutines”. It’s hard to tell when it
will be finished, and then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;asyncgen&lt;/span&gt;&lt;/code&gt; will be waiting still.&lt;/p&gt;
&lt;p&gt;This is easily the largest change in a long time, esp. due to the heap
storage changes that I already discussed. One this is finished, I expect
to turn towards C types with relative ease.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tox-plugin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Tox Plugin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Anthony Shaw took on Tox and Nuitka and created a plugin that allows
using Nuitka. I am still wrapping my head around these things. It’s only
a proof of concept yet. I will give it more coverage in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Follow me on twitter if you like, I will:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there have even more hotfixes. One addresses memory leaks found with
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; while I was adding tests. Usually if I encounter an
old issue that has a small fix, that is what I do, push out a hotfix
using the git flow model. Also nested namespace packages for Python3,
those are the ones without a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init__.py&lt;/span&gt;&lt;/code&gt; were not working after the
original directory was removed, and that got fixed.&lt;/p&gt;
&lt;p&gt;And right now, I have hotfixes for frames &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;close&lt;/span&gt;&lt;/code&gt; method, which
apparently was never updated to work properly for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;coroutines&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;asyncgen&lt;/span&gt;&lt;/code&gt;. That is going to be in the next hotfix.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the heap storage seems pretty complete now, and goto generators are
on the final stretch. As always, things feel right around the corner.
But it’s unclear how much longer I will have to debug. I am pretty sure
the bare work of doing asyncgen is going to be low. Debugging that too
then, that is the hard part.&lt;/p&gt;
&lt;p&gt;A new release seems justified, but I kind of do not want to make it
without that major new code used. Because apparently during the
debugging, I tend to find issues that need hotfixes, so I will wait for
the goto generator work to finish.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-4.html" rel="alternate"/>
    <summary>Nuitka this week #4</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-08-17T14:55:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-5.html</id>
    <title>Nuitka this week #5</title>
    <updated>2018-08-24T12:55:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-5"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-5" id="id2"&gt;Nuitka this week #5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id3"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks" id="id4"&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#holiday" id="id5"&gt;Holiday&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#static-compilation" id="id6"&gt;Static Compilation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id7"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id8"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bug-tracker" id="id9"&gt;Bug Tracker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#issue-backlog" id="id10"&gt;Issue Backlog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id11"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id12"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id13"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finished. Done. Finally.&lt;/p&gt;
&lt;p&gt;Benchmarking was exciting. One program benchmark I had run in the past,
was twice as fast than before, showing that the new implementation is
indeed much faster, which is fantastic news.&lt;/p&gt;
&lt;p&gt;Creating generator expressions and using them both got substantially
faster and that is great.&lt;/p&gt;
&lt;p&gt;It took me a fair amount of time to debug coroutines and asyncgen based
on the new goto implementation. But the result is really good, and a
fair amount of old bugs have been fixed. There always had been a
segfault with asyncgen test that now has been eradicated.&lt;/p&gt;
&lt;p&gt;One major observation is now, with only one C stack, debugging got a lot
easier before, where context switches left much of the program state not
reachable.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Benchmarks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Posted this one Twitter already:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-builtinsumwithgenerator.html"&gt;Nuitka Speedcenter Builtin sum with generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That one construct test has been a problem child, where Nuitka was
slower than CPython 2.x, and very little faster than 3.x, and now with
goto generators finally has become consistently faster.&lt;/p&gt;
&lt;p&gt;I will explain what you see there in the next issue. The short version
is that there is code, in which for one run, one line is used, and in
another the other line is used, and then the “construct” is measure that
way, by making the delta of the two. That construct performance is then
compared between Python and Nuitka.&lt;/p&gt;
&lt;p&gt;So if e.g. Nuitka is already better at looping, that won’t influence the
number of making that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sum&lt;/span&gt;&lt;/code&gt; call with a generator expression.&lt;/p&gt;
&lt;p&gt;The alternative line uses the generator expression, to make sure the
construction time is not counted. To measure that, there is another
construct test, that just creates it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-generatorexpressioncreation.html"&gt;Nuitka Speedcenter Generator Expression Creation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one shows that stable Nuitka was already faster at creating them,
but that the develop version got even faster again. As creating
generator objects became more lightweight, that is also news.&lt;/p&gt;
&lt;p&gt;There are constructs for many parts of Python, to shed a light on how
Nuitka fares for that particular one.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="holiday"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Holiday&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my 2 weeks holiday, I will try and focus on the next big thing, C
types, something also started in the past, and where recent changes as
part of the heap storage, should make it really a lot easier to get it
finished. In fact I don’t know right now, why my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bool&lt;/span&gt;&lt;/code&gt; experimental
work shouldn’t just prove to be workable.&lt;/p&gt;
&lt;p&gt;I am not going to post a TWN issue next week, mostly because my home
servers won’t be running, and the static site is rendered on one of
them. Of course that would be movable, but I won’t bother.&lt;/p&gt;
&lt;p&gt;I am going to post a lot on Twitter though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="static-compilation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Static Compilation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a Github issue where I describe how pyenv on macOS ought to be
possible to use, and indeed, a brave soul has confirmed and even
provided the concrete commands. All it takes now is somebody to fit this
into the existing caching mechanism of Nuitka and to make sure the
static library is properly patched to work with these commands.&lt;/p&gt;
&lt;p&gt;Now is anyone of you going to create the code that will solve it for
good?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Follow me on twitter if you like, I will post important stuff as it
happens there:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And there have been yet again more hotfixes. Some are about coroutine
and asyncgen corruptions for closes of frames. Multiprocessing plugin on
Windows will work in all cases now.&lt;/p&gt;
&lt;p&gt;Noteworthy was that the “0.5.32.6” was having a git merge problem on the
cherry-pick that git didn’t tell me about, leading to crashes. That made
it necessary to push an update right after. I was confused that I didn’t
get a conflict, because there was one. But I am to blame for not
checking the actual diff.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bug-tracker"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Bug Tracker&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next release will make Github the official tracker for Nuitka
issues. I am working down the issues on the old tracker. The web site
already pointed users there for a while, and I was set on this for some
time, but yesterday I focused on taking action.&lt;/p&gt;
&lt;p&gt;Basically what won me over is the easier templating of issues and pull
requests that would have been possible with Roundup, but never happened.
Also the OpenID integration that bugs.python.org has, never became
available to me in a ready usable form.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="issue-backlog"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Issue Backlog&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finishing goto “generators allowed” for around 10 issues to be closed
alone, and I went over things, and checked out some stale issues, to see
if they are dealt with, or pinging authors. I spent like half a day on
this, bring down the issue count by a lot. Tedious work, but must be
done too.&lt;/p&gt;
&lt;p&gt;Also my inbox got a fair amount of cleanup, lots of issues pile up
there, and from time to time, I do this, to get things straight. I
raised issues for 2 things, that I won’t be doing immediately.&lt;/p&gt;
&lt;p&gt;But actually as issues go, there really very little problematic stuff
open right now, and nothing important really. I would almost call it
issue clean.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-5.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very like one you can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goto generator work could be released, but I want to make the
compile all the world test before I do so. It is running right now, but
I will not complete before I leave. Also I do not want to get regression
reports in my holiday, and goto generators along with heap storage, mean
there could be some.&lt;/p&gt;
&lt;p&gt;I am going to work on C types now. There is a few closing down actions
on what I observed doing goto generators. There are a few easy ways to
get even slightly better performance, definitely smaller code out of
generators. Not sure if I go there first, or for the C types work
directly. I often like to get these kind of observations dealt with more
immediately, but I don’t want to spend too much quality time on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I have been asked this, yes, you can donate to Nuitka if you wish to
further its development. Go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-5.html" rel="alternate"/>
    <summary>Nuitka this week #5</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-08-24T12:55:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-6.html</id>
    <title>Nuitka this week #6</title>
    <updated>2018-09-12T12:05:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-6"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-6" id="id2"&gt;Nuitka this week #6&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#holiday" id="id3"&gt;Holiday&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bool" id="id4"&gt;bool&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#void" id="id5"&gt;void&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#module-var" id="id6"&gt;module_var&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id7"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks" id="id8"&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id9"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#poll-on-executable-names" id="id10"&gt;Poll on Executable Names&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id11"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id12"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id13"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id14"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="holiday"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Holiday&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my 2 weeks holiday, I indeed focused on a really big thing, and got
more done that I had hoped for. For C types, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka_bool&lt;/span&gt;&lt;/code&gt;, which is a
tri-state boolean with true, false and unassigned, can be used for some
variables, and executes some operations without going through objects
anymore.&lt;/p&gt;
&lt;section id="bool"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;bool&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Condition codes are no longer special. They all need a boolean value
from the expression used as a condition, and there was a special paths
for some popular expressions for conditions, but of course not all. That
is now a universal thing, conditional statement/expressions will now
simply ask to provide a temp variable of value &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka_bool&lt;/span&gt;&lt;/code&gt; and then
code generation handles it.&lt;/p&gt;
&lt;p&gt;For where it is used, code gets a lot lighter, and of course faster,
although I didn’t measure it yet. Going to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_True&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Py_False&lt;/span&gt;&lt;/code&gt; and
comparing with it, wasn’t that optimal, and it’s nice this is now so
much cleaner as a side effect of that C bool work.&lt;/p&gt;
&lt;p&gt;This seems to be so good, that actually it’s the default for this to be
used in 0.6.0, and that itself is a major break through. Not so much for
actual performance, but for structure. Other C types are going to follow
soon and will give massive performance gains.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="void"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;void&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And what was really good, is that not only did I get &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bool&lt;/span&gt;&lt;/code&gt; to work
almost perfectly, I also started work on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;void&lt;/span&gt;&lt;/code&gt; C target type and
finished that after my return from holiday last weekend, which lead to
new optimization that I am putting in the 0.5.33 release that is coming
soon, even before the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;void&lt;/span&gt;&lt;/code&gt; code generation is out.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;void&lt;/span&gt;&lt;/code&gt; C type cannot read values back, and unused values should
not be used, so this gives errors for cases where that becomes obvious.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Consider this expression. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;or&lt;/span&gt;&lt;/code&gt; expression, that one is going to
producing a value, which is then released, but not used otherwise. New
optimzation creates a conditional statement out of it, which takes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt;
as the condition and if not true, then evaluates &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;b&lt;/span&gt;&lt;/code&gt; but ignores it.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;void&lt;/span&gt;&lt;/code&gt; evaluation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;b&lt;/span&gt;&lt;/code&gt; can then do further optimization for
it.&lt;/p&gt;
&lt;p&gt;Void code generation can therefore highlight missed opportunities for
this kid of optimization, and found a couple of these. That is why I was
going for it, and I feel it pays off. Code generation checking
optimization here, is a really nice synergy between the two.&lt;/p&gt;
&lt;p&gt;Plus I got all the tests to work with it, and solved the missing
optimizations it found very easily. And instead of allocating an object
now, not assigning is often creating more obvious code. And that too
allowed me to find a couple of bugs by C compiler warnings.&lt;/p&gt;
&lt;p&gt;Obviously I will want to run a compile all the world test before making
it the default, which is why this will probably become part of 0.6.1 to
be the default.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="module-var"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;module_var&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Previously variable codes were making a hard distinction for module
variables and make them use their own helper codes. Now this is
encapsulated in a normal C type class like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka_bool&lt;/span&gt;&lt;/code&gt;, or the one
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; variables, and integrates smoothly, and even got
better. A sign things are going smooth.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Still not released. I delayed it after my holiday, and due to the heap
generator change, after stabilizing the C types work, I want to first
finish a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tests/library/compile_python_module.py&lt;/span&gt; &lt;span class="pre"&gt;resume&lt;/span&gt;&lt;/code&gt; run, which
will for a Anaconda3 compile all the code found in there.&lt;/p&gt;
&lt;p&gt;Right now it’s still doing that, and even found a few bugs. The heap
storage can still cause issues, as can changes to cloning nodes, which
happens for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt; nodes and their &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;finally&lt;/span&gt;&lt;/code&gt; blocks.&lt;/p&gt;
&lt;p&gt;This should finish these days. I looked at performance numbers and found
that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; is indeed only faster, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; due to even more
optimization will be yet faster, and often noteworthy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Benchmarks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Speedcenter of Nuitka is what I use right now, but it’s only showing
the state of 3 branches and compared to CPython, not as much historical
information. Also the organization of tests is poor. At least there is
tags for what improved.&lt;/p&gt;
&lt;p&gt;After release of Nuitka 0.6.0 I will show more numbers, and I will start
to focus on making it easier to understand. Therefore no link right now,
google if you are so keen. ;-)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;During the holiday sprint, and even after, I am going to Tweet a lot
about what is going on for Nuitka. So follow me on twitter if you like,
I will post important stuff as it happens there:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="poll-on-executable-names"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Poll on Executable Names&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I put e.g. poll up on Twitter, which is now over. But it made me
implement a new scheme, due to &lt;a class="reference external" href="https://twitter.com/KayHayen/status/1037591355319640065"&gt;popular consensus&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even more hotfixes. I even did 2 during my holiday, however packages
built only later.&lt;/p&gt;
&lt;p&gt;Threaded imports on 3.4 or higher of modules were not using the locking
they should use. Multiprocessing on Windows with Python3 had even more
problems, and the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-package&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-module&lt;/span&gt;&lt;/code&gt; were
present, but not working.&lt;/p&gt;
&lt;p&gt;That last one was actually very strange. I had added a new option group
for them, but not added it to the parser. Result: Option works. Just
does not show up in help output. Really?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-6.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very like one you can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working down the release backlog. Things should be out. I am already
working on what should become 0.6.1, but it’s not yet 0.5.33 released.
Not a big deal, but 0.6.0 has 2 really important fixes for performance
regressions that have happened in the past. One is for loops, making
that faster is probably like the most important one. The other for
constant indexing, probably also very important. Very much measurable in
pystone at least.&lt;/p&gt;
&lt;p&gt;In the mean time, I am preparing to get &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; working as a target C
type, so e.g. comparisons of such values could be done in pure C, or
relatively pure C.&lt;/p&gt;
&lt;p&gt;Also, I noticed that e.g. in-place operations can be way more optimized
and did stuff for 0.6.1 already in this domain. That is unrelated to C
type work, but kind of follows a similar route maybe. How to compare
mixed types we know of, or one type only. That kind of things needs
ideas and experiments.&lt;/p&gt;
&lt;p&gt;Having &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; supported should help getting some functions to C speeds,
or at least much closer to it. That will make noticeable effects in many
of the benchmarks. More C types will then follow one by one.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-6.html" rel="alternate"/>
    <summary>Nuitka this week #6</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-09-12T12:05:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-7.html</id>
    <title>Nuitka this week #7</title>
    <updated>2018-09-22T11:05:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-7"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-7" id="id2"&gt;Nuitka this week #7&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-design-philosophy" id="id3"&gt;Nuitka Design Philosophy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ui-rework" id="id4"&gt;UI rework&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#goto-generators" id="id5"&gt;Goto Generators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks" id="id6"&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id7"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id8"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#egg-files-in-pythonpath" id="id9"&gt;Egg files in PYTHONPATH&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#certifi" id="id10"&gt;Certifi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility-with-pkg-resources" id="id11"&gt;Compatibility with pkg_resources&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id12"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id13"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="nuitka-design-philosophy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Nuitka Design Philosophy&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I wrote this as part of a discussion recently, and I think it makes
sense to share my take on Nuitka and design. This is a lot text
though, feel free to skip forward.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The issue with Nuitka and design mainly for me is that the requirements
for many parts were and are largely unknown to me, until I actually
start to do it.&lt;/p&gt;
&lt;p&gt;My goto generators approach worked out as originally designed, and that
felt really cool for once, but the whole “C type” thing was a total
unknown to me, until it all magically took form.&lt;/p&gt;
&lt;p&gt;But rather I know it will evolve further if I go from “bool” (complete
and coming for 0.6.0) via “void” (should be complete already, but
enabling will happen only for 0.6.1 likely) to “int”, not sure how long
that will take.&lt;/p&gt;
&lt;p&gt;I really think Nuitka, unlike other software that I have designed, is
more of a prototype project that gradually turns more and more into the
real thing.&lt;/p&gt;
&lt;p&gt;I have literally spent &lt;em&gt;years&lt;/em&gt; to inject proper design in steps into the
optimization phase, what I call SSA, value tracing, and it is very much
there now. I am probably going to spend similar amounts of time, to
execute on applying type inference results to the code generation.&lt;/p&gt;
&lt;p&gt;So I turned that into something working with code strings to something
working with variable declaration objects knowing their type for the
goto generators, aiming at C types generally. All the while carrying the
full weight of passing every compatibility test there is.&lt;/p&gt;
&lt;p&gt;Then e.g. suddenly cleaning up module variables to no longer have their
special branch, but a pseudo C type, that makes them like everything
else. Great. But when I first introduced the new thing, I postponed
that, because I could sooner apply its benefits to some things and get
experience from it.&lt;/p&gt;
&lt;p&gt;While doing partial solutions, the design sometimes horribly degrades,
but only until some features can carry the full weight, and/or have been
explored to have their final form.&lt;/p&gt;
&lt;p&gt;Making a whole Nuitka design upfront and then executing it, would
instead give a very high probability of failing in the real world. I am
therefore applying the more agile approach, where I make things work
first. And then continue to work while I clean it up.&lt;/p&gt;
&lt;p&gt;For every feature I added, I actively go out, and change the thing, that
made it hard or even fail. Always. I think Nuitka is largely developed
by cleanups and refactoring. Goto generators were a fine example of
that, solving many of the issues by injecting variable declarations
objects into code generation, made it easy to indicate storage (heap or
object or stack) right there.&lt;/p&gt;
&lt;p&gt;That is not to say that Nuitka didn’t have the typical compiler design.
Like parsing inputs, optimizing a tree internally, producing outputs.
But that grand top level design only tells you the obvious things really
and is stolen anyway from knowing similar projects like gcc.&lt;/p&gt;
&lt;p&gt;There always were of course obvious designs for Nuitka, but that really
never was what anybody would consider to make a Python compiler hard.
But for actual compatibility of CPython, so many details were going to
require examination with no solutions known ahead of time.&lt;/p&gt;
&lt;p&gt;I guess, I am an extreme programmer, or agile, or however they call it
these days. At least for Nuitka. In my professional life, I have
designed software for ATC on the drawing board, then in paper, and then
in code, the design just worked, and got operational right after
completion, which is rare I can tell you.&lt;/p&gt;
&lt;p&gt;But maybe that is what keeps me exciting about Nuitka. How I need to go
beyond my abilities and stable ground to achieve it.&lt;/p&gt;
&lt;p&gt;But the complexity of Nuitka is so dramatically higher than anything I
ever did. It is doing a complicated, i.e. detail rich work, and then it
also is doing hard jobs where many things have to play together. And the
wish to have something working before it is completed, if it ever is,
makes things very different from projects I typically did.&lt;/p&gt;
&lt;p&gt;So the first version of Nuitka already had a use, and when I publicly
showed it first, was capable of handling most complex programs, and the
desire was to evolve gradually.&lt;/p&gt;
&lt;p&gt;I think I have described this elsewhere, but for large parts of the well
or bad designed solutions of Nuitka, there is reliable ways of
demonstrating it works correctly. Far better than I have ever
encountered. i believe it’s the main reason I managed to get this off
the ground is that. Having a test “oracle” is what makes Nuitka special,
i.e. comparing to existing implementations.&lt;/p&gt;
&lt;p&gt;Like a calculator can be tested comparing it to one of the many already
perfect ones out there. That again makes Nuitka relatively easy despite
the many details to get right, there is often an easy way to tell
correct from wrong.&lt;/p&gt;
&lt;p&gt;So for me, Nuitka is on the design level, something that goes through
many iterations, discovery, prototyping, and is actually really exciting
in that.&lt;/p&gt;
&lt;p&gt;Compilers typically are boring. But for Nuitka that is totally not the
case, because Python is not made for it. Well, that*s technically
untrue, lets say not for optimizing compilers, not for type inference,
etc.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ui-rework"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;UI rework&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following up on discussion on the mailing list, the user interface of
Nuitka will become more clear with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-*&lt;/span&gt;&lt;/code&gt; options and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--[no]follow-import*&lt;/span&gt;&lt;/code&gt; options that better express what is going to
happen.&lt;/p&gt;
&lt;p&gt;Also the default for following with extension modules is now precisely
what you say, as going beyond what you intend to deliver makes no sense
in the normal case.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="goto-generators"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Goto Generators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now release as 0.5.33 and there has been little regressions so far, but
the one found is only in the pre-release of 0.6.0 so use that instead if
you encounter a C compilation error.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Benchmarks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The performance regressions fixed for 0.6.0 impact &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pystone&lt;/span&gt;&lt;/code&gt; by a lot,
loops were slower, so were subscripts with constant integer indexes. It
is a pity these were introduced in previous releases during refactorings
without noticing.&lt;/p&gt;
&lt;p&gt;We should strive to have benchmarks with trends. Right now Nuitka
speedcenter cannot do it. Focus should definitely go to this. Like I
said, after 0.6.0 release, this will be a priority, to make them more
useful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be active there. I just put out a poll about the comment
system, and disabling Disqus comments I will focus on Twitter for web
site comments too now.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-7.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="egg-files-in-pythonpath"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Egg files in PYTHONPATH&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a relatively old issue that now got addressed. Basically these
should be loaded from for compilation. Nuitka now unpacks them to a
cache folder so it can read source code from them, so this apparently
rare use case works now, yet again improving compatibility.&lt;/p&gt;
&lt;p&gt;Will be there for 0.6.0 release.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="certifi"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Certifi&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Seems request module sometimes uses that. Nuitka now includes that data
file starting with 0.6.0 release.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility-with-pkg-resources"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Compatibility with pkg_resources&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It seems that getting “distributions” and taking versions from there, is
really a thing, and Nuitka fails pkg_resources requirement checks in
standalone mode at least, and that is of course sad.&lt;/p&gt;
&lt;p&gt;I am currently researching how to fix that, not sure yet how to do it.
But some forms of Python installs are apparently very affected by it. I
try looking into its data gathering, maybe compiled modules can be
registered there too. It seems to be based on file system scans of its
own makings, but there is always a monkey patch possible to make it
better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Still working on the 0.6.0 release, cleaning up open ends only. Release
tests seem to be pretty good looking. The UI changes and stuff are a
good time to be done now, but delay things, and there is a bunch of
small things that are low hanging fruits while I wait for test results.&lt;/p&gt;
&lt;p&gt;But since it fixes so many performance things, it really ought to be out
any day now.&lt;/p&gt;
&lt;p&gt;Also the in-place operations stuff, I added it to 0.6.0 too, just
because it feels very nice, and improves some operations by a lot too.
Initially I had made a cut for 0.6.1 already, but that is no more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-7.html" rel="alternate"/>
    <summary>Nuitka this week #7</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-09-22T11:05:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-8.html</id>
    <title>Nuitka this week #8</title>
    <updated>2018-10-02T06:05:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-8"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-8" id="id2"&gt;Nuitka this week #8&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#public-private-ci-workflow" id="id3"&gt;Public / Private CI / Workflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#workflow" id="id4"&gt;Workflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hunting-bugs-with-bisect" id="id5"&gt;Hunting bugs with bisect&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#experimental-changes" id="id6"&gt;Experimental Changes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hardware" id="id7"&gt;Hardware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#milestone-release" id="id8"&gt;Milestone Release&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ui-rework" id="id9"&gt;UI rework&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks" id="id10"&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#inplace-operations" id="id11"&gt;Inplace Operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#new-use-cases" id="id12"&gt;New use cases&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tcl-tk-standalone" id="id13"&gt;Tcl/Tk Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#caching-examined" id="id14"&gt;Caching Examined&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id15"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id16"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plans" id="id17"&gt;Plans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id18"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="public-private-ci-workflow"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Public / Private CI / Workflow&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I wrote this as part of a discussion recently, and I think it makes
sense to share it here. This is a lot text though, feel free to skip
forward.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Indeed I have a private repo, where I push and only private CI picks up.
Based on Buildbot, I run many more compilations, basically around the
clock on all of my computers, to find regressions from new optimization
or codegen changes, and well UI changes too.&lt;/p&gt;
&lt;p&gt;Public CI offerings like Travis are not aimed at allowing this many
compilations. It will be a while before public cloud infrastructure will
be donated to Nuitka, although I see it happening some time in the
future. This leaves developers with the burden to run tests on their own
hardware, and never enough. Casual contributors will never be able to do
it themselves.&lt;/p&gt;
&lt;p&gt;My scope is running the CPython test suites on Windows and Linux. These
are the adapted 26, 27, 32, 33, 34, 35, 36, 37 suites, and also to get
even more errors covered, they are ran with mismatching Python versions,
so a lot of exceptions are raised. Often running the 36 tests with 37
and vice versa will extend the coverage, because of the exceptions being
raise.&lt;/p&gt;
&lt;p&gt;On Windows I compile with and without debug mode, x86 and x64, and it’s
kind of getting too much. For Linux I have 2 laptops in use, and an ARM
CuBox bought from your donations, there it’s working better, esp. due to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; being used everywhere, although recent investigations show
room for improvement there as well.&lt;/p&gt;
&lt;p&gt;For memory usage I still compile mercurial and observe the memory it
used in addition to comparing the mercurial tests to expected outputs
its test suite gives. It’s a sad day when Mercurial tests find changes
in behavior, and luckily that has been rare. Running the Mercurial test
suite gives some confidence in the thing not corrupting data it works
with without knowing.&lt;/p&gt;
&lt;p&gt;Caching the CPython outputs of tests to compare against is something I
am going to make operational these days, trying to make things ever
faster. There is no point to re-run tests with Python, just to get at
its output, which will typically not change at all.&lt;/p&gt;
&lt;p&gt;But for the time being, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache.exe&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache.exe&lt;/span&gt;&lt;/code&gt; seem to have
done wonders for Windows too, but I will want to investigate some more
to avoid unnecessary cache misses.&lt;/p&gt;
&lt;section id="workflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As for my workflow with Nuitka, I often tend to let some commits settle
in my private repo only until they become trusted. Other times I will
make bigger changes and put them out to factory immediately, because it
will be hard to split up the changes later, so putting them out makes it
easier.&lt;/p&gt;
&lt;p&gt;I am more conservative with factory right after telling people to try
something there. But also I break it on purpose, just trying out
something. I really consider it a private branch for interacting with me
or public CI. I do not recommend to use it, and it’s like a permanent
pull request of mine that is not ever going to be finished.&lt;/p&gt;
&lt;p&gt;Then on occasions I am making a sorting of all commits on factory and
split it into some things that become hotfixes, some things that become
current pre-release, and other things that will remain in that proving
ground. That is why I typically make hotfix and pre-release at the same
times. The git flow suggests doing that and it’s easy, so why not. As a
bonus, develop is then practically stable at nearly all times too, with
hardly any regressions.&lt;/p&gt;
&lt;p&gt;I do however normally not take things as hotfixes that are on develop
already, I hate the duplication of commits. Hotfixes must be small and
risk free, and easy to put out, when there is any risk, it definitely
will be on develop. Nuitka stable typically covers nearly all grounds
already. No panic needed to add missing stuff and break others.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hunting-bugs-with-bisect"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Hunting bugs with bisect&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For me the git bisect is very important. My private commit history is
basically a total mess and worthless, but on factory I am making very
nice organized commits that I will frequently amend, even for the random
PyLint cleanup. This allows me when e.g. one test suddenly says
“segfault” on Windows to easily find the change that triggers it, look
at C code difference, and spot the bug introduced, then amend the commit
and be done with it.&lt;/p&gt;
&lt;p&gt;It’s amazing how much time this can save. My goal is to always have a
workable state which is supposed to pass all tests. Obviously I cannot
prove it for every commit, but when I know it to not be the case, I tend
to make rebases. At times I have been tempted and followed up on
backward amending develop and even stable.&lt;/p&gt;
&lt;p&gt;I am doing that to be sure to have that bisect ability, but fortunately
it’s rare that kind of bug occurs, and I try not to do it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="experimental-changes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Experimental Changes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As with recent changes, I sometimes make changes with the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;isExperimental()&lt;/span&gt;&lt;/code&gt; marker, activating breaking changes only gradually.
The C &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bool&lt;/span&gt;&lt;/code&gt; type code generation has been there for months in a
barely useful form, until it became more polished, and always guarded
with a switch, until one day for 0.6 finally I changed it, and made the
necessary fixes retroactively before that switch, to make it work while
that was still in factory.&lt;/p&gt;
&lt;p&gt;Then I will remove the experimental code. I feel it’s very important and
even ideal to be able to always compare outputs to a fully working
solution. I am willing to postpone some cleanups until later date as a
price, but when then something in my mind tells me again “This cannot
possibly have ever worked”… a command line flag away, I have the
answer to compare, plus, that includes extra changes happened in the
meantime, they don’t add noise to diff outputs of generated C code for
example.&lt;/p&gt;
&lt;p&gt;Then looking at that diff, I can tell where the unwanted effect is, and
fix all the things, and that way find bugs much faster.&lt;/p&gt;
&lt;p&gt;Even better, if I decide to make a cleanup action as part of making a
change more viable to execute, then I get to execute it on stable
grounds, covered by the full test suite. I can complete that cleanup,
e.g. using variable identifier objects instead of mere strings was
needed to make “heap generators” more workable. But I was able to put
that one to active before “heap generators” was ever fully workable, and
complete it, and actually reap some of its benefits already.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hardware"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Hardware&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Obviously this takes a lot of hardware and CPU to be able to compile
this much Python code on a regular basis. And I really wish I could add
one of the new AMD Threadripper 2 to the mix. Anybody donating one to
me? Yes I know, I am only dreaming. But it would really help the cause.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="milestone-release"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Milestone Release&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the 0.6 is out, and already a hotfix that addresses mostly use cases
of people that didn’t work. More people seemed to have tried out 0.6.0
and as a result 0.6.0.1 is going to cover a few corner cases. So far I
have not encountered a single regression of 0.6.0, but instead it
contained ones for 0.5.33 which did have one that was not easy to fix.&lt;/p&gt;
&lt;p&gt;So that went really smooth.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ui-rework"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;UI rework&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The UI needs more work still. Specifically that packages do not
automatically include all stuff below them and have to be specified by
file path instead of by name, is really annoying to me.&lt;/p&gt;
&lt;p&gt;But I had delayed 0.6 for some UI work, and the quirks are to remain
some. I will work on these things eventually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Benchmarks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I updated the website to state that PyStone is now 312% faster, from
a number that was very old. I since then ran it with an updated version
for Python3, and it’s much less there. That is pretty sad.&lt;/p&gt;
&lt;p&gt;I will be looking into that for 0.6.1 release, or I will have to update
the wording to provide 2 numbers there, because it seems for Python3
performance with Nuitka it might be misleading.&lt;/p&gt;
&lt;p&gt;Something with unicode strings and in-place operations is driving me
crazy. Nuitka is apparently slower for that, and I can’t point where
that is happening exactly. It seems internally unicode objects are maybe
put into a different state from some operations, which then making
in-place extending in realloc fail more often, but I cannot know yet.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="inplace-operations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Inplace Operations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So more work has been put into those, adding more specialization, and
esp. also applying them for module variables as well. CPython can do
that, and actually is giving itself a hard time about it, and Nuitka
should be doing this much clever with its more static knowledge.&lt;/p&gt;
&lt;p&gt;But I cannot tell you how much scratching my head was wasted debugging
that. I was totally stupid about how I approached that, looking from the
final solution, it was always easy. Just not for me apparently.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="new-use-cases"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;New use cases&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Talked about those above. So the top level &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;logging&lt;/span&gt;&lt;/code&gt; module of your
own was working fine in accelerated mode, but for standalone it failed
and used the one from standard library instead. That kind of shadowing
happened because Nuitka was going from module objects to their names and
back to objects, which are bad in case of duplicates. That is fixed for
develop, and one of those risk cases, where it cannot be a hotfix
because it touched too much.&lt;/p&gt;
&lt;p&gt;Then pure Python3 packages need not have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init__.py&lt;/span&gt;&lt;/code&gt; and so far that
was best working for sub-packages, but after 0.6.0.1 hotfix, now it will
also work for the main module you compile to be that empty.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tcl-tk-standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Tcl/Tk Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So instructions have been provided how to properly make that work for
Python standalone on Windows. I have yet to live up to my promise and
make Nuitka automatically include the necessary files. I hope to do it
for 0.6.1 though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="caching-examined"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Caching Examined&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I am looking at ccache on Linux right now, and found e.g. that it was
reporting that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc&lt;/span&gt; &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; was called a lot at startup of Scons
and then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;g++&lt;/span&gt; &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; once. The later is particularly stupid,
because we are not going to use g++ normally, except if gcc is really
old and does not support C11. So in case a good one was found, lets
disable that version query and not do it.&lt;/p&gt;
&lt;p&gt;And for the gcc version output, monkey patching scons to a version of
getting that output that caches the result, removes those unnecessary
forks.&lt;/p&gt;
&lt;p&gt;So &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; is being called less frequently, and actually these
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; outputs appears to actually take measurable time. It’s not
dramatic, but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; was apparently getting locks, and that’s worth
avoiding by itself.&lt;/p&gt;
&lt;p&gt;That said, the goal is for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; to make them both
report their effectiveness of cache usage after the end of a test suite
run. That way I am hoping to notice and be able to know, if caching is
used to its full effect.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there. I put out a poll about the comment
system, and disabling Disqus comments as a result, I will focus on
Twitter for web site comments too now.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-8.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plans"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Plans&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working on the 0.6.1 release, attacking more in-place add operations as
a first goal, and now turning to binary operations, I am trying to shape
how using different helper functions to different object types looks
like. And to gain performance without C types. But ultimately the same
issue will arise there, what to do with mixed input types.&lt;/p&gt;
&lt;p&gt;My desire is for in-place operations to fully catch up with CPython, as
these can easily loose a lot of performance. Closure variables and their
cells are another target to pick on, and I feel they ought to be next
after module ones are now working, because also their solution ought to
be very similar. Then showing that depending on target storage, local,
closure, or module, is then faster in all cases would be a goal for the
0.6.1 release.&lt;/p&gt;
&lt;p&gt;This feels not too far away, but we will see. I am considering next
weekend for release.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-8.html" rel="alternate"/>
    <summary>Nuitka this week #8</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-10-02T06:05:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-9.html</id>
    <title>Nuitka this week #9</title>
    <updated>2018-10-20T06:17:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-9"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-9" id="id2"&gt;Nuitka this week #9&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id4"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-for-nuitka" id="id5"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#website-overhaul" id="id6"&gt;Website Overhaul&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance-work" id="id7"&gt;Performance Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#adding-specialized-object-operations" id="id8"&gt;Adding specialized object operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#finding-missing-specialized-object-code-generation" id="id9"&gt;Finding missing specialized object code generation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimizing-plain-object-operations-too" id="id10"&gt;Optimizing plain object operations too&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#lack-of-type-knowledge" id="id11"&gt;Lack of type knowledge&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance-regressions-vs-cpython" id="id12"&gt;Performance regressions vs. CPython&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#in-place-unicode-still-being-bad" id="id13"&gt;In-place unicode still being bad&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks-missing" id="id14"&gt;Benchmarks Missing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#type-shapes-in-optimization" id="id15"&gt;Type shapes in optimization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#control-flow-escape" id="id16"&gt;Control flow escape&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#overall" id="id17"&gt;Overall&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#improved-annotations" id="id18"&gt;Improved Annotations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#release-or-not" id="id19"&gt;Release or not&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone-improvements" id="id20"&gt;Standalone Improvements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#caching-examined" id="id21"&gt;Caching Examined&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python3-deprecation-warnings" id="id22"&gt;Python3 deprecation warnings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id23"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id24"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id25"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My new communication strategy is a full success, engagement with Nuitka
is on an all time high.&lt;/p&gt;
&lt;p&gt;But the recent weeks more than ever highlighted why I have to force
myself to do it. I do not like to talk about unfinished stuff. And right
now, there is really a lot of it, almost only it. Also I was ill, and
otherwise busy, so this is now late by a week.&lt;/p&gt;
&lt;p&gt;But I am keeping it up, and will give an update, despite the feeling
that it would be better to just finish a few of those things and then
talk about it, but then it will take forever and leave you in the dark.
And that is not what is supposed to be.&lt;/p&gt;
&lt;p&gt;Bear in mind, that this is supposed to be a quick, not too polished, and
straight from top of my head, even if really a lot of content. But I
feel that esp. the optimization parts are worth reading.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the 0.6.0 release was a huge success, but it definitely wasn’t
perfect, and hotfixes were necessary. The latest one 0.6.0.5 was done
just yesterday and actually contains one for an important
mis-optimization being done, and you ought to update to it from any
prior 0.6.0 release.&lt;/p&gt;
&lt;p&gt;There are also a few remaining compatibility issues fixed for 3.7 and
generally using the latest hotfix is always a good idea.&lt;/p&gt;
&lt;p&gt;Kind of what one has to expect from a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt; release, this one also had
more expose than usual is seems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I need more people to work on Nuitka. One way of doing this could be to
participate in Google Summer of Code under the Python umbrella. To make
that possible, I need you to volunteer as a mentor. So please, please,
do.&lt;/p&gt;
&lt;p&gt;I know you will feel not qualified. But I just need a backup that will
help a student around obstacles in case I go missing. Contact me and I
will be very happy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="website-overhaul"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Website Overhaul&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I updated the website to recent Nikola and dropped the tag cloud that I
was using. Should have cleaner and better looks. Also integrated privacy
aware sharing links, where two clicks are necessary to share a page or
article like this one on Twitter, Facebook, etc.&lt;/p&gt;
&lt;p&gt;Also the download page saw some structural updates and polishing. It
should easier to overview now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Performance Work&lt;/a&gt;&lt;/h2&gt;
&lt;section id="adding-specialized-object-operations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Adding specialized object operations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The feedback for performance and the work on 0.6.1 are fully ongoing,
and there are many major points that are ongoing. I want to briefly
cover each one of them now, but many of them will only have full effect,
once everything is in place, which each one is very critical.&lt;/p&gt;
&lt;p&gt;So, with the type tracing, objects have known types, and short of using
a C type, knowing e.g. that an object is an &lt;cite&gt;int&lt;/cite&gt;, and the other one
too, doing &lt;cite&gt;+&lt;/cite&gt; for them can take a lot of advantage avoiding unrelated
checks and code paths, even if still using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; at the end of
the day.&lt;/p&gt;
&lt;p&gt;And even we are only knowing it’s &lt;em&gt;not&lt;/em&gt; an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;, but say one value is
a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tuple&lt;/span&gt;&lt;/code&gt; and the other an unknown, that allows to remove checks for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; shortcuts as they can no longer apply. These are tiny
optimizations then, but still worthwhile.&lt;/p&gt;
&lt;p&gt;To further this, first the inplace operations for a couple of more or
less randomly selected types, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tuple&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt;, have been looked at and
have gotten their own special object based helpers if one or both types
are known to be of that kind.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="finding-missing-specialized-object-code-generation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Finding missing specialized object code generation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A report has been added, that will tell when such an operation could
have been used, but was not available. This uncovered where typical
stuff goes non optimized, a nice principle to see what is actually
happening.&lt;/p&gt;
&lt;p&gt;So adding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; would now give a warning, although of
course, the optimization phase ought to catch the static raise that is
and never let it get there, so this report also addresses missing
optimization in an earlier phase.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimizing-plain-object-operations-too"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Optimizing plain object operations too&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So the in-place operations were then covered, so this was extended to
mere &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; operations too, the ones that are not in-place. Sometimes,
esp. for immutable types, there was already code for that, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;
doesn’t really do it, in other cases, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; + &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; code for a
quicker concat was added.&lt;/p&gt;
&lt;p&gt;And again a report for where it’s missing was added and basic coverage
for most of the types. However, in some instances, the optimization
doesn’t use the full knowledge yet. But where it does, it will shove off
quite a few cycles.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lack-of-type-knowledge"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Lack of type knowledge&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To apply these things effectively, optimization and value tracing need
to know types in the first place. I have found two obstacles for that.
One are branch merges. If a branch or both assign to the same type or
original type, well the type is changed. Previously it became “unknown”
which is treated as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;object&lt;/span&gt;&lt;/code&gt; for code generation, and allows nothing
really. But now that is better on develop now, and was actually a
trivial missing thing.&lt;/p&gt;
&lt;p&gt;The other area is loops. Loops put values to unknown when entering loop
body, and again when leaving. Essentially making type tracing not
effective where it is needed the most to achieve actual performance.
Also this was limiting the knowledge for all function to one type to not
happening for these kinds of variables that were assigned inside a loop
at all.&lt;/p&gt;
&lt;p&gt;Took me a while, but I figured out how to build type tracing for loops
that works. It currently is still unfinished in my private repo, but
passes all tests, I would just like to make it use dedicated interfaces,
and clean it up.&lt;/p&gt;
&lt;p&gt;I will most likely have that for 0.6.1 too and that should expand the
cases where types are known in code generation by a fair amount.&lt;/p&gt;
&lt;p&gt;The effect of that will be that more often C code generation will
actually see types. Currently e.g. a boolean variable that is assigned
in a loop, cannot use the C target type in code generation. Once loop
code is merged, it will however take advantage there too. And only then
I think adding “C int” as a C type makes sense at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-regressions-vs-cpython"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Performance regressions vs. CPython&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Then another area is performance regressions. So one thing I did early
on in the 0.6.1 cycle was using the “module var C target type” to get
in-place working for those too. Doing string concatenations on module
variables could be slower by an order of magnitude, as could be other
operations.&lt;/p&gt;
&lt;p&gt;I still need to do it for closure variables too. Then Nuitka will do at
least as many of them perfectly as CPython does. It also will be better
at it them, because e.g. it doesn’t have to delete from the module
dictionary first, due to it never taking a reference, and same applies
to the cell. Should be faster for that too.&lt;/p&gt;
&lt;p&gt;But strings in-place on these if not optimized, it will look very ugly
in terms of worse performance, so 0.6.0 was still pretty bad for some
users. This will however hopefully be addressed in 0.6.1 then.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-place-unicode-still-being-bad"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;In-place unicode still being bad&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another field was in-place string add for the already optimized case, it
was still slower than CPython, and I finally found out what causes this.
And that is the using of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libpython&lt;/span&gt;&lt;/code&gt; where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyUnicode_Append&lt;/span&gt;&lt;/code&gt; is far
worse than in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt; binary that you normally use, I have see
that at least for 3.5 and higher CPython. Analysis showed that e.g.
MiniConda had the issue to a much smaller extent, and was being much
faster anyway, but probably just has better &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libpython&lt;/span&gt;&lt;/code&gt; compilation
flags.&lt;/p&gt;
&lt;p&gt;So what to do. Ultimately that was to be solved by including a clone of
that function, dubbed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UNICODE_APPEND&lt;/span&gt;&lt;/code&gt; that behaves the same, and can
even shove off a couple of cycles, by indicating the Python error status
without extra checks, and specializing it for the pure &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt; &lt;span class="pre"&gt;+=&lt;/span&gt;
&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; case that we see most often, same for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UNICODE_CONCAT&lt;/span&gt;&lt;/code&gt; for
mere &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Right now the benchmarks to show it do not exist yet. Again something
that typically wants me to delay stuff. But as you can imagine, tracking
down these hard issues, writing that much code to replace the unicode
resizing, is hard enough by itself.&lt;/p&gt;
&lt;p&gt;But I hope to convince myself that this will allow to show that for
compiled code, things are going to be faster only now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks-missing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Benchmarks Missing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In fact, speedcenter as a whole is currently broken, mostly due to
Nikola changes that I am trying to work around, but it will take more
time apparently and isn’t finished as I write this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="type-shapes-in-optimization"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Type shapes in optimization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another optimization end, is the type shapes of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; operation
itself. Right now what is being done is that the shape is derived from
the shape of the left argument with the right shape to be considered by
it. These also have reports now, for cases where they are missing. So
saying e.g. that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; + &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; results in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; and these
kinds of things, are stuff being encoded there right now.&lt;/p&gt;
&lt;p&gt;This is necessary step to e.g. know that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; + &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; -&amp;gt;
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int_or_long&lt;/span&gt;&lt;/code&gt;, to make effective loop variable optimization.&lt;/p&gt;
&lt;p&gt;Without these, and again, that is a lot of code to write, there is no
way to hope for wide spread type knowledge in code generation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="control-flow-escape"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Control flow escape&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Something missing there, is to also make it known that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; unlike it
currently is now, should not in all cases lead to “control flow escape”
with the consequence of removing all stuff, and expecting an exception
possible, but instead to let the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; type also make known that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;
&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; ont it not only gives an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int_or_long&lt;/span&gt;&lt;/code&gt; result shape, but also
while doing so, that it will never raise an exception (bare
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MemoryError&lt;/span&gt;&lt;/code&gt;), and therefore allow more optimization to happen and
less and therefore faster code generated.&lt;/p&gt;
&lt;p&gt;Until this is done, what is actually going to happen is that while the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; result is known, Nuitka will assume control flow escape.&lt;/p&gt;
&lt;p&gt;And speaking of that, I think this puts too many variables to a too
unknown state. You can to distrust all values, but not the types in this
case, so that could be better, but right now it is not. Something else
to look into.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="overall"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Overall&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So 0.6.1 is in full swing in terms of optimization. All these ends need
a completion, and then I can expect to use advantage of things in a
loop, and ultimately to generate C performance code for one example of
loop. esp. if we add a C &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; target type, which currently isn’t yet
started, because I think it would barely be used yet.&lt;/p&gt;
&lt;p&gt;But we are getting there and I wouldn’t even say we are making small
steps, this is all just work to be completed, nothing fundamental about
it. But it may take more than one release for sure.&lt;/p&gt;
&lt;p&gt;Mind you, there is not only &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt;, there is also &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%&lt;/span&gt;&lt;/code&gt;,
and many more operators, all of them will require work. Granted, loop
variables tend to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; more often, but any un-optimized operation
will immediately loose a lot of type knowledge.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="improved-annotations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Improved Annotations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two kinds of annotations, ones for classes and modules, which
actually are stored in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__annotations__&lt;/span&gt;&lt;/code&gt; variable, and everything
else is mostly just ignored.&lt;/p&gt;
&lt;p&gt;So Nuitka got the criterion wrong, and did one thing for functions, and
the other for everything else. So that annotations in generators,
coroutines and asyncgen ended up with wrong, crashing, and slower code,
due to it updating the module &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__annotations__&lt;/span&gt;&lt;/code&gt;, so that one is
important too if you have to do those.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="release-or-not"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Release or not&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To release or not. There is at least one bug about star imports that
affects numpy that is solved in develop, and wasn’t back ported, and I
was thinking it only applies to develop, but in fact does to stable. It
makes me want to release even before all these optimization things
happen and are polished, and I might well decide to go with that.&lt;/p&gt;
&lt;p&gt;Maybe I only add the closure in-place stuff and the polish the loop SSA
stuff, and then call it a release. It already will solve a lot of
performance issues that exist right now, while staging the ground for
more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="standalone-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Standalone Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Standalone work is also improving. Using pyi files got more apt, and a
few things were added, all of which make sense to be used by people.&lt;/p&gt;
&lt;p&gt;But I also have a backlog of issues there however. I will schedule one
sprint for those I guess, where I focus on these. I am neglecting those
somewhat recently.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="caching-examined"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Caching Examined&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the static code, I now noticed that it’s compiled for each target
name, due to the build directory being part of the object file for
debug. For gcc 8 there is an option to allow pointing at the original
static C file location, and then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; is more effective, because
object files will be the same.&lt;/p&gt;
&lt;p&gt;That’s actually pretty bad, as most of my machines are on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc-6&lt;/span&gt;&lt;/code&gt; and
makes me think that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libnuitka.a&lt;/span&gt;&lt;/code&gt; is really more of an requirement
than ever. I might take some time to get this sorted out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python3-deprecation-warnings"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;Python3 deprecation warnings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So Nuitka supports the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;no_warnings&lt;/span&gt;&lt;/code&gt; Python flag, and for a long time
I have been annoyed at how it was not working for Python3 in some cases.
The code was manually settign filters, but these would get overridden by
CPython test suites testing warnings. And the code said that there is no
CPython C-API to control it, which is just plain wrong.&lt;/p&gt;
&lt;p&gt;So I changed that and it became possible to remove lots of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ignore_stderr&lt;/span&gt;&lt;/code&gt; annotations in CPython test suites, and more
importantly, I can stop adding them for when running older/newer CPython
version with a suite.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-9.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-9.html" rel="alternate"/>
    <summary>Nuitka this week #9</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-10-20T06:17:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-10.html</id>
    <title>Nuitka this week #10</title>
    <updated>2018-11-21T06:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-10"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-10" id="id2"&gt;Nuitka this week #10&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#hotfixes" id="id4"&gt;Hotfixes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-for-nuitka" id="id5"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#pythran-and-nuitka" id="id6"&gt;Pythran and Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance-work" id="id7"&gt;Performance Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#adding-specialized-object-operations" id="id8"&gt;Adding specialized object operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#controlflow-descriptions" id="id9"&gt;Controlflow Descriptions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#preparations-for-comparison-operations" id="id10"&gt;Preparations for comparison operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#comparison-conditions" id="id11"&gt;Comparison Conditions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#local-variable-escaping" id="id12"&gt;Local variable escaping&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#benchmarks-missing" id="id13"&gt;Benchmarks Missing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#static-linking" id="id14"&gt;Static Linking&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#conda-cc" id="id15"&gt;Conda CC&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#annotations-future-feature" id="id16"&gt;Annotations Future Feature&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#msi-files" id="id17"&gt;MSI files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#overall" id="id18"&gt;Overall&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id19"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id20"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id21"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recently it was a bit more tough to make that decision. First, there was
much going privately, with me ill, then child ill, and ill again, and
myself, and that made me have a much harder time to communicate about
incomplete things.&lt;/p&gt;
&lt;p&gt;Even now, I am torn between fixing issues for 0.6.1 and doing this, but
I know that it will take at least one week, so I am missing the point,
if I wait for it more.&lt;/p&gt;
&lt;p&gt;Bear in mind, that this is supposed to be a quick, not too polished, and
straight from top of my head, even if really a lot of content. But I
feel that esp. the optimization parts are worth reading.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hotfixes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Hotfixes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There has been another hotfix, 0.6.0.6 and there ought to be one
0.6.0.7, at least on factory there is a bunch of stuff for it, but I
didn’t actually do it yet. I was wandering between there will be a
release anyway, and the feeling that some of the material may cause
regressions, so I might skip on that really.&lt;/p&gt;
&lt;p&gt;So for the most fixes, I suspect, develop is going to be the way until
next week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nobody has stepped up, which means it will not happen unfortunately.
This would be your last chance to step up. I know you will feel not
qualified. But I just need a backup that will help a student around
obstacles in case I go missing. Contact me and I will be very happy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pythran-and-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Pythran and Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As suggested by &amp;#64;wuoulf (Wolf Vollprecht) we had a meeting at the side
of the PyCon DE 2018 conference in Karlsruhe, abusing the C++ regular
table as a forum for that, which was a very nice experience.&lt;/p&gt;
&lt;p&gt;First of all, Wolf is so much more knowledgeable about AnaConda and
could point out to me, very important stuff, not the least, that
AnaConda contains its own compiler, which I have successfully used
since, to first add easier installation instructions for Windows, and
second, to successfully statically link with LTO on Linux amd64. Both of
which are important for me.&lt;/p&gt;
&lt;p&gt;But for Pythran which is limited Python, specialized to translate Numpy
API to C++, we showed each other, Nuitka and Pythran details, and
somehow in my mind a plan formed how Nuitka could use the Pythran tricks
long term, and mid term, how it could include a plugin that will allow
to integrate with Pythran compilation.&lt;/p&gt;
&lt;p&gt;This was a huge success.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Performance Work&lt;/a&gt;&lt;/h2&gt;
&lt;section id="adding-specialized-object-operations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Adding specialized object operations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;See last week, this has seen more completion. Both &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;+=&lt;/cite&gt; are more
or less covered for the selected subset. The CPython test suites were
initially not finding uses, but with more and more optimization phase
improvements, it challenges code generation with missing ones, and then
I added them more and more.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="controlflow-descriptions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Controlflow Descriptions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Shapes were added for the &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;&amp;lt;&lt;/cite&gt; operation so far, but didn’t
influence anything else really but code generation, but of course they
should also impact optimization phase.&lt;/p&gt;
&lt;p&gt;So the query for type shape has been enhanced to return not only a type
shape saying that &lt;cite&gt;int+float -&amp;gt; float&lt;/cite&gt;, but also now an object that
describes impact on control flow of the program. This can then say e.g.
that this doesn’t execute arbitrary code, and that it does not modify
input values, things used in the code generation to avoid error checks,
and in the optimization to not have to mark things as unknown.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="preparations-for-comparison-operations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Preparations for comparison operations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So optimization now also has proper type shape functions for the &lt;cite&gt;&amp;lt;&lt;/cite&gt; and
the warnings when they fail to know what to do for concrete types. This
allows to actually remove checks, but so far this wasn’t exposed for
neither &lt;cite&gt;+&lt;/cite&gt; or for &lt;cite&gt;&amp;lt;&lt;/cite&gt;. Doing this eliminates the exception check for
the operation part, where previously it was done if anything in the
expression could raise.&lt;/p&gt;
&lt;p&gt;Specializing the rich comparisons helper codes is the next step, but so
far I didn’t quite get to it yet, but it has been started.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="comparison-conditions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Comparison Conditions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Preparing &lt;cite&gt;&amp;lt;&lt;/cite&gt; optimization for the loop, I noticed that &lt;cite&gt;not&lt;/cite&gt; was
optimized for &lt;cite&gt;in&lt;/cite&gt; to become &lt;cite&gt;not in&lt;/cite&gt;, and also &lt;cite&gt;is&lt;/cite&gt; to become &lt;cite&gt;is not&lt;/cite&gt;,
etc. but for comparisons, where we can not the result is of bool shape,
we can now also switch &lt;cite&gt;not &amp;lt;&lt;/cite&gt; to &lt;cite&gt;&amp;gt;=&lt;/cite&gt; and &lt;cite&gt;not =&lt;/cite&gt; to &lt;cite&gt;!=&lt;/cite&gt; of course.&lt;/p&gt;
&lt;p&gt;And since our reformulation of &lt;cite&gt;while a &amp;lt; b&lt;/cite&gt; ends up having a statement
like &lt;cite&gt;if not a &amp;lt; b: break&lt;/cite&gt; as part of its re-formulation, that is again
one step closer to optimizing my example loop.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="local-variable-escaping"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Local variable escaping&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Much to my shock, I noticed that the code which is responsible to handle
escaping control flow (i.e. unknown code is executed), was not only
doing what it was supposed to do, i.e. mark closure variables as
unknown, but more or less did it for all local variables with Python3.&lt;/p&gt;
&lt;p&gt;Fixing that allows for a lot more optimization obviously, and makes my
test find missing ones, and even bugs in existing ones, that were
previously hidden. A good thing to notice this regression (was better
once), now that I am looking at concrete examples.&lt;/p&gt;
&lt;p&gt;One noticeable sign was that more of my tests failed with warnings about
missing code helpers. And another that in my while loop with &lt;cite&gt;int&lt;/cite&gt;
increase, it now seems as if Python3 is good. For Python2, the “int or
long” shape will need dedicated helpers. That is because &lt;cite&gt;ìnt + int&lt;/cite&gt;
becomes either &lt;cite&gt;int&lt;/cite&gt; or &lt;cite&gt;long&lt;/cite&gt; there, where Python3 only has &lt;cite&gt;long&lt;/cite&gt; but
renamed it &lt;cite&gt;int&lt;/cite&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benchmarks-missing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Benchmarks Missing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Speedcenter got repaired, but I need to add the loop examples I am using
as test cases before next release, so I can show what Nuitka 0.6.1 will
have achieved or at least have improved somewhat already.&lt;/p&gt;
&lt;p&gt;But currently these examples only serve as input for general
improvements that then take a lot of time, and don’t have immediate
impact on their own.&lt;/p&gt;
&lt;p&gt;Still would be good to see where Nuitka is standing after each one.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="static-linking"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Static Linking&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So static linking works now, provided it’s not a &lt;cite&gt;pyenv&lt;/cite&gt; crappy
&lt;cite&gt;libpython.a&lt;/cite&gt; but one that can actually work. I got this to work on
Linux and using the Conda CC, even LTO will work with it. Interestingly
then linking is noticely slow, and I bet &lt;cite&gt;ccache&lt;/cite&gt; and the likes won’t
help with that.&lt;/p&gt;
&lt;p&gt;I am interested to see what this means for performance impact. But it
will allow to address issues, where embedded CPython run time is plain
slower than the one that lives in the python binary. For acceleration
this is great news.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conda-cc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Conda CC&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using Conda CC by default as a fallback in &lt;cite&gt;–mingw&lt;/cite&gt; mode on Windows is
something that was easy to add. So when no other &lt;cite&gt;gcc&lt;/cite&gt; is found, and
MSVC is not tried in this mode, and the right directory is added to
&lt;cite&gt;PATH&lt;/cite&gt; automatically, with Anaconda, things should now be smoother. It
has also its own &lt;cite&gt;libpython.a&lt;/cite&gt;, not sure yet if it’s a static link
library, that would be fantastic, but unlike standard MinGW64 we do not
have to roll our own at least.&lt;/p&gt;
&lt;p&gt;I will try with &lt;cite&gt;–lto&lt;/cite&gt; eventually though and see what it does. But I
think static linking on Windows is not supported by CPython, but I am
not entirely sure of that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="annotations-future-feature"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Annotations Future Feature&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Found a 3.7 feature that is not covered by the test suite, the
&lt;cite&gt;__future__&lt;/cite&gt; flag &lt;cite&gt;annotations&lt;/cite&gt; wasn’t working as expected. In this,
strings are to be used for &lt;cite&gt;__annotations__&lt;/cite&gt; where they show up (many
are ignored simply) and that requires an &lt;cite&gt;unparse&lt;/cite&gt; function, going from
parsed ast (presumably it’s still syntax checked) back to the string,
but that was only very hard to get at, and with evil hackery.&lt;/p&gt;
&lt;p&gt;For 3.8 a bug fix is promised that will give us the string immediately,
but for now my hack must suffice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="msi-files"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;MSI files&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the 3.7.1 release, there are MSI files again, as the
regression of 3.7.0 to build them has been fixed in that release. The
MSI files will work with 3.7.0 also, just the building was broken.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="overall"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Overall&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So 0.6.1 is in still in full swing in terms of optimization. I think I
need to make a release soon, simply because there is too much
unreleased, but useful stuff already.&lt;/p&gt;
&lt;p&gt;I might have to postpone my goal of C int performance for one example
loop until next release. No harm in that. There already are plenty of
performance improvements across the board.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-10.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-10.html" rel="alternate"/>
    <summary>Nuitka this week #10</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-11-21T06:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-11.html</id>
    <title>Nuitka this week #11</title>
    <updated>2018-12-10T07:09:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-11"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-11" id="id2"&gt;Nuitka this week #11&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization-work" id="id4"&gt;Optimization Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#levels-of-optimization" id="id5"&gt;Levels of Optimization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#week-of-bugfixing" id="id6"&gt;Week of Bugfixing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#exec-on-filehandles" id="id7"&gt;Exec on Filehandles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#pkgutil-iter-modules" id="id8"&gt;pkgutil.iter_modules&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#when-to-release" id="id9"&gt;When to release&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-for-nuitka" id="id10"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id11"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id12"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id13"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to force myself to report more publicly, and it feels good.
This time things are in a stablizing period, and I feel I have a
consistent message.&lt;/p&gt;
&lt;p&gt;Bear in mind, that this is supposed to be a quick, not too polished, and
straight from top of my head, even if really a lot of content. But I
feel that esp. the optimization parts are worth reading.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimization-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Optimization Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, the 0.6.1 optimization work has been a lot. And it’s containing
improvements on every level. I think I will detail the levels in another
section.&lt;/p&gt;
&lt;section id="levels-of-optimization"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Levels of Optimization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First level is of course node level optimization. Here 0.6.1 adds many
things, from better handling of closure variables not all as unknown
every time control flow escapes, to some operations &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; and
comparisons on known built-in type shapes to now be able to statically
tell that they do not raise. The opposite (does definitely raise) is
prepared, but not yet used.&lt;/p&gt;
&lt;p&gt;This allows for type shapes to be longer known. Now &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a+b+c&lt;/span&gt;&lt;/code&gt; can be
known, but previously only &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a+b&lt;/span&gt;&lt;/code&gt; was sort of known, and little used
information.&lt;/p&gt;
&lt;p&gt;The next level is picking the C target type. Here seeing more operations
and understanding more variables allows to more often pick the &lt;cite&gt;C bool&lt;/cite&gt;
or &lt;cite&gt;C void&lt;/cite&gt; types over the &lt;cite&gt;PyObject *&lt;/cite&gt; C type. For 0.6.1 I have
observed that esp. more indicator variables make it to that stage,
generating way more efficient C code (for that indicator variable) for
those in many instances, esp. with loops, as these no longer loose type
shape information as badly as they did.&lt;/p&gt;
&lt;p&gt;The, another level is when it is treated as an object, but known to be
&lt;cite&gt;int&lt;/cite&gt;, there are way more helpers used for &lt;cite&gt;+&lt;/cite&gt;/&lt;cite&gt;+=&lt;/cite&gt; and a whole new set
of them for comparisons, that in these cases of full or partial type
knowledge operate faster.&lt;/p&gt;
&lt;p&gt;And even if e.g. only one type is known, this still allows to not make a
lot of tests about it, and to avoid attempted shortcuts that cannot
work. For 0.6.1 the &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;+=&lt;/cite&gt; are pretty well covered for these, but
some variants are not yet tuned to take all type knowledge advantage.&lt;/p&gt;
&lt;p&gt;These will be also the building block, once the C type layer picks types
like “C int or PyObject * known to be int” with indicator flags which
values are currently valid to use, then these specialized calls still
make sense.&lt;/p&gt;
&lt;p&gt;The most attrative level, “C int” has not been reached for 0.6.1 but for
my loop example and Python3, I can say that now would be a nice time to
start it, as type shape knowledge is all there. This was totally not the
case for 0.6.0, but it seems that this step will have to be postponed to
another release, maybe 0.6.2, maybe even later.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="week-of-bugfixing"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Week of Bugfixing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But something that bothers me is seeing the issue tracker pile up on
actionable items, where I just have not taken action. So as announced on
Twitter already, I am having and continue to have bug fixing time. I am
acting on issues that are relatively old and easy to act on, or where I
have no hope of this happening by anybody else anymore.&lt;/p&gt;
&lt;p&gt;I have listed some interesting examples below. But basically these are
small, relatively unimportant, yet somewhat import for some use cases
things.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="exec-on-filehandles"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Exec on Filehandles&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So when doing exec on a filehandle, Nuitka was at runtime reading the
source, then compiling it, but forgetting about the filename. This makes
things like &lt;cite&gt;inspect.getsource()&lt;/cite&gt; fail on functions from there, and ugly
tracebacks not pointing to the filename. This was one of the things
which I had understood, but not did the actual work yet.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pkgutil-iter-modules"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;pkgutil.iter_modules&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And another one, which seemed just not done, but turned out to be rather
complex, this one needs to populate a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.path_importer_cache&lt;/span&gt;&lt;/code&gt; for
imported modules, and then to report the child modules. There was no
object to carry that information, so now instances of the meta path
based importer are associated for every import.&lt;/p&gt;
&lt;p&gt;Turns out for Python3, my simplistic type building calling &lt;cite&gt;type&lt;/cite&gt;
manually here does not work, as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init__&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iter_modules&lt;/span&gt;&lt;/code&gt; do not
become anything but static methods ever. Needs a real type.&lt;/p&gt;
&lt;p&gt;Plus, I had to disable it for now, because mixed packages, like the one
we do with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;where&lt;/span&gt; &lt;span class="pre"&gt;only&lt;/span&gt; &lt;span class="pre"&gt;part&lt;/span&gt; &lt;span class="pre"&gt;is&lt;/span&gt; &lt;span class="pre"&gt;compiled&lt;/span&gt; &lt;span class="pre"&gt;(the&lt;/span&gt; &lt;span class="pre"&gt;one&lt;/span&gt;
&lt;span class="pre"&gt;required)&lt;/span&gt; &lt;span class="pre"&gt;and&lt;/span&gt; &lt;span class="pre"&gt;part&lt;/span&gt; &lt;span class="pre"&gt;is&lt;/span&gt; &lt;span class="pre"&gt;pure&lt;/span&gt; &lt;span class="pre"&gt;Python&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;disk&lt;/span&gt; &lt;span class="pre"&gt;still,&lt;/span&gt; &lt;span class="pre"&gt;stopped&lt;/span&gt; &lt;span class="pre"&gt;to&lt;/span&gt; &lt;span class="pre"&gt;work.&lt;/span&gt; &lt;span class="pre"&gt;The&lt;/span&gt;
&lt;span class="pre"&gt;``iter_modules&lt;/span&gt;&lt;/code&gt; it seems will have to cover that case too.&lt;/p&gt;
&lt;p&gt;So no luck, postponing this until next week of bug fixes. Frustrating a
bit, but such is life.&lt;/p&gt;
&lt;section id="when-to-release"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;When to release&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are still some issues that I want to get to. Specicially the
OpenGL plugins which has been research ever since, and nobody stepped
up, but it’s rather trivial. And the Tcl/Tk for Windows. People have
provided sufficient instructions for a plugin that I am going to write
this week.&lt;/p&gt;
&lt;p&gt;Once I feel the issue tracker is clean, I will release. As a matter of
experience, it is then going to grow a lot again.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally somebody has stepped up, which means a lot to me. Now to the
actual work!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-11.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-11.html" rel="alternate"/>
    <summary>Nuitka this week #11</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2018-12-10T07:09:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-12.html</id>
    <title>Nuitka this week #12</title>
    <updated>2019-02-08T14:09:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-12"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-12" id="id2"&gt;Nuitka this week #12&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization-work" id="id4"&gt;Optimization Work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#week-of-bugfixing" id="id5"&gt;Week of Bugfixing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-flag-o-and-oo" id="id6"&gt;Python flag -O and -OO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#virtualenv-vs-venv" id="id7"&gt;Virtualenv vs. venv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-for-nuitka" id="id8"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-organisation" id="id9"&gt;Nuitka Organisation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#windows-dependencies-from-pefile" id="id10"&gt;Windows Dependencies from pefile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tkinter-plugin" id="id11"&gt;Tkinter Plugin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#numpy-plugin" id="id12"&gt;Numpy Plugin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id13"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id14"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id15"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the holiday season I sort of neglected these postings, but there
are other fields, where I have put my focus, but I think these postings
are now going to resume.&lt;/p&gt;
&lt;p&gt;A quick update in a while in an eternally fluent situation, and not too
polished.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimization-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Optimization Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, the 0.6.2 optimization work has been not a lot yet. I started some
work on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; C type and it looked good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="week-of-bugfixing"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Week of Bugfixing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I did this, and it turned out rather long. I continued fixing things
and finishing up open things to the point that it now is clean. I hate
to be falling behind. I am touching on a few more interesting topics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-flag-o-and-oo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Python flag -O and -OO&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nuitka was supporting &lt;cite&gt;-O&lt;/cite&gt; but doing what should only the done for &lt;cite&gt;-OO&lt;/cite&gt;
which I only learned of now. So this is going to be supported both now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtualenv-vs-venv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Virtualenv vs. venv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Accelerated binaries were not running with full &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.path&lt;/span&gt;&lt;/code&gt; in the
virtualenv, because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt; module uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.prefix&lt;/span&gt;&lt;/code&gt; and that was not
propagated,but it now is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the GSoC 2019 page is shaping up, the pull request to list Nuitka on
the PSF project pages has been merged. More tweaking will be needed to
get into perfect shape, and that has been my main communication time
effort.&lt;/p&gt;
&lt;p&gt;Finally somebody had stepped up for mentor, which means a lot to me. Now
we need to see if students are willing to pick us.&lt;/p&gt;
&lt;p&gt;And because I publish this too late. Already a bunch of stundents are
showing interest and are hacking on Nuitka, which keeps me even more
busy, and makes me extremely happy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nuitka-organisation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Nuitka Organisation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Nuitka organisation on Github was introduced for my a while ago, and
I had transferred the ownership of the Nuitka repository to there.
Having moved the issue tracking to there, I was going more all in on it.&lt;/p&gt;
&lt;p&gt;Recently more people have submitted PRs and with incredible quality and
willingness to support it even after merge of their PR. No dry by
contribution, but people looking to actually improve Nuitka together
with me.&lt;/p&gt;
&lt;p&gt;Therefore I welcome Orsiris and Jorj on board and am really happy about
it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="windows-dependencies-from-pefile"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Windows Dependencies from pefile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So Orsiris de Jong implemented a replacement for the dependency walker
based code to scan DLLs for Windows standalone using the &lt;cite&gt;pefile&lt;/cite&gt;
module, which is likely way better at this. For starters it’s
experimental in the next release, but I expect it to soon become the
default.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tkinter-plugin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Tkinter Plugin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And Jorj X. McKie implemented a Windows Tkinter plug-in that deals with
copying of the TCL installation and integrating it with Nuitka
standalone for distribution.&lt;/p&gt;
&lt;p&gt;That is very nice and seems to affect a lot of people using that GUI
style it seems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="numpy-plugin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Numpy Plugin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And Jorj X. McKie also implemented a NumPy plug-in that deals with the
various acceleration methods there are, e.g. MKL, Blas, I have no idea.
It copies the needed DLLs along and makes sure that &lt;cite&gt;numpy&lt;/cite&gt; stays fast
in standalone mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-12.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-12.html" rel="alternate"/>
    <summary>Nuitka this week #12</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2019-02-08T14:09:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-13.html</id>
    <title>Nuitka this week #13</title>
    <updated>2019-05-12T11:07:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-13"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-13" id="id2"&gt;Nuitka this week #13&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-2019" id="id4"&gt;Google Summer of Code 2019&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#my-experience" id="id5"&gt;My Experience&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#accepted-students" id="id6"&gt;Accepted Students&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization-work" id="id7"&gt;Optimization Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#core-stuff" id="id8"&gt;Core Stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#faster-windows-dependencies" id="id9"&gt;Faster Windows Dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-organisation" id="id10"&gt;Nuitka Organisation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plugin-work" id="id11"&gt;Plugin Work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#opening-up" id="id12"&gt;Opening Up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id13"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id14"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id15"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Communication was a lot more, just not these postings. Nuitka has
ventured into important realms.&lt;/p&gt;
&lt;p&gt;First, active developers have joined Nuitka. Second, as a consequence of
the later, Nuitka indeed was able to participate with a insanely
powerful offering of 4 mentors.&lt;/p&gt;
&lt;p&gt;This meant, that a lot of technical or project management debt hat to be
dealt with, and there was no time to make this kind of posting. This is
probably good news on all fronts, except that I feel they are missing,
and am glad to be able to resume them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-2019"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Google Summer of Code 2019&lt;/a&gt;&lt;/h2&gt;
&lt;section id="my-experience"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;My Experience&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was the most crazy ride and fun. Became the admin of an active
sub-organisation under the PSF umbrella for GSoC 2019. So shortly after
the announcement of the project lists, students flooded in, and starting
working on things right away as early as February.&lt;/p&gt;
&lt;p&gt;They were working hard to prove themselves and get to know Nuitka,
asking many questions, with us having lots of email interviews, and even
a lot of video calls, where I personally talked to people about ideas.&lt;/p&gt;
&lt;p&gt;This happened simultaneously to more experienced developers joining the
project as well, making very important contributions.&lt;/p&gt;
&lt;p&gt;This basically meant, that many days 90%-100% of my Nuitka time was for
communication or working off technical debts I knew there were, or for
preparing things, I want to have with multiple people working on the
code base. This will be detailed in other sections.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="accepted-students"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Accepted Students&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of this has paid of in that we now have 2 really good students to
work on 2 Nuitka projects over the summer. Let’s welcome Batakrishna and
Tommy in separate posts. They will introduce themselves and what they
are going to do shortly, in separate posts.&lt;/p&gt;
&lt;p&gt;Lets just say, this is fantastic news. We had so many good applications
and its a shame, but we knew right away, not everybody who deserved it
could be picked. But this is going to be a good chance for us to get to
be open and welcoming to new people.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="optimization-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Optimization Work&lt;/a&gt;&lt;/h2&gt;
&lt;section id="core-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Core Stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, the 0.6.3 release (btw. on Windows, be sure to use the 0.6.3.1
hotfix), which was made as a consolidation effort to get the good work
of mostly other people out, didn’t contain much optimization work for
the core, as that is still my thing.&lt;/p&gt;
&lt;p&gt;However, this changed a lot. An idea that came to my mind for how to do
the massive amounts of specialized helpers needed beyond &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;+=&lt;/cite&gt;,
with which I had started for prior releases. And that is to use Jinja2
based templates for C, to generate the code.&lt;/p&gt;
&lt;p&gt;This was an important idea. Took a while, but soon the manual code for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; was already replaced with generated code, fixing a few bugs by the
way, and from there, the generation was expanded to cover &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Currently, support for the 3 (!) different kinds of additions
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TrueDiv&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FloorDir&lt;/span&gt;&lt;/code&gt; as well as Python2 default division,
dubbed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OldDiv&lt;/span&gt;&lt;/code&gt; in Nuitka was added along with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;The reason, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; were done first, is that they have special
treatment for sequences, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sq_concat&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sq_repeat&lt;/span&gt;&lt;/code&gt;, where
the other operations will be more straightforward, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nb_subtract&lt;/span&gt;&lt;/code&gt;
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt;) has a lot types supporting it and that makes those the easy
cases.&lt;/p&gt;
&lt;p&gt;I am saving a deeper explanation of 3 things we will need for the next
time. Basically we need optimization of these things at compile time,
and that is getting there, and code to use in the backend, and that is
getting there, and a third thing, that is to use optimization knowledge
to apply the special code as much as possible, and that is not yet fully
there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="faster-windows-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Faster Windows Dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is going to excite Windows users. After Orsiris de Jong had done a
replacement for dependency walker that is faster, this had remained in
an experimental status, just due to lack of time.&lt;/p&gt;
&lt;p&gt;Recently however, I felt there is more time, after GSoC student
selection has happened, and that I could finally work a bit on open
issues like this. And when I wrote a dedicated tool, to analyse
dependences with either technology to compare the results, I found that
dendency walker founds a lot more things.&lt;/p&gt;
&lt;p&gt;That was a turn down, but turns out, nothing it finds is stuff that
should not be on the white list. In fact, it’s all core Windows things,
and from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;System32&lt;/span&gt;&lt;/code&gt; folder. That made me question, why we take
anything from there (except maybe &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PythonXY.dll&lt;/span&gt;&lt;/code&gt;) at all, and after
that change the performance changed dramatically.&lt;/p&gt;
&lt;p&gt;The dependency walker now finishes a file in milliseconds. Actually the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; is now slow (surely it ought to be compiled), and takes some
seconds, for a file. That is amazing, and has lead to me to remove the
parallel usage, and since &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; allows for perfect caching, and is
Free Software, we will probably keep it.&lt;/p&gt;
&lt;p&gt;This will address a widespread complaint of many Windows users of the
standalone mode. This is now a relatively unnoticable part of the
overall experience.&lt;/p&gt;
&lt;p&gt;Currently I need to finish off some remaining problems with it, before
putting it out in the wild. Getting this into a release will solve many
newcomer issues.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="nuitka-organisation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Nuitka Organisation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Esp. for Google Summer of Code, Nuitka has sought and found mentors,
some of which are highly experienced for the task. I will let them
decide and write their own introduction, but I feel really blessed by
them helping me out in my desperate calls for help. Without them,
neither could Nuitka participate, nor could it even overachieve as much
as it does.&lt;/p&gt;
&lt;p&gt;Therefore I welcomed Kamran and Vaibhav into the organisation and they
are excited to work the the 2 accepted students, that are also added.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plugin-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Plugin Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jorj&lt;/span&gt;&lt;/code&gt; branch there is a lot of work from Jorj that aims at
adding support for more of the beasty stuff with hidden dependency and
plugin needs.&lt;/p&gt;
&lt;p&gt;He is also working at run time tracing of your program to be translated
to automatic imports of just that. I am going to highlight this later,
once I manage to cherry-pick the release ready parts from it for the
next release.&lt;/p&gt;
&lt;p&gt;But this definitely awesome stuff, and going to make Nuitka very easy to
use for some people, even with stranger software.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="opening-up"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Opening Up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is also a teaser. But we did so much work for the 0.6.3 release to
make sure information is there, and things are accessible and changeable
by everyone, or even the pre-commit hook that I am very proud of.&lt;/p&gt;
&lt;p&gt;But I shall save this for next week, otherwise it will be too much new
information.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be active there, although often I fall prey to of not
wanting to talk about unfinished things. On Twitter of all things.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/Nuitka-website/Nuitka-website/doc/posts/nuitka-this-week-13.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-13.html" rel="alternate"/>
    <summary>Nuitka this week #13</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2019-05-12T11:07:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/batakrishna-sahu-intro.html</id>
    <title>Batakrishna Sahu</title>
    <updated>2019-05-14T08:31:00+00:00</updated>
    <author>
      <name>Batakrishna Sahu</name>
    </author>
    <content type="html">&lt;section id="batakrishna-sahu"&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;My name is Batakrishna Sahu and I am from India. I’m very grateful to be
one of the 2 selected students who will work with Nuitka during Google
Summer of Code 2019. My project is on &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#6183147857772544"&gt;“Optimizing Python 2 and Python 3
built-ins for Nuitka”&lt;/a&gt;
mentored by Vaibhav Tulsyan, Kamran Ghanaat, Kay Hayen.&lt;/p&gt;
&lt;p&gt;So far, ​there are a total of 69 built-ins in Python 3 and ​76 built-in
in Python 2 out of which 27 built-ins are yet to be optimized in
Nuitka​. My aim is to optimize those missing built-ins in Nuitka. This
will make Nuitka a lot faster while working with built-ins.&lt;/p&gt;
&lt;p&gt;I’m really excited to gain new experience while working on this project
this summer.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Batakrishna&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/batakrishna-sahu-intro.html" rel="alternate"/>
    <summary>Hello everyone!</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-14T08:31:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/tommy-gsoc-intro.html</id>
    <title>Tommy’s Google Summer of Code Intro</title>
    <updated>2019-05-15T10:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="tommy-s-google-summer-of-code-intro"&gt;

&lt;p&gt;Hi all! :)&lt;/p&gt;
&lt;p&gt;My name is Taofeng Li and I go by the nickname of Tommy, github handle
&lt;a class="reference external" href="https://github.com/tommyli3318"&gt;tommyli3318&lt;/a&gt;. I’m a Computer Science
major at the University of California, Irvine in the United States. I am
very excited to announce that I’ll be contributing to Nuitka this summer
under the Google Summer of Code program!&lt;/p&gt;
&lt;p&gt;My project is “Nuitka support for PyPI top 50”, it ensures Nuitka’s
compatibility with the 50 most popular PyPI packages by setting up
automated testing for each package. These automated tests will serve to
be very important tools for the development of Nuitka, as they will be
used to assure Nuitka’s compatibility with the most used Python packages
every time Nuitka receives a new update.&lt;/p&gt;
&lt;p&gt;My mentors will be Vaibhav Tulsyan, Kamran Ghanaat, and Kay Hayen. My
project abstract can be seen &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#4874692681269248"&gt;here&lt;/a&gt; and
the full details of my project can be found &lt;a class="reference external" href="https://docs.google.com/document/d/1tdbXyMy5xjVEeWociI_t2f6tlmge6czT0xmfCLyDXYg/edit?usp=sharing"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am greatly looking forward to the many things that I’ll learn this
summer!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/tommy-gsoc-intro.html" rel="alternate"/>
    <summary>Hi all! :)</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="tests" label="tests"/>
    <category term="standalone" label="standalone"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-15T10:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/jorj-x-mckie.html</id>
    <title>Jorj X. McKie</title>
    <updated>2019-05-18T11:00:00+00:00</updated>
    <author>
      <name>Jorj X. McKie</name>
    </author>
    <content type="html">&lt;p&gt;Self-Introduction Jorj McKie&lt;/p&gt;
&lt;section id="jorj-x-mckie"&gt;

&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;I am Jorj X. McKie (this is &lt;strong&gt;not&lt;/strong&gt; my real name!) and I am an
enthusiastic supporter of Nuitka. For the time being, my focus area
within this package is standalone compilation and maintenance of the
plugin feature.&lt;/p&gt;
&lt;p&gt;Apart from extending Nuitka’s support to virtually all Python packages
living out there, my driving motivation in this respect is keeping up
and improving the usability of Nuitka.&lt;/p&gt;
&lt;p&gt;You may want to look into the &lt;a class="reference external" href="https://github.com/Nuitka/NUITKA-Utilities"&gt;Nuitka Utilities&lt;/a&gt; repository, which
contains many things I am working on.&lt;/p&gt;
&lt;dl class="py class"&gt;
&lt;dt class="sig sig-object py"&gt;
&lt;span class="sig-name descname"&gt;&lt;span class="pre"&gt;alert&lt;/span&gt; &lt;span class="pre"&gt;alert-primary&lt;/span&gt; &lt;span class="pre"&gt;float-md-right&lt;/span&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;img alt="_images/jorjmckie-harald-lieder.jpg" src="_images/jorjmckie-harald-lieder.jpg" /&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;section id="short-biography"&gt;
&lt;h2&gt;Short Biography&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Born 1951 as Harald Lieder near the city of Leipzig&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Studied Mathematics and Physics at the Frankfurt/M
Johann-Wolfgang-Goethe University from 10/1970 through 06/1976
(Diploma in Mathematics)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Professional career overview&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;insurance company (4 years): application and systems
programming (IBM mainframe, Cobol, Assembler), data center lead&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;book wholesaler (5 years): systems programming and data center
lead (IBM mainframe)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;consulting company (until 2009): leading of or participating in
numerous large and &lt;strong&gt;very&lt;/strong&gt; large projects mostly around
banking applications, banking mergers, data center optimization
and quality assurance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;since 2009: retirement, living on Isla Margarita, Venezuela.
Enjoying my beautiful house, pursuing my hobbies: mathematics,
science theory, biological evolution theory, science fiction
(my pseudonym comes from novels by one of my favorite authors
Frank Herbert) and of course programming (maintainer of
&lt;a class="reference external" href="https://github.com/pymupdf/PyMuPDF"&gt;PyMuPDF&lt;/a&gt;, and Nuitka).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="images-from-isla-margarita"&gt;
&lt;h2&gt;Images from Isla Margarita&lt;/h2&gt;
&lt;section id="house-frontview-with-guardians"&gt;
&lt;h3&gt;House Frontview with Guardians&lt;/h3&gt;
&lt;img alt="_images/JMK-house-frontview-with-guardians.jpg" src="_images/JMK-house-frontview-with-guardians.jpg" /&gt;
&lt;/section&gt;
&lt;section id="in-favorite-pizzeria-with-my-wife"&gt;
&lt;h3&gt;In favorite Pizzeria with my Wife&lt;/h3&gt;
&lt;img alt="_images/JMK-in-favorite-pizzeria-with-my-wife.jpg" src="_images/JMK-in-favorite-pizzeria-with-my-wife.jpg" /&gt;
&lt;/section&gt;
&lt;section id="seaview-from-my-terrace"&gt;
&lt;h3&gt;Seaview from my Terrace&lt;/h3&gt;
&lt;img alt="_images/JMK-seaview-from-my-terrace.JPG" src="_images/JMK-seaview-from-my-terrace.JPG" /&gt;
&lt;/section&gt;
&lt;section id="sunrise-view-from-house"&gt;
&lt;h3&gt;Sunrise view from House&lt;/h3&gt;
&lt;img alt="_images/JMK-sunrise-view-from-house.jpg" src="_images/JMK-sunrise-view-from-house.jpg" /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/jorj-x-mckie.html" rel="alternate"/>
    <summary>Self-Introduction Jorj McKie</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-18T11:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/urllib3-wheel-with-nuitka.html</id>
    <title>Intro</title>
    <updated>2019-06-19T16:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;This post compares the pytest results of urllib3 to its nuitka-built
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; counterpart.&lt;/p&gt;
&lt;p&gt;Urllib3 standalone test have already been covered. Manual testing is now
done to compare the pytest results of a nuitka wheel built using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular pytest of the urllib3
package. Testing is done to ensure that nuitka is building the wheel
correctly. If the pytests pass/fail in the same way, that means Nuitka
built the wheel properly. Else if the tests differ, then something is
wrong. Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;
&lt;p&gt;At first, the urllib3 nuitka-wheel pytest was crashing because of the
unsafe assumption that imports will always exist (which is not the case
if exceptions are thrown). &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/413"&gt;Issue 413&lt;/a&gt; was filed to record and
fix this bug.&lt;/p&gt;
&lt;p&gt;After the fixes, the pytests were ran again and the results were very
similar:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Regular&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;836&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;47.54&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=======&lt;/span&gt;
&lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;838&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;47.59&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=======&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The extra passes are suspicious and require more investigation into why
they happen. To make that easy, we are going to fully automate the
process and compare outputs with verbose pytest modes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="steps-to-reproduce"&gt;
&lt;h1&gt;Steps to Reproduce&lt;/h1&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Clone urllib3 and nuitka into a new folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the urllib3 folder, issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt;
&lt;span class="pre"&gt;dev-requirements.txt&lt;/span&gt;&lt;/code&gt; to install its requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the regular
pytest for urllib3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change into the nuitka folder and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change back into urllib3 and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;
to build the urllib3 wheel using nuitka. The newly built wheel should
be found in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dist&lt;/span&gt;&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pip to uninstall the existing urllib3, then issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt;
&lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; followed by the newly built &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; filename.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the
nuitka-built wheel pytest for urllib3.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="uncompile-python"&gt;
&lt;h1&gt;Uncompile Python&lt;/h1&gt;
&lt;p&gt;urllib3 regular pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m pytest --disable-warnings
============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-4.0.0, py-1.8.0, pluggy-0.11.0
rootdir: C:\Users\Tommy\pipenv-testing\urllib3-testing\urllib3, inifile: setup.cfg
plugins: timeout-1.3.1
collected 1295 items

test\test_collections.py ....................................s           [  2%]
test\test_compatibility.py ...                                           [  3%]
test\test_connection.py .....                                            [  3%]
test\test_connectionpool.py ............................................ [  6%]
...........................                                              [  8%]
test\test_exceptions.py .............                                    [  9%]
test\test_fields.py ...............                                      [ 11%]
test\test_filepost.py ...........                                        [ 11%]
test\test_no_ssl.py ..                                                   [ 12%]
test\test_poolmanager.py .........................                       [ 14%]
test\test_proxymanager.py ...                                            [ 14%]
test\test_queue_monkeypatch.py .                                         [ 14%]
test\test_response.py ..................sss............................. [ 18%]
...........                                                              [ 19%]
test\test_retry.py ..............................F.F.F..                 [ 21%]
test\test_ssl.py ...............................                         [ 24%]
test\test_util.py ...................................................... [ 28%]
........................................................................ [ 34%]
....................ss.s...s............................................ [ 39%]
............                                                             [ 40%]
test\test_wait.py ...ssssss                                              [ 41%]
test\contrib\test_pyopenssl.py sssssssssssssssssssssssssssssssssssssssss [ 44%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssss                                                     [ 57%]
test\contrib\test_pyopenssl_dependencies.py ss                           [ 57%]
test\contrib\test_securetransport.py sssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
sssssssssssssssssss                                                      [ 72%]
test\contrib\test_socks.py ..................                            [ 73%]
test\with_dummyserver\test_chunked_transfer.py ........                  [ 74%]
test\with_dummyserver\test_connectionpool.py ........................... [ 76%]
.......................................                                  [ 79%]
test\with_dummyserver\test_https.py .....................s....s......... [ 82%]
.................................................Uncaught exception, closing connection.
........................................................................ [ 87%]
................................sssssssssssssssssssssssssssssssssss....  [ 93%]
test\with_dummyserver\test_no_ssl.py ..                                  [ 93%]
test\with_dummyserver\test_poolmanager.py ...............                [ 94%]
test\with_dummyserver\test_proxy_poolmanager.py ................         [ 95%]
test\with_dummyserver\test_socketlevel.py .............................. [ 98%]
......................                                                   [100%]
====== 3 failed, 836 passed, 456 skipped, 113 warnings in 47.54 seconds =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="compiled-with-nuitka"&gt;
&lt;h1&gt;Compiled with Nuitka&lt;/h1&gt;
&lt;p&gt;nuitka wheel pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m pytest --disable-warnings
============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-4.0.0, py-1.8.0, pluggy-0.11.0
rootdir: C:\Users\Tommy\pipenv-testing\urllib3-testing\urllib3, inifile: setup.cfg
plugins: timeout-1.3.1
collected 1295 items

test\test_collections.py ....................................s           [  2%]
test\test_compatibility.py ...                                           [  3%]
test\test_connection.py .....                                            [  3%]
test\test_connectionpool.py ............................................ [  6%]
...........................                                              [  8%]
test\test_exceptions.py .............                                    [  9%]
test\test_fields.py ...............                                      [ 11%]
test\test_filepost.py ...........                                        [ 11%]
test\test_no_ssl.py .F                                                   [ 12%]
test\test_poolmanager.py .........................                       [ 14%]
test\test_proxymanager.py ...                                            [ 14%]
test\test_queue_monkeypatch.py .                                         [ 14%]
test\test_response.py ..................sss............................. [ 18%]
...........                                                              [ 19%]
test\test_retry.py .....................................                 [ 21%]
test\test_ssl.py ...............................                         [ 24%]
test\test_util.py ...................................................... [ 28%]
........................................................................ [ 34%]
....................ss.s...s............................................ [ 39%]
............                                                             [ 40%]
test\test_wait.py ...ssssss                                              [ 41%]
test\contrib\test_pyopenssl.py sssssssssssssssssssssssssssssssssssssssss [ 44%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssss                                                     [ 57%]
test\contrib\test_pyopenssl_dependencies.py ss                           [ 57%]
test\contrib\test_securetransport.py sssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
sssssssssssssssssss                                                      [ 72%]
test\contrib\test_socks.py ..................                            [ 73%]
test\with_dummyserver\test_chunked_transfer.py ........                  [ 74%]
test\with_dummyserver\test_connectionpool.py ........................... [ 76%]
.......................................                                  [ 79%]
test\with_dummyserver\test_https.py .....................s....s......... [ 82%]
........................................................................ [ 87%]
................................sssssssssssssssssssssssssssssssssss....  [ 93%]
test\with_dummyserver\test_no_ssl.py ..                                  [ 93%]
test\with_dummyserver\test_poolmanager.py ...............                [ 94%]
test\with_dummyserver\test_proxy_poolmanager.py ................         [ 95%]
test\with_dummyserver\test_socketlevel.py .............................. [ 98%]
......................                                                   [100%]
====== 1 failed, 838 passed, 456 skipped, 113 warnings in 47.59 seconds =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/urllib3-wheel-with-nuitka.html" rel="alternate"/>
    <summary>This post compares the pytest results of urllib3 to its nuitka-built
.whl counterpart.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <published>2019-06-19T16:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/dateutil-wheel-with-nuitka.html</id>
    <title>Intro</title>
    <updated>2019-07-12T18:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;This post compares the pytest results of dateutil to its nuitka-built
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; counterpart.&lt;/p&gt;
&lt;p&gt;Dateutil standalone test have already been covered. Manual testing is
now done to compare the pytest results of a nuitka wheel built using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular pytest of the dateutil
package. Testing is done to ensure that nuitka is building the wheel
correctly. If the pytests pass/fail in the same way, that means Nuitka
built the wheel properly. Else if the tests differ, then something is
wrong. Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;
&lt;p&gt;The pytest results were very similar:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Regular&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.99&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1976&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.89&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="steps-to-reproduce"&gt;
&lt;h1&gt;Steps to Reproduce&lt;/h1&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Clone dateutil and nuitka into a new folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the dateutil folder, issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt;
&lt;span class="pre"&gt;requirements-dev.txt&lt;/span&gt;&lt;/code&gt; to install its requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the regular
pytest for dateutil.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change into the nuitka folder and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change back into dateutil and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;
to build the dateutil wheel using nuitka. The newly built wheel
should be found in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dist&lt;/span&gt;&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pip to uninstall the existing dateutil, then issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt;
&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; followed by the newly built &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; filename.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the
nuitka-built wheel pytest for dateutil.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="uncompile-python"&gt;
&lt;h1&gt;Uncompile Python&lt;/h1&gt;
&lt;p&gt;dateutil regular pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=============================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;Tommy&lt;/span&gt;\&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.24.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.7.1&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;2074&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_easter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;................................................&lt;/span&gt;                         &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_import_star&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                      &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_imports&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......................&lt;/span&gt;                    &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_internals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_isoparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;............................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.....................&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;                                                  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.................................&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxsss&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;                  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_relativedelta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.............................................&lt;/span&gt;                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;................................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..............&lt;/span&gt;                                                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........&lt;/span&gt;&lt;span class="n"&gt;sssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sssssssssssssssssssssssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;............................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;......................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.......................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sssssssssssss&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.............&lt;/span&gt;                                                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......&lt;/span&gt;                                      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_isoparse_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_parser_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;docs&lt;/span&gt;\&lt;span class="n"&gt;exercises&lt;/span&gt;\&lt;span class="n"&gt;solutions&lt;/span&gt;\&lt;span class="n"&gt;mlk_day_rrule_solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.99&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="compiled-with-nuitka"&gt;
&lt;h1&gt;Compiled with Nuitka&lt;/h1&gt;
&lt;p&gt;nuitka wheel pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=============================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;Tommy&lt;/span&gt;\&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.24.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.7.1&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;2073&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_easter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......................................&lt;/span&gt;                                  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_import_star&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                               &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_imports&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......................&lt;/span&gt;                             &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_internals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;                                              &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_isoparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;......................................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.....................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;............&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;                                                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxsss&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_relativedelta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.............................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;....................................&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.....&lt;/span&gt;                                                                    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........&lt;/span&gt;&lt;span class="n"&gt;ssssssssssssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ssssssssssssssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;........&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................&lt;/span&gt;&lt;span class="n"&gt;sssssssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ssss&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;                                                                     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......&lt;/span&gt;                                               &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_isoparse_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_parser_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1976&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.89&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/dateutil-wheel-with-nuitka.html" rel="alternate"/>
    <summary>This post compares the pytest results of dateutil to its nuitka-built
.whl counterpart.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <published>2019-07-12T18:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/tommy-gsoc-summary.html</id>
    <title>Intro</title>
    <updated>2019-08-23T07:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;As Google Summer of Code (GSoC) is coming to an end, I am writing this
blog post as a final summary describing all the work I have done as well
as my experiences in this program.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary-of-my-work"&gt;
&lt;h1&gt;Summary of My Work&lt;/h1&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/314"&gt;#314 run_all.py new special-comment mechanism &amp;amp; Urllib3Using.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before GSoC started, I looked around for whatever work I could
help with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this pull request, I added a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;checkRequirements&lt;/span&gt;&lt;/code&gt; function for
the Nuitka standalone test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This function checks for special-comments at the top of standalone
tests in the format of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;nuitka-skip-unless-expression:&lt;/span&gt;
&lt;span class="pre"&gt;expression&lt;/span&gt; &lt;span class="pre"&gt;to&lt;/span&gt; &lt;span class="pre"&gt;be&lt;/span&gt; &lt;span class="pre"&gt;evaluated&lt;/span&gt;&lt;/code&gt; OR &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;nuitka-skip-unless-imports:&lt;/span&gt;
&lt;span class="pre"&gt;module1,module2,...&lt;/span&gt;&lt;/code&gt; and will decide whether to skip a test
depending on if its specified requirements are met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition, standalone test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Urllib3Using.py&lt;/span&gt;&lt;/code&gt; was created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This pull request was soon merged and allowed me the lucky
opportunity of GSoC 2019 with Nuitka :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/339"&gt;#339 Standalone tests for botocore &amp;amp; boto3 + fix to Urllib3Using.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This PR was also created before the start of GSoC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Boto3Using.py&lt;/span&gt;&lt;/code&gt; was created using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;moto&lt;/span&gt;&lt;/code&gt; to
mock AWS calls which did not turn out well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Urllib3Using.py&lt;/span&gt;&lt;/code&gt; with the addition of python version
checks as a fix to &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/373"&gt;Issue #373&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nuitka.net/posts/urllib3-wheel-with-nuitka.html"&gt;Urllib3 Wheel with Nuitka Pytest Results&lt;/a&gt; and
&lt;a class="reference external" href="https://nuitka.net/posts/dateutil-wheel-with-nuitka.html"&gt;Python-Dateutil Wheel with Nuitka Pytest Results&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At the start of GSoC, I performed manual pytest comparison for
PyPI packages &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;urllib3&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dateutil&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The findings of my testing were documented in these postings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manual testing compares the pytest results of an installed nuitka
wheel built using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular
pytest results of each package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Testing is done to ensure that nuitka is building the wheel
correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the pytests pass/fail in the same way, that means Nuitka built
the wheel properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Else if the tests differ, then something is wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over the course of performing manual testing, I became familiar
with the use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wheel&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A bug was found with the package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;urllib3&lt;/span&gt;&lt;/code&gt; bdist and I created
&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/413"&gt;Issue #413&lt;/a&gt; to
document the bug.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440 Automating PyPI Wheel Pytest&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;After familiarizing myself with how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wheel&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt; work, I started to work on a script which would
automate the pytest comparison for top PyPI packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script first uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; to update each package if it is
already existing in the local cache, else it will &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt; &lt;span class="pre"&gt;clone&lt;/span&gt;&lt;/code&gt;
that package into the local cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then uses calls to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os.system&lt;/span&gt;&lt;/code&gt; to automate the
creation of a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt; which is then used to install
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; the package’s requirements (if any)
for running pytest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then handles each package depending on different needs
before building a regular wheel with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt;
&lt;span class="pre"&gt;bdist_wheel&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This wheel is then installed into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, after which
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;subprocess.Popen&lt;/span&gt;&lt;/code&gt; is used to run and capture the output of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt; into a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then resets the package to its original state and
builds a nuitka-compiled wheel using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt;
&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This compiled wheel is then installed into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;,
after which &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;subprocess.Popen&lt;/span&gt;&lt;/code&gt; is used to run and capture the
output of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt; into another
string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The two strings containing pytest outputs are then compared to
find differences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If no differences are found, this means &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; worked
properly. Else Nuitka compilation did something wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The above process is repeated for each suitable PyPI package from
the PyPI top 50. (Some packages are left out if they do not
contain a test suite or if they do not need to be tested)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the end, a colored summary is given for all the packages
tested.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This automation script is meant to be run regularly to inform
developers of Nuitka regressions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/477"&gt;Issue #477 Unable to compile modules listed under
unworthy_namespaces&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Raised due to package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pycparser&lt;/span&gt;&lt;/code&gt; failing in the automated test
suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This issue will be addressed in the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/479"&gt;Issue #479 bdist_nuitka fails for packages containing py_modules
only&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While I worked on &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440&lt;/a&gt;, I found a bug with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; failing on PyPI packages containing py_modules
only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This bug occurs due to Nuitka making the assumption that a main
package always exists for all packages. However, some packages
contain only a main module and not a main package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applies to PyPI packages &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;decorator&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipaddress&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyparsing&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/483"&gt;#483 Add support for py_modules_only compilation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This pull request changes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka.py&lt;/span&gt;&lt;/code&gt; and various other
files to fix &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/479"&gt;Issue #479&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checks are added for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; command to see if a main
package exists. If there is not a main package, it will set its
compile target to the main module instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This also addressed the case of a package with both a main package
and a main module, in which case both are included inside the
resulting wheel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;distutils&lt;/span&gt;&lt;/code&gt; examples &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;py_modules_only&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;package_and_module&lt;/span&gt;&lt;/code&gt; were created and added for future testing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During this PR, I found an import bug in Nuitka and hotfixed it
with &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/487"&gt;#487 Fixup_import_module&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/484"&gt;#484 PyPI Standalone Tests&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This pull request adds more standalone tests for each top PyPI
package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/495"&gt;#495 Improve pypi automation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Improves the PyPI test suite created in &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440&lt;/a&gt; with functional
improvements, readability improvements, and added documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="things-i-learned"&gt;
&lt;h1&gt;Things I Learned&lt;/h1&gt;
&lt;p&gt;Before GSoC, I was very uncomfortable with working inside a terminal. I
was unfamiliar with many basic bash commands because I simply did not
have any prior professional industrial experiences. I was also very
unfamiliar with the Git flow, which is evident in the messy commit
histories of my earliest pull requests.&lt;/p&gt;
&lt;p&gt;As I continued throughout my GSoC journey, however, I became much more
comfortable with working inside the terminal as well as using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; as
a version-control system (shoutout to my mentor Kay Hayen for helping me
through all the annoying conflicts).&lt;/p&gt;
&lt;p&gt;Although I am still no expert, I can confidently say that I am now far
more proficient working with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; and inside the terminal.&lt;/p&gt;
&lt;p&gt;In addition, I became much more familiar with many of the most popular
PyPI packages as well as the inner workings of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt;, which I
believe will help me go very far in my career as a software developer.&lt;/p&gt;
&lt;p&gt;Overall, the GSoC experience was truly astounding and I am more than
thankful to my mentor Kay Hayen as well as Google for making this
amazing program possible.&lt;/p&gt;
&lt;p&gt;Yours, &lt;a class="reference external" href="https://github.com/tommyli3318"&gt;Tommy&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/tommy-gsoc-summary.html" rel="alternate"/>
    <summary>As Google Summer of Code (GSoC) is coming to an end, I am writing this
blog post as a final summary describing all the work I have done as well
as my experiences in this program.</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="tests" label="tests"/>
    <category term="pypi" label="pypi"/>
    <category term="pytest" label="pytest"/>
    <category term="automation" label="automation"/>
    <category term="standalone" label="standalone"/>
    <published>2019-08-23T07:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/bksahus-gsoc-wrap-up.html</id>
    <title>bksahu’s GSoC warp up</title>
    <updated>2019-08-25T19:55:00+00:00</updated>
    <author>
      <name>Batakrishna Sahu</name>
    </author>
    <content type="html">&lt;section id="bksahu-s-gsoc-warp-up"&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;GSoC 2019 has almost come to an end! It’s the time to wrap up this mega
event started back in May 2019. Under the mentorship of Mentor Hayen, my
learning experience has undergone a roller-coaster ride and it has not
only boosted my growth as a developer but also as an individual. Over
the last 3 months the following are my major contributions to this
project:&lt;/p&gt;
&lt;section id="built-ins-optimizations"&gt;
&lt;h2&gt;Built-ins Optimizations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“any”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/246"&gt;PR #246&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;nuitka.nodes.BuiltinAnyNodes&lt;/cite&gt; node added to optimize the “any”
built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developed an algorithm to predict the “any” for arguments
having repetitive values at compile time. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;any([0]*255) -&amp;gt; False&lt;/p&gt;
&lt;p&gt;any([False, False, True]) -&amp;gt; True&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extended support for &lt;cite&gt;range&lt;/cite&gt;, &lt;cite&gt;set&lt;/cite&gt; and &lt;cite&gt;dict&lt;/cite&gt; built-ins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added the optimized C side support too&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a method &lt;cite&gt;getMetaClassBase&lt;/cite&gt; to make Python 2 and Python 3
compatible while working with metaclasses.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Issue reported and closed &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/349"&gt;Issue #349&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Created a new module &lt;cite&gt;nuitka.nodes.IterationHandles&lt;/cite&gt; to work
with iterables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support of Iteration for non-mutable types.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“all”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/407"&gt;PR #407&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added &lt;cite&gt;nuitka.nodes.BuiltinAllNodes&lt;/cite&gt; to optimize the “all”
built-ins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developed an algorithm similar to “any” to predict the “all”
arguments. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;all([0, 0, 1]) -&amp;gt; False&lt;/p&gt;
&lt;p&gt;all([True]*100) -&amp;gt; True&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other similar optimizations are done like “any” built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, added a new testing module
&lt;cite&gt;tests.optimizations.CommonOptimizations&lt;/cite&gt; to test the built-ins
optimizations at the same place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;“abs”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/419"&gt;PR #419&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added new operation node &lt;cite&gt;ExpressionOperationAbs&lt;/cite&gt; to optimize
the &lt;cite&gt;abs&lt;/cite&gt; built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manually added &lt;cite&gt;shapeSlotAbs&lt;/cite&gt; to different shapes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally pre-computed the compile time constant &lt;cite&gt;abs&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“max” and “min”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/442"&gt;PR #442&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This PR is work in progress and is half complete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is the first optimizations in which I used reformulations
instead of added in a new node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pseudo-code of “min” reformulation:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg1&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# can be decided during re-formulation&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp_key_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt;
         &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp_key_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt;
         &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding support for &lt;cite&gt;keyfunc&lt;/cite&gt; is pending&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“zip”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/462"&gt;PR #462&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;This built-in uses both types of optimizations that the
previous built-ins optimizations used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;zip&lt;/cite&gt; for Python 2 uses the reformulations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pseudo-code of “zip” reformulation:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="c1"&gt;# First assign, to preserve order of execution,&lt;/span&gt;
&lt;span class="c1"&gt;# the arguments might be complex expressions.&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# could be more&lt;/span&gt;
&lt;span class="n"&gt;tmp_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tmp_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;pass&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tmp_result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;zip&lt;/cite&gt; for Python 3 needs a new node that calls the &lt;cite&gt;zip&lt;/cite&gt;
because unlike &lt;cite&gt;zip&lt;/cite&gt; in Python 2, &lt;cite&gt;zip&lt;/cite&gt; in Python 3 returns a
&lt;cite&gt;zipobject&lt;/cite&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="test-suite"&gt;
&lt;h2&gt;Test suite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;Search mode “All”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/378"&gt;PR #378&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;In the test suite, I added a new search mode “all” that will
test all the modules and return all the results at once. For
example:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./tests/basics/run_all.py all
   Using concrete python &lt;span class="m"&gt;2&lt;/span&gt;.7.12 on x86_64
   Comparing output of &lt;span class="s1"&gt;&amp;#39;Asserts.py&amp;#39;&lt;/span&gt; using &lt;span class="s1"&gt;&amp;#39;/usr/bin/python&amp;#39;&lt;/span&gt; with flags silent, expect_success, remove_output,     recurse_all, original_file, cpython_cache, plugin_enable:pylint-warnings ...
   .
   .
   .
   .
   Total &lt;span class="m"&gt;0&lt;/span&gt; error&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; found.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;Search mode “Only”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/333"&gt;PR #333&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added “only” search mode to test only a single module. For
example:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./tests/basics/run_all.py only BuiltinsTest.py
   Using concrete python &lt;span class="m"&gt;2&lt;/span&gt;.7.12 on x86_64
   Skipping Asserts.py
   Skipping Assignments.py
   Skipping BigConstants.py
   Skipping Branching.py
   Skipping BuiltinOverload.py
   Skipping BuiltinSuper.py
   Comparing output of &lt;span class="s1"&gt;&amp;#39;BuiltinsTest.py&amp;#39;&lt;/span&gt; using &lt;span class="s1"&gt;&amp;#39;/usr/bin/python&amp;#39;&lt;/span&gt; with flags silent, expect_success, remove_output, recurse_all, original_file, cpython_cache, plugin_enable:pylint-warnings ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Reported and closed Issue #334: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/336"&gt;PR #336&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fixed the autoformat bug by reading and writing the files in
bytes instead of string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka git work flow: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/485"&gt;PR #485&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And other minor doc fixes are added with their respective pull requests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-i-learned"&gt;
&lt;h2&gt;What I learned&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Learned the software engineering principles and how to keep my work
clean.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also learned how to effectively use software designing principles
like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;
and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got exposed to Nuitka internals which helped me to better understand
how compilers in general work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explored how CPython works internally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got some great advice from Mentor Hayen about starting my
professional career in Software engineering.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, it was a great experience to be a part of Nuitka :)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Batakrishna&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/bksahus-gsoc-wrap-up.html" rel="alternate"/>
    <summary>Hello everyone!</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-08-25T19:55:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/first-nuitka-live-stream.html</id>
    <title>First Nuitka Live Stream</title>
    <updated>2022-01-14T00:00:00+00:00</updated>
    <content type="html">&lt;section id="first-nuitka-live-stream"&gt;

&lt;p&gt;Tomorrow, Saturday 15.01.2022, there will be not one, but two live
stream of me coding on Nuitka, and talking and chatting with visitors in
the Discord channel created specifically for this. I will go from 9-12
CEST and from 17-20 CEST.&lt;/p&gt;
&lt;p&gt;There is a &lt;a class="reference external" href="/pages/Streaming.html"&gt;dedicated page on the web site&lt;/a&gt;
which has the details. Spoiler, it’s free and I have no plans for
anything that involves a subscription of any kind. Of course, talking of
subscription, do also checkout the &lt;a class="reference external" href="/doc/commercial.html"&gt;Nuitka commercial&lt;/a&gt; offering. That is a subscription with adds that
protect your IP even more than regular Nuitka.&lt;/p&gt;
&lt;p&gt;I want to do this on a regular basis, and I will be happy to do this
even when nearly nobody shows up. It will be however your chance, and in
previous GSoC and generally, I made very good experiences with joint
sessions. So I hope you will help me pasting code snippets and Google
results in chat, and discuss the optimization that we are going to add.&lt;/p&gt;
&lt;p&gt;Come and join me there. &lt;a class="reference external" href="/pages/Streaming.html"&gt;Instructions&lt;/a&gt; here.
You know you want to do it. I know I want you to do to it!&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/first-nuitka-live-stream.html" rel="alternate"/>
    <summary>Tomorrow, Saturday 15.01.2022, there will be not one, but two live
stream of me coding on Nuitka, and talking and chatting with visitors in
the Discord channel created specifically for this. I will go from 9-12
CEST and from 17-20 CEST.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2022-01-14T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/next-nuitka-live-stream-30-01-2022.html</id>
    <title>Next Nuitka Live Stream</title>
    <updated>2022-01-30T00:00:00+00:00</updated>
    <content type="html">&lt;section id="next-nuitka-live-stream"&gt;

&lt;p&gt;Today, Sunday 30.01.2022, there will be the third live stream of me
coding on Nuitka, and talking and chatting with visitors in the Discord
channel created specifically for this. I will go from 9-12 CEST and from
18 CEST until probably at least 20 CEST, but it seems I tend to go
overtime.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="last-time"&gt;
&lt;h1&gt;Last time&lt;/h1&gt;
&lt;p&gt;So the last two streams are on my Youtube, these are around 4h videos,
done on the same day.&lt;/p&gt;
&lt;p&gt;In the second stream I was working on Onefile compression for all Python
versions, by making the location of another Python that for Scons we
sort of did already, reusable. So now, you can run Nuitka with Python2.6
and compile your legacy code, while with say 3.6 also installed on the
same system, you do the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zstandard&lt;/span&gt;&lt;/code&gt; compression. That will be used for
other things in the future as well. This is going to be part of the next
release and currently on develop.&lt;/p&gt;
&lt;p&gt;In the first stream, I also did a little bit of performance plans, but
mostly only showing people what I have there in stock, not actually went
there and I started work on a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;upx&lt;/span&gt;&lt;/code&gt; plugin, such that DLLs for
standalone are compressed with that. That also required a bit of plugin
interface changes and research. This one works mostly, but will need
more live. Also I think I looked at reducing what is included with the
follow standard library option, getting very minimal distributions out
of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-time"&gt;
&lt;h1&gt;This time&lt;/h1&gt;
&lt;p&gt;All around, this last stream, was a huge success. I was a bit under the
weather last weekend, but we go on now.&lt;/p&gt;
&lt;p&gt;Not sure yet, what to do. I might be debugging issues I have with 2.6
and a recent optimization, that prevents factory branch from becoming
the next pre-release, I might be looking at macOS still. And I might be
looking at the caching of bytecode demoted modules, that is kind of
ready to be used, but is not currently, which is a pity. And of course,
the Python PGO may get a closer look, such that e.g. it works for
standalone mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-to-join"&gt;
&lt;h1&gt;How to Join&lt;/h1&gt;
&lt;p&gt;There is a &lt;a class="reference external" href="/pages/Streaming.html"&gt;dedicated page on the web site&lt;/a&gt;
which has the details. Spoiler, it’s free and I have no plans for
anything that involves a subscription of any kind. Of course, talking of
subscription, do also checkout the &lt;a class="reference external" href="/doc/commercial.html"&gt;Nuitka commercial&lt;/a&gt; offering. That is a subscription with adds that
protect your IP even more than regular Nuitka.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="join-me"&gt;
&lt;h1&gt;Join me&lt;/h1&gt;
&lt;p&gt;Come and join me there. &lt;a class="reference external" href="/pages/Streaming.html"&gt;Instructions&lt;/a&gt; here.
You know you want to do it. I know I want you to do to it!&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/next-nuitka-live-stream-30-01-2022.html" rel="alternate"/>
    <summary>Today, Sunday 30.01.2022, there will be the third live stream of me
coding on Nuitka, and talking and chatting with visitors in the Discord
channel created specifically for this. I will go from 9-12 CEST and from
18 CEST until probably at least 20 CEST, but it seems I tend to go
overtime.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2022-01-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-07.html</id>
    <title>Nuitka Release 0.7</title>
    <updated>2022-02-21T13:10:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-7"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release is massively improving macOS support, esp. for M1 and the
latest OS releases, but it also has massive improvements for usability
and bug fixes in all areas.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;set&lt;/span&gt;&lt;/code&gt; creation wasn’t annotating its possible exception exit
from hashing values and is not as free of side effects as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tuple&lt;/span&gt;&lt;/code&gt; creations are. Fixed in 0.6.19.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--experimental&lt;/span&gt;&lt;/code&gt; option values got lost for the C
compilation when switching from MSVC to MinGW64, making them have no
effect. Fixed in 0.6.19.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, Clang from MinGW64 doesn’t support LTO at this time,
therefore default to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;no&lt;/span&gt;&lt;/code&gt; for it. Fixed in 0.6.19.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian: Fix, failed to detect Debian unstable as suitable for
linking, it doesn’t have the release number. Fixed in 0.6.19.1
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added data files for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pygsheets&lt;/span&gt;&lt;/code&gt; package. Fixed in
0.6.19.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, paths from plugin related file paths need to be made absolute
before used internally, otherwise the cache can fail to deduplicate
them. Fixed in 0.6.19.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: With gcc before version 5, e.g. on CentOS 7, where we switch
to using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;g++&lt;/span&gt;&lt;/code&gt; instead, the gcc version checks could crash. Fixed
in 0.6.19.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Disable MinGW64 wildcard expansion for command line
arguments. This was breaking command lines with arguments like
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--filename&lt;/span&gt; &lt;span class="pre"&gt;*.txt&lt;/span&gt;&lt;/code&gt;, which under &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd.exe&lt;/span&gt;&lt;/code&gt; are left alone by the
shell, and are to be expanded by the program. Fixed in 0.6.19.2
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependency needed for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--follow-stdlib&lt;/span&gt;&lt;/code&gt; with Python for some uses of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;locale&lt;/span&gt;&lt;/code&gt;
module. Fixed in 0.6.19.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added workarounds for newest &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; that wants to set
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__code__&lt;/span&gt;&lt;/code&gt; objects and required improvements for macOS library
handling. Fixed in 0.6.19.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Caching of DLL dependencies for the main programs was not
really working, requiring to detect them anew for every standalone
compilation for no good reason. Fixed in 0.6.19.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, CTRL-C from a terminal was not propagated to child
processes on Windows. Fixed in 0.6.19.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: With &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;certifi&lt;/span&gt;&lt;/code&gt; and Python3.10 the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib.resource&lt;/span&gt;&lt;/code&gt; could trigger Virus scanner inflicted file
access errors. Fixed in 0.6.19.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.10: Reverted error back iteration past end of generator
change for Python 3.10.2 or higher to become compatible with that
too. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anyio&lt;/span&gt;&lt;/code&gt; and by proxy for Solana.
Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, compilation with resource mode &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;incbin&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--debugger&lt;/span&gt;&lt;/code&gt; was
not working together. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, format optimization of known &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; objects was not properly
annotating an exception exit when being optimized away, causing
consistency checks to complain. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; didn’t work for non-standard encoding
source paths due to using th direct mode, where wrong filenames are
output by MSVC. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; cannot handle source code paths for
non-standard encoding source paths. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2.6: Fix, calls to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iteritems&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iterkeys&lt;/span&gt;&lt;/code&gt; on known
dictionary values could give wrong values. Fixed in 0.6.19.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the value of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__module__&lt;/span&gt;&lt;/code&gt; if set by the metaclass was
overwritten when creating types. Fixed in 0.6.19.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Add support for the latest version of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg_resources&lt;/span&gt;&lt;/code&gt; that
has “vendored” even more packages. Fixed in 0.6.19.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: The onefile binary was locked during run time and could not
be renamed, preventing in-place updates. This has been resolved and
now on Windows, the standard trick for updating a running binary of
renaming it, then placing the new file works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, wasn’t checking the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zstandard&lt;/span&gt;&lt;/code&gt; version and as a result could
crash if too old versions of it. This is now checked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Large amounts of bug fixes for the dependency scanner. It got
cleaned up and now handles many more cases correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, was not properly detecting wrong ClangCL architecture
mismatch with the Python architecture. This could result in strange
errors during C compilation in this setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added implicit dependencies for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;asyncpg&lt;/span&gt;&lt;/code&gt; module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Detect Debian or Ubuntu base and distribution name more
reliably. This helps esp. with static libpython optimization being
recognized automatically.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We now disallow options that take arguments to be provided without
using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Previously &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt; &lt;span class="pre"&gt;no&lt;/span&gt;&lt;/code&gt; worked just as well as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto=no&lt;/span&gt;&lt;/code&gt; did. And
that was the cause of problems when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt;&lt;/code&gt; first became a choice.&lt;/p&gt;
&lt;p&gt;Recently similar, but worse problems were observed, where e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-module&lt;/span&gt;&lt;/code&gt; could swallow trailing other arguments when
users forgot to specify the name by accident. Therefore this style of
giving options is now explicitly rejected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compiled types of Nuitka now inherit from uncompiled types. This
should allow easier and more complete compatibility, making even code
in extension modules that uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject_IsInstance&lt;/span&gt;&lt;/code&gt; work, e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pydanctic&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added signing of application bundles and standalone binaries
for deployment to newer macOS platforms and esp. M1 where these are
mandatory for execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added support for selecting the single macOS target arch to
create a binary for. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;universal&lt;/span&gt;&lt;/code&gt; architecture is not yet
supported though, but will be added in a future release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for compression in onefile mode through the use of an
other Python installation, that has the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zstandard&lt;/span&gt;&lt;/code&gt; module
installed. With this it will work with 2.6 or higher, but require a
3.5 or higher Python with it installed in either &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt; or on
Windows in the registry alternatively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added UPX plugin to compress created extension modules and binaries
and for standalone mode, the included DLLs. For onefile, the
compression is not useful since it has the payload already
compressed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a more explicit way to list usable MSVC versions with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc=list&lt;/span&gt;&lt;/code&gt; rather than requiring an invalid value. Check values
given in the same way that Scons will do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=-u&lt;/span&gt;&lt;/code&gt; which disabled outputs
buffers, so that these outputs are written immediately.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Always on plugins now can have command line options. We want
this for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin that is enabled by default in this
release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added ability for plugin to provide fake dependencies for a
module. We want the this for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; plugin, that is
now enabled by default in this release too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added ability for plugins to modify DLLs after copy for
standalone. We will be using this in the new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;upx&lt;/span&gt;&lt;/code&gt; plugin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added retry for file copies that fail due to still running program.
This can happen on Windows with DLLs in standalone mode. For
interactive compilation, this allows a retry to happen after
prompting the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added ability to list MSVC versions with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc=list&lt;/span&gt;&lt;/code&gt;, and
detect illegal values given to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc=&lt;/span&gt;&lt;/code&gt; before Scons sees them, it
also crashes with a relative unhelpful error message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: When linking, close the C compilation progress bar and state that
that linking is going on. For some very large LTO compilations, it
was otherwise at 100% and still taking a long time, confusing users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added new plugin that is designed to handle DLL dependencies
through a configuration file that can both handle filename patterns
as well as code provided DLL locations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimization: Exclude parts of the standard library by default. This
allows for much smaller standalone distributions on modules, that can
be expected to never be an implicit dependency of anything, e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;argparse&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pydoc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Standalone: Do not include &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;encodings.bz2_codec&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;encodings.idna&lt;/span&gt;&lt;/code&gt; anymore, these are not file system encodings, but
require extension modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure we use proper &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(void)&lt;/span&gt;&lt;/code&gt; arguments for C functions without
arguments, as for C functions, that makes a real difference, they are
variable args functions and more expensive to call otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For standalone, default to using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=no_site&lt;/span&gt;&lt;/code&gt; to avoid
the overhead that the typically unused &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt; module incurs. It
often includes large parts of the standard library, which we now want
to be more selective about. There is new Python flag added called
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=site&lt;/span&gt;&lt;/code&gt; that restores the inclusion of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt;
module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Exclude non-critical codec modules from being technical,
i.e. have to be available at program startup. This removes the need
for e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bz2&lt;/span&gt;&lt;/code&gt; related extension modules previously included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In reformulations, use dictionary methods directly, we have since
introduced dictionary specific methods, and avoid the unnecessary
churn during optimization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The complex call helper could trigger unnecessary passes in some
cases. The pure functions were immediately optimized, but usages in
other modules inside loops sometimes left them in incomplete states.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Avoid repeated hashing of the same files over and over for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cache dependencies of bytecode demoted modules in first compile and
reuse that information in subsequent compilations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Added option for switching compression method for onefile
created with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AppImage&lt;/span&gt;&lt;/code&gt;. The default is also now &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gzip&lt;/span&gt;&lt;/code&gt; and not
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xz&lt;/span&gt;&lt;/code&gt; which has been observed to cause much slower startup for
little size gains.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: For failed relative imports, during compiled time
absolute imports were attempted still and included if successful, the
imports would not be use them at run time, but lead to more modules
being included than necessary.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is now a &lt;a class="reference external" href="https://discord.gg/nZ9hr9tUck"&gt;Discord server for Nuitka community&lt;/a&gt; where you can hang out with the
developers and ask questions. It is mirrored with the Gitter
community chat, but offers more features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; is now on by default. It helps scalability by
changing popular packages to not provide test frameworks,
installation tools etc. in the resulting binary. This oftentimes
reduces the compilation by thousands of modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; plugin is now on by default. Detecting
its need automatically removes a source of problems for first time
users, that didn’t know to enable it, but had all kinds of strange
crashes from multiprocessing malfunctioning. This should enhance the
out of the box experience by a lot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With this release, the version numbering scheme will be changed. For
a long time we have used 4 digits, where one is a leading zero. That
was initially done to indicate that it’s not yet ready. However, that
is just untrue these days. Therefore, we switch to 3 digits, and a
first hotfix with now be 0.7.1 rather than 0.6.19.1, which is too
long.&lt;/p&gt;
&lt;p&gt;It has been observed that people disregard differences in the third
digit, but actually for Nuitka these have oftentimes been very
important updates. This change is to rectify it, and a new release
will be &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0.8&lt;/span&gt;&lt;/code&gt;, and there will be a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.0&lt;/span&gt;&lt;/code&gt; release after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0.9&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a new section to User Manual that explains how to manually load
files, such that it is cleaner and compatible code. Using paths
relative to current directory is not the right way, but there are
nice helpers that make it very simple and correct with all kinds of
contexts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Report the MSVC version in Scons output during compilation. The 2022
version is required, but we support everything back to 2008, to work
on very old systems as well. This will help identifying differences
that arise from there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quality: Find Clang format from MSVC 2022 too. We use in auto format
of Nuitka source code, but need to also search that as a new path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a spellchecker extension for Visual Code, resulting in many
spelling fixes in all kinds of documentation and code. This finds
more things than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;codespell&lt;/span&gt;&lt;/code&gt;, but also has a lot of false alarms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check value of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--onefile-tempdir-spec&lt;/span&gt;&lt;/code&gt; for typical user errors. It
cannot be &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.&lt;/span&gt;&lt;/code&gt; as that would require to overwrite the onefile binary
on Windows, and will generally behave very confusing. Warn about
absolute or relative paths going outside of where the binary lives.
Can be useful in controlled setups, but not generally. Also warn
about using no variables, making non-unique paths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Flavor detection was largely expanded. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Apple&lt;/span&gt;&lt;/code&gt; flavor is
recognized on more systems. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Homebrew&lt;/span&gt;&lt;/code&gt; was newly added, and we
actually can detect &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CPython&lt;/span&gt;&lt;/code&gt; reliably as a first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a tool from leo project to create better &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyi&lt;/span&gt;&lt;/code&gt; files for
modules. We will make use of it in the future to enhance the files
created by Nuitka to not only contain hidden dependencies, but
optionally also module signatures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Clearer information from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyside2&lt;/span&gt;&lt;/code&gt; that patched wheels
might be mandatory and workarounds only patches cannot be done for
older Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added progress bars for DLL dependency detection and DLL copying for
standalone. These both can end up using take a fair bit of time
depending on project size, and it’s nice to know what’s going on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added support for using both &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--onefile&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--macos-create-app-bundle&lt;/span&gt;&lt;/code&gt; as it is needed for PySide2 due to
issues with signing code now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added warning when attempting to include extension modules in an
accelerated compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modules: Catch the user error of following all imports when creating
a module. This is very unlikely to produce usable results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start integrating &lt;a class="reference external" href="https://sourcery.ai"&gt;Sourcery&lt;/a&gt; for improved
Nuitka code. It will comment on PRs and automatically improve Nuitka
code as we develop it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugging: Added command line tool &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;find-module&lt;/span&gt;&lt;/code&gt; that outputs how
Nuitka locates a module in the Python environment it’s ran with. That
removes the need to use Python prompt to dump &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__file__&lt;/span&gt;&lt;/code&gt; of
imported modules. Some modules even hide parts of their namespace
actively during run-time, the tool will not be affected by that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Refactored Python scan previously used for Scons usage on versions
that need to run in with another Python to be more generally usable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use explicit &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.utils.Hashing&lt;/span&gt;&lt;/code&gt; module that allows the core to
perform these operations with simpler code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;isPathBelow&lt;/span&gt;&lt;/code&gt; for checking if something is a system
library for enhanced robustness and code clarity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Make sure to use our proper error checking wrappers for
command execution when using tools like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;otool&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;codesign&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Avoid a temporary file with a script during technical
import detection. These have been observed to potentially become
corrupted, and this avoids any chance of that happening, while also
being simpler code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid naming things &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shlib&lt;/span&gt;&lt;/code&gt; and call them &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;extension&lt;/span&gt;&lt;/code&gt; instead.
Inspired by the spell checker disliking the former term, which is
also less precise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed the dead architecture selection option for Windows, it was
unused for a long time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved Windows &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SxS&lt;/span&gt;&lt;/code&gt; handling of DLLs to a more general place where
also macOS specific tasks are applied, to host standard modification
of DLLs during their copying.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Better matching of relative filenames for search modes of the
individual test suite runners.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debugger outputs on segfaults were no longer visible and have been
restored.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release is tremendous progress for macOS. Finally biting the bullet
and paying obscene amounts of money to rent an M1 machine, it was
possible to enhance the support for this platform. Currently typical
packages for macOS are being made compatible as well, so it can now be
expected to perform equally well.&lt;/p&gt;
&lt;p&gt;On the quality side, the spell checker has had some positive effects,
finding typos and generally misspelled code, that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;codespell&lt;/span&gt;&lt;/code&gt; does
not, due to it being very conservative.&lt;/p&gt;
&lt;p&gt;The trend to enhance plugins has continued. The copying of DLLs is very
nearly finalized. Making more plugins enabled by default is seeing a lot
of progress, with 2 important ones addressed.&lt;/p&gt;
&lt;p&gt;Work on the size of distributions has seen a lot of positive results, in
that now standalone distributions are often very minimal, with many
extension modules from standard library no longer being present.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-07.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2022-02-21T13:10:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-compile-windows.html</id>
    <title>Compile Python on Windows</title>
    <updated>2022-05-15T07:46:50+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="compile-python-on-windows"&gt;

&lt;p&gt;Looking to create an executable from Python script? Let me show you the
full steps to achieve it on &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;section id="steps-to-create-a-windows-executable-from-a-python-script-using-nuitka"&gt;
&lt;h2&gt;Steps to create a Windows executable from a Python script using Nuitka&lt;/h2&gt;
&lt;section id="step-1-add-python-to-windows-path"&gt;
&lt;h3&gt;Step 1: Add Python to Windows Path&lt;/h3&gt;
&lt;p&gt;The simple way to add Python to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt; do this is to check the box
during installation of CPython. You just &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;download python&lt;/a&gt; and install or modify Python by
checking the box in the installer:&lt;/p&gt;
&lt;img alt="check modify PATH when you install python" src="_images/Python-Installation-Screen-Windows.png" /&gt;
&lt;p&gt;This box is not enabled by default. You can also manually add the Python
installation path to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PATH&lt;/span&gt;&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You do not strictly have to execute this step, you can also replace
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt; with just the absolute path, e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C:\Users\YourName\AppData\Local\Programs\Python\Python310\python.exe&lt;/span&gt;&lt;/code&gt;
but that can become inconvenient.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="step-2-open-a-windows-prompt"&gt;
&lt;h3&gt;Step 2: Open a Windows Prompt&lt;/h3&gt;
&lt;p&gt;This can be &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmd.exe&lt;/span&gt;&lt;/code&gt; or Windows Terminal, or from an IDE like Visual
Code or PyCharm. And then type &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt; to verify the correct
installation, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exit&lt;/span&gt;&lt;/code&gt; to leave the Python prompt again.&lt;/p&gt;
&lt;img alt="Launch Python in Windows prompt to verify" src="_images/Python-Installation-CMD.png" /&gt;
&lt;/section&gt;
&lt;section id="step-3-install-the-nuitka-python-compiler-package"&gt;
&lt;h3&gt;Step 3: Install the Nuitka Python Compiler package&lt;/h3&gt;
&lt;p&gt;Now install Nuitka with the following command.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install nuitka
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Install Nuitka in Python" src="_images/Nuitka-Installation-CMD.png" /&gt;
&lt;/section&gt;
&lt;section id="step-4-run-your-program"&gt;
&lt;h3&gt;Step 4: Run your Program&lt;/h3&gt;
&lt;p&gt;Now run your program from the terminal. Convince yourself that
everything is working.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python fancy-program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If it’s a GUI program, make sure it has a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyw&lt;/span&gt;&lt;/code&gt; suffix. That is
going to make Python know it’s one.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="step-5-create-the-executable-using-nuitka"&gt;
&lt;h3&gt;Step 5: Create the Executable using Nuitka&lt;/h3&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m nuitka --onefile fancy-program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In case of a terminal program, add one of many options that Nuitka has
to adapt for platform specifics, e.g. program icon, and so on.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m nuitka --onefile --windows-disable-console fancy-program.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This will create &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fancy-program.exe&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-6-run-the-executable"&gt;
&lt;h3&gt;Step 6: Run the Executable&lt;/h3&gt;
&lt;p&gt;Your executable should appear right near &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fancy-program.py&lt;/span&gt;&lt;/code&gt; and
opening the explorer or running &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fancy-program.exe&lt;/span&gt;&lt;/code&gt; from the Terminal
should be good.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fancy-program.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-compile-windows.html" rel="alternate"/>
    <summary>Looking to create an executable from Python script? Let me show you the
full steps to achieve it on Windows.</summary>
    <category term="Python" label="Python"/>
    <category term="quiz" label="quiz"/>
    <published>2022-05-15T07:46:50+00:00</published>
  </entry>
</feed>
