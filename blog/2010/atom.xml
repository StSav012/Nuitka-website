<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog - Posted in 2010</title>
  <updated>2022-05-21T09:29:05.889365+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/2010/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/starting-to-blog-who-and-why.html</id>
    <title>Starting to blog, who and why?</title>
    <updated>2010-08-05T22:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="starting-to-blog-who-and-why"&gt;

&lt;p&gt;My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.&lt;/p&gt;
&lt;p&gt;I am privately a developer of Free Software, and currently preparing the
release of my Python compiler. The name of the project will be “Nuitka”
chosen to honor my Russian wife Anna. We are a happy family with 2 sons,
born 2004 and 2007.&lt;/p&gt;
&lt;p&gt;I am starting this blog mostly to report about the new compiler. I don’t
think I will share much about my private life here, but I sure will
share a couple of photos with you occasionally. But mostly I will be
excited to report on the compiler progress.&lt;/p&gt;
&lt;p&gt;So far I didn’t feel like I had anything to say, but the compiler is
approaching its release later this month, and I will need a forum to
talk about it.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/starting-to-blog-who-and-why.html" rel="alternate"/>
    <summary>My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-05T22:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/releasing-nuitka-to-the-world.html</id>
    <title>Releasing Nuitka to the World</title>
    <updated>2010-08-18T07:49:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="releasing-nuitka-to-the-world"&gt;

&lt;p&gt;Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.&lt;/p&gt;
&lt;p&gt;Currently it’s not more than 4% faster than CPython. No surprise there,
if all you did, is removing the bytecode interpretation so far. It’s not
impressive at all. It’s not even a reason to use it. But it’s also only
a start. Clearly, once I get into optimizing the code generation of
Nuitka, it will only get better, and then probably in sometimes dramatic
steps. But I see this as a long term goal.&lt;/p&gt;
&lt;p&gt;I want to have infrastructure in the code place, before doing lots of
possible optimizations that just make Nuitka unmaintainable. And I will
want to have a look at what others did so far in the domain of type
inference and how to apply that for my project.&lt;/p&gt;
&lt;p&gt;I look forward to the reactions about getting this far. The supported
language volume is amazing, and I have a set of nice tricks used. For
example the way generator functions are done is a clever hack.&lt;/p&gt;
&lt;p&gt;Where to go from here? Well, I guess, I am going to judge it by the
feedback I receive. I personally see “constant propagation” as a
laudable first low hanging fruit, that could be solved.&lt;/p&gt;
&lt;p&gt;Consider this readable code on the module level:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now imagine you are using this very frequently in code. Quickly you
determine that the following will be much faster:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Still good? Well, probably next step you are going to inline the
function calls entirely. For optimization, you are making your code less
readable. I do not all appreciate that. My first goal is there to make
the more readable code perform as well or better as the less readable
variant.&lt;/p&gt;
&lt;p&gt;But yes, lets see what happens. Oh, and you will find its &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/releasing-nuitka-to-the-world.html" rel="alternate"/>
    <summary>Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-18T07:49:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html</id>
    <title>New git repository to sync with Nuitka releases</title>
    <updated>2010-08-26T23:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="new-git-repository-to-sync-with-nuitka-releases"&gt;

&lt;p&gt;For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then do your own modifications, and do:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rebase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;each time there is a new release. You will be led through the merge
process as usual. To reduce your differences, feel free to send me the
patches you create with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and I will incorporate useful stuff.&lt;/p&gt;
&lt;div class="admonition-please-note admonition"&gt;
&lt;p class="admonition-title"&gt;Please note&lt;/p&gt;
&lt;p&gt;If you publish your own git repository, please be so kind and name it
“Nuitka-unofficial” or similar, or else it might be mistaken with the
real thing, and drop me a line about it, just so I know.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html" rel="alternate"/>
    <summary>For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:</summary>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-08-26T23:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/family-photo.html</id>
    <title>Family Photo</title>
    <updated>2010-09-07T08:56:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="family-photo"&gt;

&lt;p&gt;As promised I will post some photos of the family occasionally.&lt;/p&gt;
&lt;p&gt;This is an artwork that I created with GIMP:&lt;/p&gt;
&lt;figure class="align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/Anna_Sonne_Andre_Michael.png"&gt;&lt;img alt="Photo of my family" src="../_images/Anna_Sonne_Andre_Michael.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;It’s a good family, and it’s mine. :-)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/family-photo.html" rel="alternate"/>
    <summary>As promised I will post some photos of the family occasionally.</summary>
    <category term="family" label="family"/>
    <published>2010-09-07T08:56:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-scope-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-12T16:01:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="n"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What is going to happen? Well, think about it, the solution is in the
next paragraph.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that the call “some_function()” is going to give
you a “UnboundLocalError” exception.&lt;/p&gt;
&lt;p&gt;This is because it in functions unlike in classes (or modules) do look
ahead for assigned to variable names. Python allocates a slot for local
variables of functions and that is a property that doesn’t change -
unless you say “global” of course. This slot is used for every access to
the variable name, which forbids you to make it local.&lt;/p&gt;
&lt;p&gt;Surprised? I was too! I only learned it while doing my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler
Nuitka&lt;/a&gt; and I made it a separate posting,
because it really surprised me how different function body and class
body work.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-scope-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="quiz" label="quiz"/>
    <published>2010-09-12T16:01:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-20T20:51:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;for_closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f=2&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Can fool it to nest&lt;/span&gt;
        &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Locals now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Closure was taken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_closure&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Globals still work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_global&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Added local from code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

    &lt;span class="n"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Can you overcome the SyntaxError this gives in CPython? Normally exec
like this is not allowed for nested functions. Well, think about it, the
solution is in the next paragraph.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that you need to add “in None, None” to the exec
and you are fine. The exec is now allowed and behaves as expected. You
can see it in the locals, “f” was indeed added to it, the closure value
is correct, and the global still works.&lt;/p&gt;
&lt;p&gt;It seems the “SyntaxError” tries to avoid such code, but on the other
hand, exec is not forbidden when it has parameters, and those imply
defaults when they are None.&lt;/p&gt;
&lt;p&gt;Now, I had this strange realization when implementing the “exec”
behaviour for my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler Nuitka&lt;/a&gt; which
in its next version (due later this week) will be able to handle this
type code as well. :-)&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-20T20:51:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html</id>
    <title>Nuitka needs you - a call for help</title>
    <updated>2010-11-23T16:11:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-needs-you-a-call-for-help"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Python3 support was added, and has reached 3.3 in the mean time. The
doctests are extracted by a script indeed. But exception stack
correctness is an ongoing struggle.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;my Python compiler Nuitka has come a long way, and currently I have
little to no time to spend on it, due to day job reasons, so it’s going
to mostly stagnate for about 2 weeks from my side. But that’s coming to
an end, and still I would like to expand what we currently have, with
your help.&lt;/p&gt;
&lt;p&gt;Note: You can check the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt;
for clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;p&gt;As you will see, covering all the CPython 2.6 and 2.7 language features
is already something. Other projects are far, far away from that. But
going ahead, I want to secure that base. And this is where there are
several domains where you can help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 3.1 or higher&lt;/p&gt;
&lt;p&gt;I did some early testing. The C/API changed in many ways, and my
current working state has a couple of fixes for it. I would like
somebody else to devote some time to fixing this up. Please contact
me if you can help here, esp. if you are competent in the C/API
changes of Python 3.1. Even if the CPython 3.1 doesn’t matter as much
to me, I believe the extended coverage from the new tests in its test
suite would be useful. The improved state is not yet released. I
would make an release to the person(s) that want to work on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Doctests support&lt;/p&gt;
&lt;p&gt;I have started to extract the doctests from the CPython 2.6 test
suite. There is a script that does it, and you basically only need to
expand it with more of the same. No big issue there, but it could
find issues with Nuitka that we would like to know. Of course, it
should also be expanded to CPython 2.7 test suite and ultimately also
CPython 3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception correctness&lt;/p&gt;
&lt;p&gt;I noted some issues with the stacks when developing with the CPython
2.7 tests, or now failing 2.6 tests, after some merge work. But what
would be needed would be tests to cover all the situations, where
exceptions could be raised, and stack traces should ideally be
identical for all. This is mostly only accuracy work and the CPython
test suite is bad at covering it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these areas would be significant help, and do not necessarily or at
all require any Nuitka inside knowledge. You should also subscribe the
mailing list (since closed) if you consider helping, so we can discuss
things in the open.&lt;/p&gt;
&lt;p&gt;If you choose to help me, before going even further into optimization,
in all likelihood it’s only going to make things more solid. The more
tests we have, the less wrong paths we can take. This is why I am asking
for things, which all point into that direction.&lt;/p&gt;
&lt;p&gt;Thanks in advance, Kay Hayen&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <published>2010-11-23T16:11:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-pre-release-034pre1.html</id>
    <title>Nuitka Pre-Release 0.3.4pre1</title>
    <updated>2010-12-06T23:27:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-pre-release-0-3-4pre1"&gt;

&lt;p&gt;This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;“What is Nuitka?”&lt;/a&gt; for clarification of what it is now and what it
wants to be.&lt;/p&gt;
&lt;p&gt;For a long time, Nuitka has generated a single C++ file, even when
embedding many modules into one. And it has always showed that the GNU
g++ compiler clearly has exponential compile time behavior when
translating these into the executable.&lt;/p&gt;
&lt;p&gt;This is no more the case. So this pre-release is mainly about making the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt; feature useful. Before the release, I may look into
optimizations for speed again. Right now time is very short due to day
job reasons, so this pre-release is also about allowing people to use
the improvements that I have made and get some feedback about it.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;None at all. Although I am sure that there may be regressions on the
options side. The tests of CPython 2.7 all pass still, but you may
find some breakage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Static helpers source code has been moved to “.hpp” and “.cpp” files,
instead of being in “.py” files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated generated code for each module is now a separate file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants etc. go to their own file (although not named sensible yet)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Uses Scons to make the build.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I have added ExtremClosure from the Python quiz. I feel it was not
covered by existing tests yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable “NUITKA_SCONS” which should
point to the directory with the Scons file for Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;create-environment.sh&lt;/span&gt;&lt;/code&gt; can now be sourced (if you are in the
top level directory of Nuitka) or be used with eval. In either case
it also reports what it does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;None at this time. It likely didn’t change much at all. And I am not yet
using the link time optimization feature of the g++ compiler, so
potentially it should be worse than before at max.&lt;/p&gt;
&lt;p&gt;This release will be inside the “git” repository only. Check out &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt; to get it.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-pre-release-034pre1.html" rel="alternate"/>
    <summary>This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page “What is Nuitka?” for clarification of what it is now and what it
wants to be.</summary>
    <category term="compiler" label="compiler"/>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-12-06T23:27:00+00:00</published>
  </entry>
</feed>
