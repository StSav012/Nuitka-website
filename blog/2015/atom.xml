<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog - Posted in 2015</title>
  <updated>2022-05-21T09:37:31.744620+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/2015/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.25">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/article-over-nuitka-standalone.html</id>
    <title>Article about Nuitka Standalone Mode</title>
    <updated>2015-01-06T12:46:50+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="article-about-nuitka-standalone-mode"&gt;

&lt;p&gt;There is a really well written article about Nuitka written by Tom
Sheffler.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The article has since become unavailable unfortunately.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It inspired me to finally become clean with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__file__&lt;/span&gt;&lt;/code&gt; attributes in
standalone mode. Currently it points to where your source was when
things were compiled. In the future (in standalone mode, for accelerated
mode that continues to be good), it will point into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.dist&lt;/span&gt;&lt;/code&gt;
folder, so that the SWIG workaround may become no longer necessary.&lt;/p&gt;
&lt;p&gt;Thanks Tom for sharing your information, and good article.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/article-over-nuitka-standalone.html" rel="alternate"/>
    <summary>There is a really well written article about Nuitka written by Tom
Sheffler.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2015-01-06T12:46:50+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-2014.html</id>
    <title>Nuitka progress 2014</title>
    <updated>2015-03-02T07:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-2014"&gt;

&lt;p&gt;Again, not much has happened publicly to Nuitka, except for some
releases, so it’s time to make a kind of status post, about the really
exciting news there is, also looking back at 2014 for Nuitka, and
forward of course.&lt;/p&gt;
&lt;p&gt;I meant to post this basically since last year, but never got around to
it, therefore the 2014 in the title.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-2014" id="id1"&gt;Nuitka progress 2014&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#improved-code-generation" id="id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id5"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cells-for-closure" id="id6"&gt;Cells for Closure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#local-variable-storage" id="id7"&gt;Local Variable Storage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id12"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id13"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id14"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
enabling &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka. There is a component called “constraint collection”, which is
tasked with driving the optimization, and collecting variable traces.&lt;/p&gt;
&lt;p&gt;Based on these traces, optimizations can be made. Having SSA or not, is
(to me) the difference between Nuitka as a compiler, and Nuitka as an
optimizing compiler.&lt;/p&gt;
&lt;p&gt;The news is, SSA has carried the day, and is used throughout code
generation for some time now, and gave minor improvements. It has been
applied to the temporary and local variable values.&lt;/p&gt;
&lt;p&gt;And currently, work is on the way to expand it to module and shared
variables, which can get invalidated quite easily, as soon as unknown
code is executed. An issue there is to identify all those spots
reliably.&lt;/p&gt;
&lt;p&gt;And this spring, we are finally going to see the big jump that is
happening, once Nuitka starts to use that information to propagate
things.&lt;/p&gt;
&lt;p&gt;Still, right now, this code assigns to a local variable, then reads from
it to return. But not much longer.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is going to instantly give gains, and more importantly, will enable
analysis, that leads to avoiding e.g. the creation of function objects
for local functions, being able to in-line, etc.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improved-code-generation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Improved Code Generation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previously, under the title “C-ish”, Nuitka moved away from C++ based
code generation to less C++ based code generated, and more C-ish code.
This trend continues, and has lead to removing more code generation
improvements.&lt;/p&gt;
&lt;p&gt;The important change recently was to remove the usage of the blocking
holdouts, the C++ classes used for local variables are closure taking,
and release, and move those to be done manually.&lt;/p&gt;
&lt;p&gt;This enabled special code generation for in-place operations, which are
the most significant improvements of the upcoming release. These were
held back on, as with C++ destructors doing the release, it’s
practically impossible to deal with values suddenly becoming illegal.
Transfer of object ownership needs to be more fluid than could be
presented to C++ objects.&lt;/p&gt;
&lt;p&gt;Currently, this allows to speed up string in-place operations, which
very importantly then, can avoid to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;memcpy&lt;/span&gt;&lt;/code&gt; large values potentially.
And this is about catching up to CPython in this regard. After that, we
will likely be able to expand it to cases where CPython could never do
it, e.g. also &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; objects&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The scalability of Nuitka depends much on generated code size. With it
being less stupid, the generated code is now not only faster, but
definitely smaller, and with more optimization, it will only become more
practical.&lt;/p&gt;
&lt;p&gt;Removing the many C++ classes already gave the backend compiler an
easier time. But we need to do more, to e.g. have generic parameter
parsing, instead of specialized per function, and module exclusive
constants should not be pre-created, but in the module body, when they
are used.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is not a whole lot to gain in the compatibility domain anymore.
Nothing important certainly. But there are these minor things.&lt;/p&gt;
&lt;section id="cells-for-closure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Cells for Closure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;However, since we now use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyCell&lt;/span&gt;&lt;/code&gt; objects for closure, we could start
and provide a real &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__closure__&lt;/span&gt;&lt;/code&gt; value, that could even be writable.
We could start supporting that easily.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="local-variable-storage"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Local Variable Storage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Currently, local variables use stack storage. Were we to use function
object or frame object attached storage, we could provide frame locals
that actually work. This may be as simple as to put those in an array on
the stack and use the pointer to it.&lt;/p&gt;
&lt;p&gt;Suddenly locals would become writable. I am not saying this is useful,
just that it’s possible to do this.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The work on automated performance graphs has made progress, and they are
supposed to show up on &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of which
makes it basically useless to everybody except me. And even harder for
me than necessary.&lt;/p&gt;
&lt;p&gt;At least it’s updated to latest Nikola, and uses PyGal for the graphics
now, so it’s easier to expand. The plan here, is to integrate with
special pages from a Wiki, making it easy to provide comments.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka is pretty good, and as usual it continued
to improve only.&lt;/p&gt;
&lt;p&gt;The major improvements came from handling case collisions between
modules and packages. One can have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Module.py&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;module/__init__.py&lt;/span&gt;&lt;/code&gt; and they both are expected to be different, even
on Windows, where filenames are case insensitive.&lt;/p&gt;
&lt;p&gt;So, giving up on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;implib&lt;/span&gt;&lt;/code&gt; and similar, we finally have our own code to
scan in a compatible way the file system, and make these determinations,
whereas library code exposing functionality, doesn’t handling all things
in really the proper way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives some, bit not quite enough &lt;a class="reference external" href="/pages/donations.html"&gt;donations&lt;/a&gt;. There is no support from
organizations like e.g. the PSF, and it seems I better not hold my
breath for it. I will travel to Europython 2015, and would ask you to
support me with that, it’s going to be expensive.&lt;/p&gt;
&lt;p&gt;In 2014, with donations, I bought a “Cubox i4-Pro”, which is an ARM
based machine with 4 cores, and 2GB RAM. Works from flash, and with the
eSATA disk attached, it works nice for continuous integration, which
helps me a lot to deliver extremely high quality releases. It’s pretty
nice, except that when using all 4 cores, it gets too hot. So “systemd”
to the rescue and just limited the Buildbot slave’s service to use 3
cores of CPU maximum and now it runs stable.&lt;/p&gt;
&lt;p&gt;Also with donations I bought a Terrabyte SSD, which I use on the desktop
to speed up hosting the virtual machines, and my work in general.&lt;/p&gt;
&lt;p&gt;And probably more important, the host of “nuitka.net” became a real
machine with real hardware last year, and lots more RAM, so I can spare
myself of optimizing e.g. MySQL for low memory usage. The monthly fee of
that is substantial, but supported from your donations. Thanks a lot!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Things are coming along nicely. When I started out, I was fully aware
that the project is something that I can do on my own if necessary, and
that has not changed. Things are going slower than necessary though, but
that’s probably very typical.&lt;/p&gt;
&lt;p&gt;But you can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;p&gt;Nuitka is about to make break through progress. And you can be a part of
it. Now.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More “C-ish” code generation&lt;/p&gt;
&lt;p&gt;The next release is going to be more “C-ish” than before, and we can
start to actually migrate to really “C” language. You can help out if
you want to, this is fairly standard cleanups. Just pop up on the
mailing list and say so.&lt;/p&gt;
&lt;p&gt;This prong of action is coming to a logical end. The “C-ish” project,
while not planned from the outset, turns out to be a full success.
Initially, I would not have started Nuitka, should I have faced the
full complexity of code generation that there is now. So it was good
to start with “C++”, but it’s a better Nuitka now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More SSA usage&lt;/p&gt;
&lt;p&gt;The previous releases consolidated on SSA. A few missing
optimizations were found, because SSA didn’t realize things, which
were then highlighted by code generation being too good, e.g. not
using exception variables.&lt;/p&gt;
&lt;p&gt;We seem to have an SSA that can be fully trusted now, and while it
can be substantially improved (e.g. the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try/finally&lt;/span&gt;&lt;/code&gt; removes all
knowledge, although it only needs to do a partial removing of
knowledge for the finally block, not for afterwards at all), it will
already allow for many nice things to happen.&lt;/p&gt;
&lt;p&gt;Once we take it to that next level, Nuitka will be able to speed up
some things by much more than the factor it basically has provided
for 2 years now, and it’s probably going to happen before summer, or
so I hope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Value propagation&lt;/p&gt;
&lt;p&gt;Starting out with simple cases, Nuitka will forward propagate
variable values, and start to eliminate variable usages entirely,
where they are not needed.&lt;/p&gt;
&lt;p&gt;That will make many things much more compact, and faster at run time.
We will then try and build “gates” for statements that they cannot
pass, so we can e.g. optimize constant things outside of loops, that
kind of thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When these 3 things come to term, Nuitka will make a huge step ahead. I
look forward to demoing function call in-lining, or at least avoiding
the argument parsing at EuroPython 2015, making direct calls, which will
be way faster than normal calls.&lt;/p&gt;
&lt;p&gt;From then on, a boatload of work remains. The infrastructure in place,
still there is going to be plenty of work to optimize more and more
things conretely.&lt;/p&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-2014.html" rel="alternate"/>
    <summary>Again, not much has happened publicly to Nuitka, except for some
releases, so it’s time to make a kind of status post, about the really
exciting news there is, also looking back at 2014 for Nuitka, and
forward of course.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-03-02T07:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-spring-2015.html</id>
    <title>Nuitka Progress in Spring 2015</title>
    <updated>2015-04-30T16:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-in-spring-2015"&gt;

&lt;p&gt;It’s absolutely time to speak about what’s going on with Nuitka, there
have been a few releases, and big things are going to happen now. The
ones I have always talked of, it’s happening now.&lt;/p&gt;
&lt;p&gt;I absolutely prefer to talk of things when they are completed, that is
why I am shy to make these kinds of postings, but this time, I think
it’s warranted. The next couple of releases are going to be very
different.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-in-spring-2015" id="id1"&gt;Nuitka Progress in Spring 2015&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id3"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id4"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-5" id="id5"&gt;Python 3.5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#cells-for-closure" id="id6"&gt;Cells for Closure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#importing-enhancements" id="id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#debian-stable" id="id12"&gt;Debian Stable&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id13"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#europython-2015" id="id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id15"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id16"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
increasing &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka.&lt;/p&gt;
&lt;p&gt;The component that works on this, is now called “trace collection”, and
does the major driving part for optimization. It collects “variable
traces” and puts them together into “global” forms as well.&lt;/p&gt;
&lt;p&gt;Based on these traces, optimizations can be made. Having SSA or not, is
(to me) the difference between Nuitka as a mere compiler, and Nuitka as
an optimizing compiler.&lt;/p&gt;
&lt;p&gt;The major news is that factory versions of Nuitka now do this in serious
ways, propagating values forward, and we also are close to eliminating
dead assignments, some of which become dead by being having been forward
propagated.&lt;/p&gt;
&lt;p&gt;So we can now finally see that big step, jump really, happening, and
Nuitka does now do some pretty good static optimization, at least
locally.&lt;/p&gt;
&lt;p&gt;Still, right now, this trivial code assigns to a local variable, then
reads from it to return. But not for much longer.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is going to instantly give performance gains, and more importantly,
will enable analysis, that leads to avoiding e.g. the creation of
function objects for local functions, becoming able to in-line, etc.&lt;/p&gt;
&lt;p&gt;This is major excitement to me. And I cannot wait to have the releases
that do this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The focus has also been lately, to reduce Nuitka’s own memory usage. It
has gone down by a large factor, often by avoiding cyclic dependencies
in the data structures, that the garbage collector of Python failed to
deal with properly.&lt;/p&gt;
&lt;p&gt;The scalability of Nuitka also depends much on generated code size. With
the optimization become more clever, less code needs to be generated,
and that will help a lot. On some platforms, MSVC most notably, it can
be really slow, but it’s noteworthy that Nuitka works not just with 2008
edition, but with the latest MSVC, which appears to be better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was not a whole lot to gain in the compatibility domain anymore.
Nothing important certainly. But there are import changes.&lt;/p&gt;
&lt;section id="python-3-5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Python 3.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next release has changes to compile and run the Python3.4 test suite
successfully. Passing here means, to pass/fail in the same way as does
the uncompiled Python. Failures are of course expected, and a nice way
of having coverage for exception codes.&lt;/p&gt;
&lt;p&gt;The new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;&lt;/span&gt;&lt;/code&gt; operator is not supported yet. I will wait with that for
things to stabilize. It’s currently only an alpha release.&lt;/p&gt;
&lt;p&gt;However, Nuitka has probably never been this close to supporting a new
Python version at release time. And since 3.4 was such a heavy drain,
and still not perfectly handled (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;super&lt;/span&gt;&lt;/code&gt; still works like it’s 3.3
e.g.), I wanted to know what is coming a bit sooner.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cells-for-closure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Cells for Closure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We now provide a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__closure__&lt;/span&gt;&lt;/code&gt; value for compiled functions too. These
are not writable in Python, so it’s only a view. Having moved storage
into the compiled function object, that was easy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="importing-enhancements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The the past couple of releases, the import logic was basically
re-written with compatibility much increased. The handling of file case
during import, multiple occurrences in the path, and absolute import
future flags for relative imports has been added.&lt;/p&gt;
&lt;p&gt;It’s mainly the standalone community that will have issues, when just
one of these imports doesn’t find the correct thing, but picking the
wrong one will of course have seriously bad impacts on compile time
analysis too. So once we do cross module optimization, this must be rock
solid.&lt;/p&gt;
&lt;p&gt;I think we have gotten there, tackling these finer details now too.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka, users don’t know what to expect regarding the speed of their
code after compilation through Nuitka, neither now nor after type
inference (possibly hard to guess). Nuitka does a bunch of optimizations
for some constructs pretty heavily, but weak at others. But how much
does that affect real code?&lt;/p&gt;
&lt;p&gt;There may well be no significant gain at all for many people, while
there is a number for PyStone that suggests higher. The current and
future versions possibly do speed up but the point is that you cannot
tell if it is even worth for someone to try.&lt;/p&gt;
&lt;p&gt;Nuitka really has to catch up here. The work on automated performance
graphs has some made progress, and they are supposed to show up on
&lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of
which makes it basically useless to everybody except me. And even
harder for me than necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;However, as a glimpse of what will happen when we in-line functions,
take a look at the case, where we already eliminate parameter parsing
only, and make tremendous speedups:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-calllambdaexpressiondirectly.html"&gt;Lambda call construct case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Right now (the graph gets automatic updates with each change), what you
should see, is that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt; branch is 20 times faster than CPython
for that very specific bit of code. That is where we want to be, except
that with actually in-line, this will of course be even better.&lt;/p&gt;
&lt;p&gt;It’s artificial, but once we can forward propagate local function
creations, it will apply there too. The puzzle completes.&lt;/p&gt;
&lt;p&gt;But we also need to put real programs and use cases to test. This may
need your help. Let me know if you want to.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka is pretty good, and as usual it continued
to improve only.&lt;/p&gt;
&lt;p&gt;Nothing all that important going on there, except the work on a plug-in
framework, which is under development, and being used to handle e.g.
PyQt plug-ins, or known issues with certain packages.&lt;/p&gt;
&lt;p&gt;The importing improvements already mentioned, have now allowed to cover
many more libraries successfully than before.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="debian-stable"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Debian Stable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka is now part of Debian stable, aka Jessie. Debian and Python are
the two things closest to my heart in the tech field. You can imagine
that being an upstream worthy of inclusion into Debian stable is an
import milestone to Nuitka for me.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives the occasional &lt;a class="reference external" href="/pages/donations.html"&gt;donation&lt;/a&gt; and those make me very happy.
As there is no support from organization like the PSF, I am all on my
own there.&lt;/p&gt;
&lt;p&gt;This year I likely will travel to Europython 2015, and would ask you to
support me with that, it’s going to be expensive.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="europython-2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;EuroPython 2015&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have plans to present Nuitka’s function in-lining there, real stuff,
on a fully and functional compiler that works as a drop-in replacement.&lt;/p&gt;
&lt;p&gt;Not 100% sure if I can make it by the time, but things look good.
Actually so far I felt ahead of the plan, but as you know, this can
easily change at any point. But Nuitka stands on very stable grounds
code wise.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Things are coming along nicely. When I started out, I was fully aware
that the project is something that I can do on my own if necessary, and
that has not changed. Things are going slower than necessary though, but
that’s probably very typical.&lt;/p&gt;
&lt;p&gt;But you can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;p&gt;Nuitka is about to make break through progress. And you can be a part of
it. Now.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More SSA usage&lt;/p&gt;
&lt;p&gt;The next releases are going to be all about getting this done.&lt;/p&gt;
&lt;p&gt;Once we take it to that next level, Nuitka will be able to speed up
some things by much more than the factor it basically has provided
for 2 years now, and it’s probably going to happen long before
EuroPython 2015.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function in-lining&lt;/p&gt;
&lt;p&gt;For locally declared functions, it should become possible to avoid
their creation, and make direct calls instead of ones that use
function objects and expensive parameter handling.&lt;/p&gt;
&lt;p&gt;The next step there of course is to not only bind the arguments to
the function signature, but then also to in-line and potentially
specialize the function code. It’s my goal to have that at EuroPython
2015 in a form ready to show off.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When these 2 things come to term, Nuitka will have made really huge
steps ahead and laid the ground for success.&lt;/p&gt;
&lt;p&gt;From then on, a boatload of work remains. The infrastructure in place,
still there is going to be plenty of work to optimize more and more
things conretely, and to e.g. do type inference, and generate different
codes for booleans, ints or float values.&lt;/p&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster. Nuitka will become more and more important only.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-spring-2015.html" rel="alternate"/>
    <summary>It’s absolutely time to speak about what’s going on with Nuitka, there
have been a few releases, and big things are going to happen now. The
ones I have always talked of, it’s happening now.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-04-30T16:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-progress-summer-2015.html</id>
    <title>Nuitka Progress in Summer 2015</title>
    <updated>2015-10-05T08:08:54+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-progress-in-summer-2015"&gt;

&lt;p&gt;A long time has passed again without me speaking about what’s going on
with Nuitka, and that although definitely a lot has happened. I would
contend it’s even &lt;em&gt;because&lt;/em&gt; so much is going on.&lt;/p&gt;
&lt;p&gt;I also am shy to make public postings about unfinished stuff it seems,
but it’s long overdue, so much important and great stuff has happened.
We are in the middle of big things with the compiler and there is a lot
of great achievement.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-progress-in-summer-2015" id="id1"&gt;Nuitka Progress in Summer 2015&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ssa-single-state-assignment-form" id="id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#function-inlining" id="id3"&gt;Function Inlining&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#scalability" id="id4"&gt;Scalability&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#compatibility" id="id5"&gt;Compatibility&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-3-5" id="id6"&gt;Python 3.5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#importing-enhancements" id="id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#performance" id="id8"&gt;Performance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#graphs-and-benchmarks" id="id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#standalone" id="id10"&gt;Standalone&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#other-stuff" id="id11"&gt;Other Stuff&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#funding" id="id12"&gt;Funding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#europython-2015" id="id13"&gt;EuroPython 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#collaborators" id="id14"&gt;Collaborators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#future" id="id15"&gt;Future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="ssa-single-state-assignment-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;SSA (Single State Assignment Form)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a long, long time already, each release of Nuitka has worked towards
increasing &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Static_single_assignment_form"&gt;“SSA”&lt;/a&gt; usage in
Nuitka.&lt;/p&gt;
&lt;p&gt;Now it’s there. The current pre-release just uses it. There were many
things to consider before enabling it, and always a next thing to be
found that was needed. Often good changes to Nuitka, it was also
annoying the hell out of me at times.&lt;/p&gt;
&lt;p&gt;But basically now the forward propagation of variables is in place, with
some limitations that are going to fall later.&lt;/p&gt;
&lt;p&gt;So the current release, soon to be replaced, still doesn’t optimize this
code as well as possible:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But starting with the next release, the value of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; is forward
propagated (also in way more complex situations), and that’s a serious
milestone for the project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="function-inlining"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Function Inlining&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When submitting my talk to EuroPython 2015, I was putting a lot of
pressure on me by promising to demo that. And I did. It was based on the
SSA code that only now became completely reliable, but otherwise very
few few other changes, and it just worked.&lt;/p&gt;
&lt;p&gt;The example I used is this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# can be inlined&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, the function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;g&lt;/span&gt;&lt;/code&gt; is forward propagated to a direct call, as are
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;x&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;y&lt;/span&gt;&lt;/code&gt; into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;return&lt;/span&gt;&lt;/code&gt; statement after making the in-line,
making this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Currently function in-lining is not yet activated by default, for this I
am waiting for a release cycle to carry the load of SSA in the wild. As
you probably know I usually tend to be conservative and to not make too
many changes at once.&lt;/p&gt;
&lt;p&gt;And as this works for local functions only yet, it’s not too important
yet either. This will generally become relevant once we have this
working across modules and their globally defined functions or methods.
This will be a while until Nuitka gets there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scalability"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Scalability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having got Nuitka’s memory usage under control, it turned out that there
are files that can trigger Python recursion &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RuntimeError&lt;/span&gt;&lt;/code&gt; exception
when using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; module to build the Nuitka internal tree. People
really have code with many thousands of operations to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;So, Nuitka here learned to include whole modules as bytecode when it is
too complex as there is no easy way to expand the stack on Windows at
least. That is kind of a limitation of CPython itself I didn’t run into
so far, and rather very annoying too.&lt;/p&gt;
&lt;p&gt;The scalability of Nuitka also depends much on generated code size. With
the optimization become more clever, less code is generated, and that
trend will continue as more structural optimization are applied.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="compatibility"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Very few things are possible here anymore. For the tests, in full
compatibility mode, even more often the less good line number is used.&lt;/p&gt;
&lt;p&gt;Also the plug-in work is leading to improved compatibility with Qt
plugins of PySide and PyQt. Or another example is the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; module that on Windows is now supposed to fork
compiled code too.&lt;/p&gt;
&lt;section id="python-3-5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Python 3.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next release has experimental support for Python 3.5, with the
notable exception that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt;, these do not yet work.
It passes the existing test suite for CPython3.4 successfully. Passing
here means, to pass or fail in the same way as does the uncompiled
Python. Failures are of course expected, as details change, and a nice
way of having coverage for exception codes.&lt;/p&gt;
&lt;p&gt;The new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;&lt;/span&gt;&lt;/code&gt; operator is now supported. As the stable release of
Python3.5 was made recently, there is now some pressure on having full
support of course.&lt;/p&gt;
&lt;p&gt;I am not sure, if you can fully appreciate the catch up game to play
here. It will take a compiled coroutine to support these things
properly. And that poses lots of puzzles to solve. As usual I am binding
these to internal cleanups so it becomes simpler.&lt;/p&gt;
&lt;p&gt;In the case of Python3.5, the single function body node type that is
used for generators, class bodies, and function, is bound to be replaced
with a base class and detailing instances, instead of one thing for them
all, then with coroutines added.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="importing-enhancements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Importing Enhancements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A while ago, the import logic was basically re-written with
compatibility much increased. Then quite some issues were fixed. I am
not sure, but some of the fixes have apparently also been regressions at
times, with the need for other fixes now.&lt;/p&gt;
&lt;p&gt;So it may have worked for you in the past, but you might have to report
new found issues.&lt;/p&gt;
&lt;p&gt;It’s mainly the standalone community that encounters these issues, when
just one of these imports doesn’t find the correct thing, but picking
the wrong one will of course have seriously bad impacts on compile time
analysis too. So once we do cross module optimization, this must be rock
solid.&lt;/p&gt;
&lt;p&gt;I think we have gotten a long way there, but we still need to tackle
some more fine details.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;section id="graphs-and-benchmarks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Graphs and Benchmarks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I also presented this weak point to EuroPython 2015 and my plan on how
to resolve it. And low and behold, turns out the PyPy people had already
developed a tool that will be usable for the task and to present to the
conference.&lt;/p&gt;
&lt;p&gt;So basically I was capable of doing kind of a prototype of comparative
benchmark during EuroPython 2015 already. I will need to complete this.
My plan was to get code names of functions sorted out in a better way,
to more easily match the Nuitka C function names with Python functions
in an automatic way. That matching is the hard part.&lt;/p&gt;
&lt;p&gt;So that is already progressing, but I could need help with that
definitely.&lt;/p&gt;
&lt;p&gt;Nuitka really has to catch up with benchmarks generally.. The work on
automated performance graphs has made more progress, and they are
supposed to show up on &lt;a class="reference external" href="https://speedcenter.nuitka.net"&gt;Nuitka Speedcenter&lt;/a&gt; each time, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;,
or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;factory&lt;/span&gt;&lt;/code&gt; git branches change.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There currently is no structure to these graphs. There is no
explanations or comments, and there is no trend indicators. All of
which makes it basically useless to everybody except me. And even
harder for me than necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As a glimpse of what is possible with in-lined functions, look at this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speedcenter.nuitka.net/constructs/construct-calllambdaexpressiondirectly.html"&gt;Lambda call construct case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But we also need to put real programs and use cases to test. This may
need your help. Let me know if you want to. It takes work on taking the
data, and merging them into one view, linking it with the source code
ideally. That will be the tool you can just use on your own code.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="standalone"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Standalone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The standalone mode of Nuitka was pretty good, and continued to improve
further, now largely with the help of plug-ins.&lt;/p&gt;
&lt;p&gt;I now know that PyGTK is an issue and will need a plug-in to work. Once
the plug-in interface is public, I hope for more outside contributions
here.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Other Stuff&lt;/a&gt;&lt;/h2&gt;
&lt;section id="funding"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Funding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka receives the occasional &lt;a class="reference external" href="/pages/donations.html"&gt;donation&lt;/a&gt; and those make me very happy.
As there is no support from organization like the PSF, I am all on my
own there.&lt;/p&gt;
&lt;p&gt;This year I traveled to Europython 2015, I needed a new desktop computer
after burning the old one through with CI tests, the website has running
costs, and so on. That is pretty hefty money. It would be sweet if aside
of my free time it wouldn’t also cost me money.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="europython-2015"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;EuroPython 2015&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was a blast. Meeting people who knew Nuitka but not me was a
regular occurrence. And many people well appreciate my work. It felt
much different than the years before.&lt;/p&gt;
&lt;p&gt;I was able to present Nuitka’s function in-lining indeed there, and this
high goal that I set myself, quite impressed people. My talk went very
well, I am going to post a link separately in another post.&lt;/p&gt;
&lt;p&gt;Also I made many new contacts, largely with the scientific community. I
hope to find work with data scientists in the coming years. More amd
more it looks like my day job should be closer to Nuitka and my
expertise in Python.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collaborators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Collaborators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nuitka is making break through progress. And you can be a part of it.
Now.&lt;/p&gt;
&lt;p&gt;You can join and should do so now, just &lt;a class="reference external" href="/doc/user-manual.html#join-nuitka"&gt;follow this link&lt;/a&gt; or become part of
the mailing list (since closed) and help me there with request I make,
e.g. review posts of mine, test out things, pick up small jobs, answer
questions of newcomers, you know the drill probably.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="future"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, there is multiple things going on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Function in-lining&lt;/p&gt;
&lt;p&gt;For locally declared functions, it should become possible to avoid
their creation, and make direct calls instead of ones that use
function objects and expensive parameter handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nested frames&lt;/p&gt;
&lt;p&gt;One result of in-lining will be nested frames still present for
exceptions to be properly annotated, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;locals&lt;/span&gt;&lt;/code&gt; giving different
sets of locals and so on.&lt;/p&gt;
&lt;p&gt;Some cleanup of these will be needed for code generation and SSA to
be able to attach variables to some sort of container, and for a
function to be able to reference different sets of these.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Inference&lt;/p&gt;
&lt;p&gt;With SSA in place, we really can start to recognize types, and treat
things that work something assigned from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[]&lt;/span&gt;&lt;/code&gt; different, and with
code special to these.&lt;/p&gt;
&lt;p&gt;That’s going to be a lot of work. For &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; there
are very important use cases, where the code can be much better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shape Analyisis&lt;/p&gt;
&lt;p&gt;My plan for types, is not to use them, but the more general shapes,
things that will be more prevalent than actual type information in a
program. In fact the precise knowledge will be rare, but more often,
we will just have a set of operations performed on a variable, and be
able to guess from there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python 3.5 new features&lt;/p&gt;
&lt;p&gt;The coroutines are a new type, and currently it’s unclear how deep
this is tied into the core of things, i.e. if a compile coroutine can
be a premier citizen immediately, or if that needs more work. I hope
it just takes for the code object to have the proper flag. But there
could be stupid type checks, we shall see.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plug-ins&lt;/p&gt;
&lt;p&gt;Something I wish I could have shown at EuroPython was plug-ins to
Nuitka. It is recently becoming more complete, and some demo plug-ins
for say Qt plugins, or multiprocessing, are starting to work. The API
will need work and of course documentation. Hope is for this to
expand Nuitka’s reach and appeal to get more contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know, if you are willing to help. I really need that help to make
things happen faster. Nuitka will become more and more important only.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-progress-summer-2015.html" rel="alternate"/>
    <summary>A long time has passed again without me speaking about what’s going on
with Nuitka, and that although definitely a lot has happened. I would
contend it’s even because so much is going on.</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2015-10-05T08:08:54+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-podcast-init.html</id>
    <title>Nuitka on Podcast __init__</title>
    <updated>2015-10-25T11:02:56+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-on-podcast-init"&gt;

&lt;p&gt;So, if you want to get to know Nuitka or me, there is a really good
interview from the popular podcast “__init__” online.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pythonpodcast.com/episode-28-kay-hayen-on-nuitka/"&gt;Kay Hayen on Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it’s very good at explaining things, putting it into
perspective, history, future, and generally getting to know what kind of
person I am.&lt;/p&gt;
&lt;p&gt;So, this is probably as good as it ever gets. So please share, like and
go ahead and spread it in this social media craziness that you use all
day.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-podcast-init.html" rel="alternate"/>
    <summary>So, if you want to get to know Nuitka or me, there is a really good
interview from the popular podcast “__init__” online.</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="compiler" label="compiler"/>
    <published>2015-10-25T11:02:56+00:00</published>
  </entry>
</feed>
